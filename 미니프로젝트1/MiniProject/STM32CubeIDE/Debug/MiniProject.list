
MiniProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  0800b3a4  0800b3a4  0000c3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd2c  0800bd2c  0000d064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd2c  0800bd2c  0000cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd34  0800bd34  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd34  0800bd34  0000cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd38  0800bd38  0000cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800bd3c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005248  20000064  0800bda0  0000d064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052ac  0800bda0  0000d2ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e1e  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c75  00000000  00000000  0002deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f2  00000000  00000000  00034600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcd2  00000000  00000000  00035af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023303  00000000  00000000  000517c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3111  00000000  00000000  00074ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000757c  00000000  00000000  00117c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0011f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b38c 	.word	0x0800b38c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800b38c 	.word	0x0800b38c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <DS1302_IO_SetMode_Input>:
#include "ds1302.h"
#include "main.h"


static void DS1302_IO_SetMode_Input(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = DS1302_IO_Pin;
 80005d0:	2340      	movs	r3, #64	@ 0x40
 80005d2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DS1302_IO_GPIO_Port, &GPIO_InitStruct);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <DS1302_IO_SetMode_Input+0x34>)
 80005e2:	f003 f9ef 	bl	80039c4 <HAL_GPIO_Init>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000

080005f4 <DS1302_IO_SetMode_Output>:

static void DS1302_IO_SetMode_Output(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = DS1302_IO_Pin;
 8000608:	2340      	movs	r3, #64	@ 0x40
 800060a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DS1302_IO_GPIO_Port, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <DS1302_IO_SetMode_Output+0x38>)
 800061e:	f003 f9d1 	bl	80039c4 <HAL_GPIO_Init>
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <DS1302_WriteByte>:


static void DS1302_WriteByte(uint8_t data) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
    DS1302_IO_SetMode_Output();
 800063a:	f7ff ffdb 	bl	80005f4 <DS1302_IO_SetMode_Output>

    for (int i = 0; i < 8; i++) {
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e01c      	b.n	800067e <DS1302_WriteByte+0x4e>
        HAL_GPIO_WritePin(DS1302_IO_GPIO_Port, DS1302_IO_Pin, (data >> i) & 1);
 8000644:	79fa      	ldrb	r2, [r7, #7]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	fa42 f303 	asr.w	r3, r2, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	480d      	ldr	r0, [pc, #52]	@ (8000690 <DS1302_WriteByte+0x60>)
 800065a:	f003 fb4f 	bl	8003cfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DS1302_CLK_GPIO_Port, DS1302_CLK_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2120      	movs	r1, #32
 8000662:	480b      	ldr	r0, [pc, #44]	@ (8000690 <DS1302_WriteByte+0x60>)
 8000664:	f003 fb4a 	bl	8003cfc <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f002 ffe3 	bl	8003634 <HAL_Delay>
        HAL_GPIO_WritePin(DS1302_CLK_GPIO_Port, DS1302_CLK_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	4807      	ldr	r0, [pc, #28]	@ (8000690 <DS1302_WriteByte+0x60>)
 8000674:	f003 fb42 	bl	8003cfc <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b07      	cmp	r3, #7
 8000682:	dddf      	ble.n	8000644 <DS1302_WriteByte+0x14>
    }
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020000 	.word	0x40020000

08000694 <DS1302_ReadByte>:

static uint8_t DS1302_ReadByte(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	71fb      	strb	r3, [r7, #7]
    DS1302_IO_SetMode_Input();
 800069e:	f7ff ff8d 	bl	80005bc <DS1302_IO_SetMode_Input>

    for (int i = 0; i < 8; i++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	e020      	b.n	80006ea <DS1302_ReadByte+0x56>
        if (HAL_GPIO_ReadPin(DS1302_IO_GPIO_Port, DS1302_IO_Pin)) {
 80006a8:	2140      	movs	r1, #64	@ 0x40
 80006aa:	4814      	ldr	r0, [pc, #80]	@ (80006fc <DS1302_ReadByte+0x68>)
 80006ac:	f003 fb0e 	bl	8003ccc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d009      	beq.n	80006ca <DS1302_ReadByte+0x36>
            value |= (1 << i);
 80006b6:	2201      	movs	r2, #1
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	b25a      	sxtb	r2, r3
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	71fb      	strb	r3, [r7, #7]
        }
        HAL_GPIO_WritePin(DS1302_CLK_GPIO_Port, DS1302_CLK_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	480b      	ldr	r0, [pc, #44]	@ (80006fc <DS1302_ReadByte+0x68>)
 80006d0:	f003 fb14 	bl	8003cfc <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f002 ffad 	bl	8003634 <HAL_Delay>
        HAL_GPIO_WritePin(DS1302_CLK_GPIO_Port, DS1302_CLK_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2120      	movs	r1, #32
 80006de:	4807      	ldr	r0, [pc, #28]	@ (80006fc <DS1302_ReadByte+0x68>)
 80006e0:	f003 fb0c 	bl	8003cfc <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	dddb      	ble.n	80006a8 <DS1302_ReadByte+0x14>
    }
    return value;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000

08000700 <DS1302_WriteRegister>:

static void DS1302_WriteRegister(uint8_t addr, uint8_t data) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(DS1302_RST_GPIO_Port, DS1302_RST_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	@ 0x80
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <DS1302_WriteRegister+0x44>)
 8000716:	f003 faf1 	bl	8003cfc <HAL_GPIO_WritePin>
    DS1302_WriteByte(addr & 0xFE); // Write command
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff84 	bl	8000630 <DS1302_WriteByte>
    DS1302_WriteByte(data);
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff80 	bl	8000630 <DS1302_WriteByte>
    HAL_GPIO_WritePin(DS1302_RST_GPIO_Port, DS1302_RST_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <DS1302_WriteRegister+0x44>)
 8000736:	f003 fae1 	bl	8003cfc <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020000 	.word	0x40020000

08000748 <DS1302_ReadRegister>:

static uint8_t DS1302_ReadRegister(uint8_t addr) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_GPIO_WritePin(DS1302_RST_GPIO_Port, DS1302_RST_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	480c      	ldr	r0, [pc, #48]	@ (8000788 <DS1302_ReadRegister+0x40>)
 8000758:	f003 fad0 	bl	8003cfc <HAL_GPIO_WritePin>
    DS1302_WriteByte(addr | 0x01); // Read command
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff63 	bl	8000630 <DS1302_WriteByte>
    data = DS1302_ReadByte();
 800076a:	f7ff ff93 	bl	8000694 <DS1302_ReadByte>
 800076e:	4603      	mov	r3, r0
 8000770:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(DS1302_RST_GPIO_Port, DS1302_RST_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	4804      	ldr	r0, [pc, #16]	@ (8000788 <DS1302_ReadRegister+0x40>)
 8000778:	f003 fac0 	bl	8003cfc <HAL_GPIO_WritePin>
    return data;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020000 	.word	0x40020000

0800078c <bcd2dec>:

static uint8_t bcd2dec(uint8_t val) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
    return ((val >> 4) * 10 + (val & 0x0F)); //
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	091b      	lsrs	r3, r3, #4
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 030f 	and.w	r3, r3, #15
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b2db      	uxtb	r3, r3
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <dec2bcd>:

static uint8_t dec2bcd(uint8_t val) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << 4) | (val % 10);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <dec2bcd+0x48>)
 80007ce:	fba2 2303 	umull	r2, r3, r2, r3
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	b258      	sxtb	r0, r3
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <dec2bcd+0x48>)
 80007e0:	fba3 1302 	umull	r1, r3, r3, r2
 80007e4:	08d9      	lsrs	r1, r3, #3
 80007e6:	460b      	mov	r3, r1
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4303      	orrs	r3, r0
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	cccccccd 	.word	0xcccccccd

0800080c <DS1302_SetTime>:
void DS1302_Init(void) {
		DS1302_WriteRegister(0x8E, 0x00); // Disable write protect
		DS1302_WriteRegister(0x8C, 0x00); // 연도 초기화 (예: 2000년)
}

void DS1302_SetTime(RTC_TimeTypeDef* time, RTC_DateTypeDef* date) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    DS1302_WriteRegister(0x80, dec2bcd(time->Seconds & 0x7F));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ffcd 	bl	80007c0 <dec2bcd>
 8000826:	4603      	mov	r3, r0
 8000828:	4619      	mov	r1, r3
 800082a:	2080      	movs	r0, #128	@ 0x80
 800082c:	f7ff ff68 	bl	8000700 <DS1302_WriteRegister>
    DS1302_WriteRegister(0x82, dec2bcd(time->Minutes));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	785b      	ldrb	r3, [r3, #1]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ffc3 	bl	80007c0 <dec2bcd>
 800083a:	4603      	mov	r3, r0
 800083c:	4619      	mov	r1, r3
 800083e:	2082      	movs	r0, #130	@ 0x82
 8000840:	f7ff ff5e 	bl	8000700 <DS1302_WriteRegister>
    DS1302_WriteRegister(0x84, dec2bcd(time->Hours));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffb9 	bl	80007c0 <dec2bcd>
 800084e:	4603      	mov	r3, r0
 8000850:	4619      	mov	r1, r3
 8000852:	2084      	movs	r0, #132	@ 0x84
 8000854:	f7ff ff54 	bl	8000700 <DS1302_WriteRegister>
    DS1302_WriteRegister(0x86, dec2bcd(date->Date));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ffaf 	bl	80007c0 <dec2bcd>
 8000862:	4603      	mov	r3, r0
 8000864:	4619      	mov	r1, r3
 8000866:	2086      	movs	r0, #134	@ 0x86
 8000868:	f7ff ff4a 	bl	8000700 <DS1302_WriteRegister>
    DS1302_WriteRegister(0x88, dec2bcd(date->Month));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffa5 	bl	80007c0 <dec2bcd>
 8000876:	4603      	mov	r3, r0
 8000878:	4619      	mov	r1, r3
 800087a:	2088      	movs	r0, #136	@ 0x88
 800087c:	f7ff ff40 	bl	8000700 <DS1302_WriteRegister>
    DS1302_WriteRegister(0x8C, dec2bcd(date->Year % 100));  // 반드시 0~99 제한
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	78db      	ldrb	r3, [r3, #3]
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <DS1302_SetTime+0xa4>)
 8000886:	fba2 1203 	umull	r1, r2, r2, r3
 800088a:	0952      	lsrs	r2, r2, #5
 800088c:	2164      	movs	r1, #100	@ 0x64
 800088e:	fb01 f202 	mul.w	r2, r1, r2
 8000892:	1a9b      	subs	r3, r3, r2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff92 	bl	80007c0 <dec2bcd>
 800089c:	4603      	mov	r3, r0
 800089e:	4619      	mov	r1, r3
 80008a0:	208c      	movs	r0, #140	@ 0x8c
 80008a2:	f7ff ff2d 	bl	8000700 <DS1302_WriteRegister>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	51eb851f 	.word	0x51eb851f

080008b4 <DS1302_GetTime>:


void DS1302_GetTime(RTC_TimeTypeDef* time, RTC_DateTypeDef* date) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
    time->Seconds = bcd2dec(DS1302_ReadRegister(0x81));
 80008be:	2081      	movs	r0, #129	@ 0x81
 80008c0:	f7ff ff42 	bl	8000748 <DS1302_ReadRegister>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff60 	bl	800078c <bcd2dec>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	709a      	strb	r2, [r3, #2]
    time->Minutes = bcd2dec(DS1302_ReadRegister(0x83));
 80008d4:	2083      	movs	r0, #131	@ 0x83
 80008d6:	f7ff ff37 	bl	8000748 <DS1302_ReadRegister>
 80008da:	4603      	mov	r3, r0
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff55 	bl	800078c <bcd2dec>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	705a      	strb	r2, [r3, #1]
    time->Hours   = bcd2dec(DS1302_ReadRegister(0x85));
 80008ea:	2085      	movs	r0, #133	@ 0x85
 80008ec:	f7ff ff2c 	bl	8000748 <DS1302_ReadRegister>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff4a 	bl	800078c <bcd2dec>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	701a      	strb	r2, [r3, #0]
    date->Date    = bcd2dec(DS1302_ReadRegister(0x87));
 8000900:	2087      	movs	r0, #135	@ 0x87
 8000902:	f7ff ff21 	bl	8000748 <DS1302_ReadRegister>
 8000906:	4603      	mov	r3, r0
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff3f 	bl	800078c <bcd2dec>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	709a      	strb	r2, [r3, #2]
    date->Month   = bcd2dec(DS1302_ReadRegister(0x89));
 8000916:	2089      	movs	r0, #137	@ 0x89
 8000918:	f7ff ff16 	bl	8000748 <DS1302_ReadRegister>
 800091c:	4603      	mov	r3, r0
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff34 	bl	800078c <bcd2dec>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	705a      	strb	r2, [r3, #1]
    uint8_t raw_year = bcd2dec(DS1302_ReadRegister(0x8D));
 800092c:	208d      	movs	r0, #141	@ 0x8d
 800092e:	f7ff ff0b 	bl	8000748 <DS1302_ReadRegister>
 8000932:	4603      	mov	r3, r0
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff29 	bl	800078c <bcd2dec>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
    date->Year = raw_year % 100;  // 0~99 보장
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <DS1302_GetTime+0xac>)
 8000942:	fba2 1203 	umull	r1, r2, r2, r3
 8000946:	0952      	lsrs	r2, r2, #5
 8000948:	2164      	movs	r1, #100	@ 0x64
 800094a:	fb01 f202 	mul.w	r2, r1, r2
 800094e:	1a9b      	subs	r3, r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	70da      	strb	r2, [r3, #3]
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	51eb851f 	.word	0x51eb851f

08000964 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of LCDMutex */
  LCDMutexHandle = osMutexNew(&LCDMutex_attributes);
 8000968:	481f      	ldr	r0, [pc, #124]	@ (80009e8 <MX_FREERTOS_Init+0x84>)
 800096a:	f006 fd71 	bl	8007450 <osMutexNew>
 800096e:	4603      	mov	r3, r0
 8000970:	4a1e      	ldr	r2, [pc, #120]	@ (80009ec <MX_FREERTOS_Init+0x88>)
 8000972:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LCD_Queue */
  LCD_QueueHandle = osMessageQueueNew (8, sizeof(uint32_t), &LCD_Queue_attributes);
 8000974:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <MX_FREERTOS_Init+0x8c>)
 8000976:	2104      	movs	r1, #4
 8000978:	2008      	movs	r0, #8
 800097a:	f006 fe77 	bl	800766c <osMessageQueueNew>
 800097e:	4603      	mov	r3, r0
 8000980:	4a1c      	ldr	r2, [pc, #112]	@ (80009f4 <MX_FREERTOS_Init+0x90>)
 8000982:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TimeTask */
  TimeTaskHandle = osThreadNew(StartTimeTask, NULL, &TimeTask_attributes);
 8000984:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_FREERTOS_Init+0x94>)
 8000986:	2100      	movs	r1, #0
 8000988:	481c      	ldr	r0, [pc, #112]	@ (80009fc <MX_FREERTOS_Init+0x98>)
 800098a:	f006 fcb4 	bl	80072f6 <osThreadNew>
 800098e:	4603      	mov	r3, r0
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_FREERTOS_Init+0x9c>)
 8000992:	6013      	str	r3, [r2, #0]

  /* creation of AlarmTask */
  AlarmTaskHandle = osThreadNew(StartAlarmTask, NULL, &AlarmTask_attributes);
 8000994:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <MX_FREERTOS_Init+0xa0>)
 8000996:	2100      	movs	r1, #0
 8000998:	481b      	ldr	r0, [pc, #108]	@ (8000a08 <MX_FREERTOS_Init+0xa4>)
 800099a:	f006 fcac 	bl	80072f6 <osThreadNew>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <MX_FREERTOS_Init+0xa8>)
 80009a2:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 80009a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a10 <MX_FREERTOS_Init+0xac>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	481a      	ldr	r0, [pc, #104]	@ (8000a14 <MX_FREERTOS_Init+0xb0>)
 80009aa:	f006 fca4 	bl	80072f6 <osThreadNew>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <MX_FREERTOS_Init+0xb4>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* creation of UIStateTask */
  UIStateTaskHandle = osThreadNew(StartUIStateTask, NULL, &UIStateTask_attributes);
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <MX_FREERTOS_Init+0xb8>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <MX_FREERTOS_Init+0xbc>)
 80009ba:	f006 fc9c 	bl	80072f6 <osThreadNew>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <MX_FREERTOS_Init+0xc0>)
 80009c2:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <MX_FREERTOS_Init+0xc4>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <MX_FREERTOS_Init+0xc8>)
 80009ca:	f006 fc94 	bl	80072f6 <osThreadNew>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_FREERTOS_Init+0xcc>)
 80009d2:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(StartNTPTask, NULL, &NTPTask_attributes);
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <MX_FREERTOS_Init+0xd0>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <MX_FREERTOS_Init+0xd4>)
 80009da:	f006 fc8c 	bl	80072f6 <osThreadNew>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <MX_FREERTOS_Init+0xd8>)
 80009e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800bcd0 	.word	0x0800bcd0
 80009ec:	200000e0 	.word	0x200000e0
 80009f0:	0800bcb8 	.word	0x0800bcb8
 80009f4:	200000dc 	.word	0x200000dc
 80009f8:	0800bbe0 	.word	0x0800bbe0
 80009fc:	08000a41 	.word	0x08000a41
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	0800bc04 	.word	0x0800bc04
 8000a08:	08000b45 	.word	0x08000b45
 8000a0c:	200000c8 	.word	0x200000c8
 8000a10:	0800bc28 	.word	0x0800bc28
 8000a14:	08000c45 	.word	0x08000c45
 8000a18:	200000cc 	.word	0x200000cc
 8000a1c:	0800bc4c 	.word	0x0800bc4c
 8000a20:	08001559 	.word	0x08001559
 8000a24:	200000d0 	.word	0x200000d0
 8000a28:	0800bc70 	.word	0x0800bc70
 8000a2c:	08001941 	.word	0x08001941
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	0800bc94 	.word	0x0800bc94
 8000a38:	080019a9 	.word	0x080019a9
 8000a3c:	200000d8 	.word	0x200000d8

08000a40 <StartTimeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void *argument)
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b098      	sub	sp, #96	@ 0x60
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
	//LCD_Init(&hi2c1);
	RTC_TimeTypeDef prev_time = {0}, curr_time;
 8000a48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef curr_date;
	char buf[32];

	uint32_t last_backup_tick = 0;  // 🔹 백업 간격 측정용
 8000a58:	2300      	movs	r3, #0
 8000a5a:	657b      	str	r3, [r7, #84]	@ 0x54

	for (;;) {
	    HAL_RTC_GetTime(&hrtc, &curr_time, RTC_FORMAT_BIN);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <StartTimeTask+0xf4>)
 8000a66:	f004 fcbc 	bl	80053e2 <HAL_RTC_GetTime>
	    HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN); // 중요!
 8000a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	4830      	ldr	r0, [pc, #192]	@ (8000b34 <StartTimeTask+0xf4>)
 8000a74:	f004 fd97 	bl	80055a6 <HAL_RTC_GetDate>

	    if (curr_time.Seconds != prev_time.Seconds) {
 8000a78:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000a7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d052      	beq.n	8000b2a <StartTimeTask+0xea>
	        prev_time = curr_time;
 8000a84:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000a88:	f107 052c 	add.w	r5, r7, #44	@ 0x2c
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	6023      	str	r3, [r4, #0]

	        snprintf(buf, sizeof(buf), "Time: %02d:%02d:%02d  ",
	                 curr_time.Hours, curr_time.Minutes, curr_time.Seconds);
 8000a94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
	        snprintf(buf, sizeof(buf), "Time: %02d:%02d:%02d  ",
 8000a98:	4619      	mov	r1, r3
	                 curr_time.Hours, curr_time.Minutes, curr_time.Seconds);
 8000a9a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000a9e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
	        snprintf(buf, sizeof(buf), "Time: %02d:%02d:%02d  ",
 8000aa2:	f107 0008 	add.w	r0, r7, #8
 8000aa6:	9201      	str	r2, [sp, #4]
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	4a22      	ldr	r2, [pc, #136]	@ (8000b38 <StartTimeTask+0xf8>)
 8000aae:	2120      	movs	r1, #32
 8000ab0:	f009 ff22 	bl	800a8f8 <sniprintf>
	        osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <StartTimeTask+0xfc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	4618      	mov	r0, r3
 8000abe:	f006 fd4d 	bl	800755c <osMutexAcquire>
	        LCD_SetCursor(0, 0);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f001 f95c 	bl	8001d82 <LCD_SetCursor>
	        LCD_Print(buf);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f972 	bl	8001db8 <LCD_Print>
	        osMutexRelease(LCDMutexHandle);
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <StartTimeTask+0xfc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f006 fd8a 	bl	80075f2 <osMutexRelease>

	        // 3초 마다 DS1302에 시간 백업, 1초마다로 하면 너무 자주 ds1302를 호출해서 시간 저장/읽기 기능오작동 할수있음
			if (((osKernelGetTickCount() - last_backup_tick) >= 3000) && (!isWiFiready)) {
 8000ade:	f006 fb8f 	bl	8007200 <osKernelGetTickCount>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d91c      	bls.n	8000b2a <StartTimeTask+0xea>
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <StartTimeTask+0x100>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d118      	bne.n	8000b2a <StartTimeTask+0xea>
				HAL_RTC_GetTime(&hrtc, &curr_time, RTC_FORMAT_BIN);
 8000af8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <StartTimeTask+0xf4>)
 8000b02:	f004 fc6e 	bl	80053e2 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN);
 8000b06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4809      	ldr	r0, [pc, #36]	@ (8000b34 <StartTimeTask+0xf4>)
 8000b10:	f004 fd49 	bl	80055a6 <HAL_RTC_GetDate>
				DS1302_SetTime(&curr_time, &curr_date);
 8000b14:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe74 	bl	800080c <DS1302_SetTime>
				last_backup_tick = osKernelGetTickCount();
 8000b24:	f006 fb6c 	bl	8007200 <osKernelGetTickCount>
 8000b28:	6578      	str	r0, [r7, #84]	@ 0x54
			}
	}
	    osDelay(10);  // 부하 적고, 밀림도 없음
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f006 fc75 	bl	800741a <osDelay>
	    HAL_RTC_GetTime(&hrtc, &curr_time, RTC_FORMAT_BIN);
 8000b30:	e794      	b.n	8000a5c <StartTimeTask+0x1c>
 8000b32:	bf00      	nop
 8000b34:	2000067c 	.word	0x2000067c
 8000b38:	0800b3f8 	.word	0x0800b3f8
 8000b3c:	200000e0 	.word	0x200000e0
 8000b40:	2000015d 	.word	0x2000015d

08000b44 <StartAlarmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmTask */
void StartAlarmTask(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlarmTask */
	RTC_TimeTypeDef sTime;

	for (;;) {
		if (alarm_is_set && !alarm_triggered) { // 이전에 !alarm_setting_mode였음
 8000b4c:	4b33      	ldr	r3, [pc, #204]	@ (8000c1c <StartAlarmTask+0xd8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d05d      	beq.n	8000c10 <StartAlarmTask+0xcc>
 8000b54:	4b32      	ldr	r3, [pc, #200]	@ (8000c20 <StartAlarmTask+0xdc>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d159      	bne.n	8000c10 <StartAlarmTask+0xcc>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	482f      	ldr	r0, [pc, #188]	@ (8000c24 <StartAlarmTask+0xe0>)
 8000b66:	f004 fc3c 	bl	80053e2 <HAL_RTC_GetTime>
			if (sTime.Hours == alarm_hour &&
 8000b6a:	7a3a      	ldrb	r2, [r7, #8]
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <StartAlarmTask+0xe4>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d14d      	bne.n	8000c10 <StartAlarmTask+0xcc>
				sTime.Minutes == alarm_min &&
 8000b74:	7a7a      	ldrb	r2, [r7, #9]
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <StartAlarmTask+0xe8>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
			if (sTime.Hours == alarm_hour &&
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d148      	bne.n	8000c10 <StartAlarmTask+0xcc>
		        sTime.Seconds >= alarm_sec &&
 8000b7e:	7aba      	ldrb	r2, [r7, #10]
 8000b80:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <StartAlarmTask+0xec>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
				sTime.Minutes == alarm_min &&
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d343      	bcc.n	8000c10 <StartAlarmTask+0xcc>
		        sTime.Seconds < alarm_sec + 2) {
 8000b88:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <StartAlarmTask+0xec>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	7aba      	ldrb	r2, [r7, #10]
		        sTime.Seconds >= alarm_sec &&
 8000b90:	4293      	cmp	r3, r2
 8000b92:	db3d      	blt.n	8000c10 <StartAlarmTask+0xcc>

				alarm_triggered = 1;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <StartAlarmTask+0xdc>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
				alarm_is_set = false;  // 알람 울렸으니 설정 해제
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <StartAlarmTask+0xd8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
				alarm_hour = alarm_min = alarm_sec = 255;  // 🔹 추가로 추천
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <StartAlarmTask+0xec>)
 8000ba2:	22ff      	movs	r2, #255	@ 0xff
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <StartAlarmTask+0xec>)
 8000ba8:	781a      	ldrb	r2, [r3, #0]
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <StartAlarmTask+0xe8>)
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <StartAlarmTask+0xe8>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <StartAlarmTask+0xe4>)
 8000bb4:	701a      	strb	r2, [r3, #0]

				for (int i = 0; i < 1; ++i) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e01e      	b.n	8000bfa <StartAlarmTask+0xb6>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // 부저 ON
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc2:	481c      	ldr	r0, [pc, #112]	@ (8000c34 <StartAlarmTask+0xf0>)
 8000bc4:	f003 f89a 	bl	8003cfc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // LED ON
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	481a      	ldr	r0, [pc, #104]	@ (8000c38 <StartAlarmTask+0xf4>)
 8000bce:	f003 f895 	bl	8003cfc <HAL_GPIO_WritePin>
					osDelay(250);
 8000bd2:	20fa      	movs	r0, #250	@ 0xfa
 8000bd4:	f006 fc21 	bl	800741a <osDelay>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // 부저 OFF
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bde:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <StartAlarmTask+0xf0>)
 8000be0:	f003 f88c 	bl	8003cfc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // LED OFF
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <StartAlarmTask+0xf4>)
 8000bea:	f003 f887 	bl	8003cfc <HAL_GPIO_WritePin>
					osDelay(250);
 8000bee:	20fa      	movs	r0, #250	@ 0xfa
 8000bf0:	f006 fc13 	bl	800741a <osDelay>
				for (int i = 0; i < 1; ++i) {
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dddd      	ble.n	8000bbc <StartAlarmTask+0x78>
				}

			    // 🟢 LCD에 알람 메시지 띄우기 요청
			    alarm_triggered_flag = 1;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <StartAlarmTask+0xf8>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
			    alarm_triggered_tick = osKernelGetTickCount();
 8000c06:	f006 fafb 	bl	8007200 <osKernelGetTickCount>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <StartAlarmTask+0xfc>)
 8000c0e:	6013      	str	r3, [r2, #0]
			}
		}
		osDelay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c14:	f006 fc01 	bl	800741a <osDelay>
		if (alarm_is_set && !alarm_triggered) { // 이전에 !alarm_setting_mode였음
 8000c18:	e798      	b.n	8000b4c <StartAlarmTask+0x8>
 8000c1a:	bf00      	nop
 8000c1c:	200000c1 	.word	0x200000c1
 8000c20:	200000c0 	.word	0x200000c0
 8000c24:	2000067c 	.word	0x2000067c
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000001 	.word	0x20000001
 8000c30:	20000002 	.word	0x20000002
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	20000098 	.word	0x20000098
 8000c40:	2000009c 	.word	0x2000009c

08000c44 <StartIRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0a2      	sub	sp, #136	@ 0x88
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIRTask */
	for (;;) {
		if (ir_key_ready) {
 8000c4c:	4bab      	ldr	r3, [pc, #684]	@ (8000efc <StartIRTask+0x2b8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8444 	beq.w	80014e0 <StartIRTask+0x89c>
		  uint8_t cmd = (ir_data >> 16) & 0xFF;
 8000c58:	4ba9      	ldr	r3, [pc, #676]	@ (8000f00 <StartIRTask+0x2bc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		  ir_key_ready = 0;
 8000c62:	4ba6      	ldr	r3, [pc, #664]	@ (8000efc <StartIRTask+0x2b8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]

		  if (cmd == 0x44) { // << 버튼: 시간 설정 진입 또는 완료
 8000c68:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000c6c:	2b44      	cmp	r3, #68	@ 0x44
 8000c6e:	f040 80a6 	bne.w	8000dbe <StartIRTask+0x17a>
			if (current_mode == MODE_IDLE) {
 8000c72:	4ba4      	ldr	r3, [pc, #656]	@ (8000f04 <StartIRTask+0x2c0>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d13d      	bne.n	8000cf6 <StartIRTask+0xb2>
			  current_mode = MODE_SET_TIME;
 8000c7a:	4ba2      	ldr	r3, [pc, #648]	@ (8000f04 <StartIRTask+0x2c0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
			  selected_time_field = TIME_FIELD_HOUR;
 8000c80:	4ba1      	ldr	r3, [pc, #644]	@ (8000f08 <StartIRTask+0x2c4>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]

			  setup_hour_digits[0] = setup_hour_digits[1] = 0;
 8000c86:	4ba1      	ldr	r3, [pc, #644]	@ (8000f0c <StartIRTask+0x2c8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	705a      	strb	r2, [r3, #1]
 8000c8c:	4b9f      	ldr	r3, [pc, #636]	@ (8000f0c <StartIRTask+0x2c8>)
 8000c8e:	785a      	ldrb	r2, [r3, #1]
 8000c90:	4b9e      	ldr	r3, [pc, #632]	@ (8000f0c <StartIRTask+0x2c8>)
 8000c92:	701a      	strb	r2, [r3, #0]
			  setup_min_digits[0] = setup_min_digits[1] = 0;
 8000c94:	4b9e      	ldr	r3, [pc, #632]	@ (8000f10 <StartIRTask+0x2cc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	705a      	strb	r2, [r3, #1]
 8000c9a:	4b9d      	ldr	r3, [pc, #628]	@ (8000f10 <StartIRTask+0x2cc>)
 8000c9c:	785a      	ldrb	r2, [r3, #1]
 8000c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8000f10 <StartIRTask+0x2cc>)
 8000ca0:	701a      	strb	r2, [r3, #0]
			  setup_sec_digits[0] = setup_sec_digits[1] = 0;
 8000ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8000f14 <StartIRTask+0x2d0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	705a      	strb	r2, [r3, #1]
 8000ca8:	4b9a      	ldr	r3, [pc, #616]	@ (8000f14 <StartIRTask+0x2d0>)
 8000caa:	785a      	ldrb	r2, [r3, #1]
 8000cac:	4b99      	ldr	r3, [pc, #612]	@ (8000f14 <StartIRTask+0x2d0>)
 8000cae:	701a      	strb	r2, [r3, #0]
			  setup_hour_input_idx = setup_min_input_idx = setup_sec_input_idx = 0;
 8000cb0:	4b99      	ldr	r3, [pc, #612]	@ (8000f18 <StartIRTask+0x2d4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	4b98      	ldr	r3, [pc, #608]	@ (8000f18 <StartIRTask+0x2d4>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b98      	ldr	r3, [pc, #608]	@ (8000f1c <StartIRTask+0x2d8>)
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	4b97      	ldr	r3, [pc, #604]	@ (8000f1c <StartIRTask+0x2d8>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b97      	ldr	r3, [pc, #604]	@ (8000f20 <StartIRTask+0x2dc>)
 8000cc4:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000cc6:	4b97      	ldr	r3, [pc, #604]	@ (8000f24 <StartIRTask+0x2e0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f04f 31ff 	mov.w	r1, #4294967295
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 fc44 	bl	800755c <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f001 f853 	bl	8001d82 <LCD_SetCursor>
			  LCD_Print("Set Time Mode     ");
 8000cdc:	4892      	ldr	r0, [pc, #584]	@ (8000f28 <StartIRTask+0x2e4>)
 8000cde:	f001 f86b 	bl	8001db8 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000ce2:	4b90      	ldr	r3, [pc, #576]	@ (8000f24 <StartIRTask+0x2e0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 fc83 	bl	80075f2 <osMutexRelease>
			  osDelay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf0:	f006 fb93 	bl	800741a <osDelay>
 8000cf4:	e3f2      	b.n	80014dc <StartIRTask+0x898>
			}
			else if (current_mode == MODE_SET_TIME) {
 8000cf6:	4b83      	ldr	r3, [pc, #524]	@ (8000f04 <StartIRTask+0x2c0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	f040 83ee 	bne.w	80014dc <StartIRTask+0x898>
			  RTC_DateTypeDef date;
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000d00:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d04:	2200      	movs	r2, #0
 8000d06:	4619      	mov	r1, r3
 8000d08:	4888      	ldr	r0, [pc, #544]	@ (8000f2c <StartIRTask+0x2e8>)
 8000d0a:	f004 fc4c 	bl	80055a6 <HAL_RTC_GetDate>

			  setup_time.Hours = setup_hour_digits[0] * 10 + setup_hour_digits[1];
 8000d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f0c <StartIRTask+0x2c8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f0c <StartIRTask+0x2c8>)
 8000d1e:	785b      	ldrb	r3, [r3, #1]
 8000d20:	4413      	add	r3, r2
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b82      	ldr	r3, [pc, #520]	@ (8000f30 <StartIRTask+0x2ec>)
 8000d26:	701a      	strb	r2, [r3, #0]
			  setup_time.Minutes = setup_min_digits[0] * 10 + setup_min_digits[1];
 8000d28:	4b79      	ldr	r3, [pc, #484]	@ (8000f10 <StartIRTask+0x2cc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b76      	ldr	r3, [pc, #472]	@ (8000f10 <StartIRTask+0x2cc>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f30 <StartIRTask+0x2ec>)
 8000d40:	705a      	strb	r2, [r3, #1]
			  setup_time.Seconds = setup_sec_digits[0] * 10 + setup_sec_digits[1];
 8000d42:	4b74      	ldr	r3, [pc, #464]	@ (8000f14 <StartIRTask+0x2d0>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b70      	ldr	r3, [pc, #448]	@ (8000f14 <StartIRTask+0x2d0>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	4413      	add	r3, r2
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b75      	ldr	r3, [pc, #468]	@ (8000f30 <StartIRTask+0x2ec>)
 8000d5a:	709a      	strb	r2, [r3, #2]

			  HAL_RTC_SetTime(&hrtc, &setup_time, RTC_FORMAT_BIN);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4974      	ldr	r1, [pc, #464]	@ (8000f30 <StartIRTask+0x2ec>)
 8000d60:	4872      	ldr	r0, [pc, #456]	@ (8000f2c <StartIRTask+0x2e8>)
 8000d62:	f004 faa4 	bl	80052ae <HAL_RTC_SetTime>
			  DS1302_SetTime(&setup_time, &date);
 8000d66:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4870      	ldr	r0, [pc, #448]	@ (8000f30 <StartIRTask+0x2ec>)
 8000d6e:	f7ff fd4d 	bl	800080c <DS1302_SetTime>

			  current_mode = MODE_IDLE;
 8000d72:	4b64      	ldr	r3, [pc, #400]	@ (8000f04 <StartIRTask+0x2c0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
			  selected_time_field = TIME_FIELD_NONE;
 8000d78:	4b63      	ldr	r3, [pc, #396]	@ (8000f08 <StartIRTask+0x2c4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000d7e:	4b69      	ldr	r3, [pc, #420]	@ (8000f24 <StartIRTask+0x2e0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f04f 31ff 	mov.w	r1, #4294967295
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 fbe8 	bl	800755c <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fff7 	bl	8001d82 <LCD_SetCursor>
			  LCD_Print("Time Set Done     ");
 8000d94:	4867      	ldr	r0, [pc, #412]	@ (8000f34 <StartIRTask+0x2f0>)
 8000d96:	f001 f80f 	bl	8001db8 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000d9a:	4b62      	ldr	r3, [pc, #392]	@ (8000f24 <StartIRTask+0x2e0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fc27 	bl	80075f2 <osMutexRelease>

			  time_set_done_flag = 1;
 8000da4:	4b64      	ldr	r3, [pc, #400]	@ (8000f38 <StartIRTask+0x2f4>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
			  time_set_done_tick = osKernelGetTickCount();
 8000daa:	f006 fa29 	bl	8007200 <osKernelGetTickCount>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a62      	ldr	r2, [pc, #392]	@ (8000f3c <StartIRTask+0x2f8>)
 8000db2:	6013      	str	r3, [r2, #0]
			  osDelay(1000);
 8000db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db8:	f006 fb2f 	bl	800741a <osDelay>
 8000dbc:	e38e      	b.n	80014dc <StartIRTask+0x898>
			}
		  }

		  else if (cmd == 0x43) { // Play 버튼: 알람 설정 진입 또는 완료
 8000dbe:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000dc2:	2b43      	cmp	r3, #67	@ 0x43
 8000dc4:	f040 80d6 	bne.w	8000f74 <StartIRTask+0x330>
			if (current_mode == MODE_IDLE) {
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <StartIRTask+0x2c0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d13d      	bne.n	8000e4c <StartIRTask+0x208>
			  current_mode = MODE_SET_ALARM;
 8000dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000f04 <StartIRTask+0x2c0>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]
			  selected_alarm_field = ALARM_FIELD_HOUR;
 8000dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f40 <StartIRTask+0x2fc>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]

			  alarm_hour_input_idx = alarm_min_input_idx = alarm_sec_input_idx = 0;
 8000ddc:	4b59      	ldr	r3, [pc, #356]	@ (8000f44 <StartIRTask+0x300>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	4b58      	ldr	r3, [pc, #352]	@ (8000f44 <StartIRTask+0x300>)
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	4b58      	ldr	r3, [pc, #352]	@ (8000f48 <StartIRTask+0x304>)
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	4b57      	ldr	r3, [pc, #348]	@ (8000f48 <StartIRTask+0x304>)
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	4b57      	ldr	r3, [pc, #348]	@ (8000f4c <StartIRTask+0x308>)
 8000df0:	701a      	strb	r2, [r3, #0]
			  alarm_hour_digits[0] = alarm_hour_digits[1] = 0;
 8000df2:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <StartIRTask+0x30c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	705a      	strb	r2, [r3, #1]
 8000df8:	4b55      	ldr	r3, [pc, #340]	@ (8000f50 <StartIRTask+0x30c>)
 8000dfa:	785a      	ldrb	r2, [r3, #1]
 8000dfc:	4b54      	ldr	r3, [pc, #336]	@ (8000f50 <StartIRTask+0x30c>)
 8000dfe:	701a      	strb	r2, [r3, #0]
			  alarm_min_digits[0] = alarm_min_digits[1] = 0;
 8000e00:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <StartIRTask+0x310>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	705a      	strb	r2, [r3, #1]
 8000e06:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <StartIRTask+0x310>)
 8000e08:	785a      	ldrb	r2, [r3, #1]
 8000e0a:	4b52      	ldr	r3, [pc, #328]	@ (8000f54 <StartIRTask+0x310>)
 8000e0c:	701a      	strb	r2, [r3, #0]
			  alarm_sec_digits[0] = alarm_sec_digits[1] = 0;
 8000e0e:	4b52      	ldr	r3, [pc, #328]	@ (8000f58 <StartIRTask+0x314>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	705a      	strb	r2, [r3, #1]
 8000e14:	4b50      	ldr	r3, [pc, #320]	@ (8000f58 <StartIRTask+0x314>)
 8000e16:	785a      	ldrb	r2, [r3, #1]
 8000e18:	4b4f      	ldr	r3, [pc, #316]	@ (8000f58 <StartIRTask+0x314>)
 8000e1a:	701a      	strb	r2, [r3, #0]

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000e1c:	4b41      	ldr	r3, [pc, #260]	@ (8000f24 <StartIRTask+0x2e0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f006 fb99 	bl	800755c <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 ffa8 	bl	8001d82 <LCD_SetCursor>
			  LCD_Print("Setup Alarm...");
 8000e32:	484a      	ldr	r0, [pc, #296]	@ (8000f5c <StartIRTask+0x318>)
 8000e34:	f000 ffc0 	bl	8001db8 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000e38:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <StartIRTask+0x2e0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fbd8 	bl	80075f2 <osMutexRelease>
			  osDelay(1000);
 8000e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e46:	f006 fae8 	bl	800741a <osDelay>
 8000e4a:	e347      	b.n	80014dc <StartIRTask+0x898>
			}
			else if (current_mode == MODE_SET_ALARM) {
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <StartIRTask+0x2c0>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	f040 8343 	bne.w	80014dc <StartIRTask+0x898>
			  alarm_hour = alarm_hour_digits[0] * 10 + alarm_hour_digits[1];
 8000e56:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <StartIRTask+0x30c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b3a      	ldr	r3, [pc, #232]	@ (8000f50 <StartIRTask+0x30c>)
 8000e66:	785b      	ldrb	r3, [r3, #1]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <StartIRTask+0x31c>)
 8000e6e:	701a      	strb	r2, [r3, #0]
			  alarm_min = alarm_min_digits[0] * 10 + alarm_min_digits[1];
 8000e70:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <StartIRTask+0x310>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b35      	ldr	r3, [pc, #212]	@ (8000f54 <StartIRTask+0x310>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	4413      	add	r3, r2
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <StartIRTask+0x320>)
 8000e88:	701a      	strb	r2, [r3, #0]
			  alarm_sec = alarm_sec_digits[0] * 10 + alarm_sec_digits[1];
 8000e8a:	4b33      	ldr	r3, [pc, #204]	@ (8000f58 <StartIRTask+0x314>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	0092      	lsls	r2, r2, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <StartIRTask+0x314>)
 8000e9a:	785b      	ldrb	r3, [r3, #1]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <StartIRTask+0x324>)
 8000ea2:	701a      	strb	r2, [r3, #0]
			  current_mode = MODE_IDLE;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <StartIRTask+0x2c0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			  alarm_is_set = true;
 8000eaa:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <StartIRTask+0x328>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]

			  char msg[25];
			  sprintf(msg, "Alarm: %02d:%02d:%02d  ", alarm_hour, alarm_min, alarm_sec);
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <StartIRTask+0x31c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <StartIRTask+0x320>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <StartIRTask+0x324>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4929      	ldr	r1, [pc, #164]	@ (8000f70 <StartIRTask+0x32c>)
 8000eca:	f009 fd4b 	bl	800a964 <siprintf>
			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <StartIRTask+0x2e0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 fb40 	bl	800755c <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 8000edc:	2100      	movs	r1, #0
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 ff4f 	bl	8001d82 <LCD_SetCursor>
			  LCD_Print(msg);
 8000ee4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 ff65 	bl	8001db8 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <StartIRTask+0x2e0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f006 fb7d 	bl	80075f2 <osMutexRelease>
 8000ef8:	e2f0      	b.n	80014dc <StartIRTask+0x898>
 8000efa:	bf00      	nop
 8000efc:	2000013d 	.word	0x2000013d
 8000f00:	20000138 	.word	0x20000138
 8000f04:	20000094 	.word	0x20000094
 8000f08:	20000095 	.word	0x20000095
 8000f0c:	20000150 	.word	0x20000150
 8000f10:	20000154 	.word	0x20000154
 8000f14:	20000158 	.word	0x20000158
 8000f18:	2000015c 	.word	0x2000015c
 8000f1c:	2000015b 	.word	0x2000015b
 8000f20:	2000015a 	.word	0x2000015a
 8000f24:	200000e0 	.word	0x200000e0
 8000f28:	0800b410 	.word	0x0800b410
 8000f2c:	2000067c 	.word	0x2000067c
 8000f30:	20000080 	.word	0x20000080
 8000f34:	0800b424 	.word	0x0800b424
 8000f38:	200000a0 	.word	0x200000a0
 8000f3c:	200000a4 	.word	0x200000a4
 8000f40:	20000096 	.word	0x20000096
 8000f44:	20000141 	.word	0x20000141
 8000f48:	20000140 	.word	0x20000140
 8000f4c:	2000013f 	.word	0x2000013f
 8000f50:	20000144 	.word	0x20000144
 8000f54:	20000148 	.word	0x20000148
 8000f58:	2000014c 	.word	0x2000014c
 8000f5c:	0800b438 	.word	0x0800b438
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000001 	.word	0x20000001
 8000f68:	20000002 	.word	0x20000002
 8000f6c:	200000c1 	.word	0x200000c1
 8000f70:	0800b448 	.word	0x0800b448
			}
		  }

		  // 시/분/초 필드 선택
		  else if (cmd == 0x45) { // CH-
 8000f74:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000f78:	2b45      	cmp	r3, #69	@ 0x45
 8000f7a:	d110      	bne.n	8000f9e <StartIRTask+0x35a>
			if (current_mode == MODE_SET_TIME) selected_time_field = TIME_FIELD_HOUR;
 8000f7c:	4bac      	ldr	r3, [pc, #688]	@ (8001230 <StartIRTask+0x5ec>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d103      	bne.n	8000f8c <StartIRTask+0x348>
 8000f84:	4bab      	ldr	r3, [pc, #684]	@ (8001234 <StartIRTask+0x5f0>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e2a7      	b.n	80014dc <StartIRTask+0x898>
			else if (current_mode == MODE_SET_ALARM) selected_alarm_field = ALARM_FIELD_HOUR;
 8000f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8001230 <StartIRTask+0x5ec>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	f040 82a3 	bne.w	80014dc <StartIRTask+0x898>
 8000f96:	4ba8      	ldr	r3, [pc, #672]	@ (8001238 <StartIRTask+0x5f4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e29e      	b.n	80014dc <StartIRTask+0x898>
		  }
		  else if (cmd == 0x46) { // CH
 8000f9e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000fa2:	2b46      	cmp	r3, #70	@ 0x46
 8000fa4:	d110      	bne.n	8000fc8 <StartIRTask+0x384>
			if (current_mode == MODE_SET_TIME) selected_time_field = TIME_FIELD_MINUTE;
 8000fa6:	4ba2      	ldr	r3, [pc, #648]	@ (8001230 <StartIRTask+0x5ec>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d103      	bne.n	8000fb6 <StartIRTask+0x372>
 8000fae:	4ba1      	ldr	r3, [pc, #644]	@ (8001234 <StartIRTask+0x5f0>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e292      	b.n	80014dc <StartIRTask+0x898>
			else if (current_mode == MODE_SET_ALARM) selected_alarm_field = ALARM_FIELD_MINUTE;
 8000fb6:	4b9e      	ldr	r3, [pc, #632]	@ (8001230 <StartIRTask+0x5ec>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	f040 828e 	bne.w	80014dc <StartIRTask+0x898>
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8001238 <StartIRTask+0x5f4>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	e289      	b.n	80014dc <StartIRTask+0x898>
		  }
		  else if (cmd == 0x47) { // CH+
 8000fc8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000fcc:	2b47      	cmp	r3, #71	@ 0x47
 8000fce:	d110      	bne.n	8000ff2 <StartIRTask+0x3ae>
			if (current_mode == MODE_SET_TIME) selected_time_field = TIME_FIELD_SECOND;
 8000fd0:	4b97      	ldr	r3, [pc, #604]	@ (8001230 <StartIRTask+0x5ec>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d103      	bne.n	8000fe0 <StartIRTask+0x39c>
 8000fd8:	4b96      	ldr	r3, [pc, #600]	@ (8001234 <StartIRTask+0x5f0>)
 8000fda:	2203      	movs	r2, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e27d      	b.n	80014dc <StartIRTask+0x898>
			else if (current_mode == MODE_SET_ALARM) selected_alarm_field = ALARM_FIELD_SECOND;
 8000fe0:	4b93      	ldr	r3, [pc, #588]	@ (8001230 <StartIRTask+0x5ec>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 8279 	bne.w	80014dc <StartIRTask+0x898>
 8000fea:	4b93      	ldr	r3, [pc, #588]	@ (8001238 <StartIRTask+0x5f4>)
 8000fec:	2203      	movs	r2, #3
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	e274      	b.n	80014dc <StartIRTask+0x898>
		  }

		  // 숫자 입력 (공통)
		  else if (cmd == 0x16 || cmd == 0x0C || cmd == 0x18 || cmd == 0x5E ||
 8000ff2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000ff6:	2b16      	cmp	r3, #22
 8000ff8:	d024      	beq.n	8001044 <StartIRTask+0x400>
 8000ffa:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d020      	beq.n	8001044 <StartIRTask+0x400>
 8001002:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001006:	2b18      	cmp	r3, #24
 8001008:	d01c      	beq.n	8001044 <StartIRTask+0x400>
 800100a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800100e:	2b5e      	cmp	r3, #94	@ 0x5e
 8001010:	d018      	beq.n	8001044 <StartIRTask+0x400>
 8001012:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001016:	2b08      	cmp	r3, #8
 8001018:	d014      	beq.n	8001044 <StartIRTask+0x400>
				   cmd == 0x08 || cmd == 0x1C || cmd == 0x5A || cmd == 0x42 ||
 800101a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800101e:	2b1c      	cmp	r3, #28
 8001020:	d010      	beq.n	8001044 <StartIRTask+0x400>
 8001022:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001026:	2b5a      	cmp	r3, #90	@ 0x5a
 8001028:	d00c      	beq.n	8001044 <StartIRTask+0x400>
 800102a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800102e:	2b42      	cmp	r3, #66	@ 0x42
 8001030:	d008      	beq.n	8001044 <StartIRTask+0x400>
 8001032:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001036:	2b52      	cmp	r3, #82	@ 0x52
 8001038:	d004      	beq.n	8001044 <StartIRTask+0x400>
				   cmd == 0x52 || cmd == 0x4A) {
 800103a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800103e:	2b4a      	cmp	r3, #74	@ 0x4a
 8001040:	f040 815a 	bne.w	80012f8 <StartIRTask+0x6b4>
			uint8_t num = 0xFF;
 8001044:	23ff      	movs	r3, #255	@ 0xff
 8001046:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			switch (cmd) {
 800104a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800104e:	2b1c      	cmp	r3, #28
 8001050:	dc74      	bgt.n	800113c <StartIRTask+0x4f8>
 8001052:	2b08      	cmp	r3, #8
 8001054:	da42      	bge.n	80010dc <StartIRTask+0x498>
 8001056:	e09e      	b.n	8001196 <StartIRTask+0x552>
 8001058:	3b42      	subs	r3, #66	@ 0x42
 800105a:	2b1c      	cmp	r3, #28
 800105c:	f200 809b 	bhi.w	8001196 <StartIRTask+0x552>
 8001060:	a201      	add	r2, pc, #4	@ (adr r2, 8001068 <StartIRTask+0x424>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	0800117f 	.word	0x0800117f
 800106c:	08001197 	.word	0x08001197
 8001070:	08001197 	.word	0x08001197
 8001074:	08001197 	.word	0x08001197
 8001078:	08001197 	.word	0x08001197
 800107c:	08001197 	.word	0x08001197
 8001080:	08001197 	.word	0x08001197
 8001084:	08001197 	.word	0x08001197
 8001088:	0800118f 	.word	0x0800118f
 800108c:	08001197 	.word	0x08001197
 8001090:	08001197 	.word	0x08001197
 8001094:	08001197 	.word	0x08001197
 8001098:	08001197 	.word	0x08001197
 800109c:	08001197 	.word	0x08001197
 80010a0:	08001197 	.word	0x08001197
 80010a4:	08001197 	.word	0x08001197
 80010a8:	08001187 	.word	0x08001187
 80010ac:	08001197 	.word	0x08001197
 80010b0:	08001197 	.word	0x08001197
 80010b4:	08001197 	.word	0x08001197
 80010b8:	08001197 	.word	0x08001197
 80010bc:	08001197 	.word	0x08001197
 80010c0:	08001197 	.word	0x08001197
 80010c4:	08001197 	.word	0x08001197
 80010c8:	08001177 	.word	0x08001177
 80010cc:	08001197 	.word	0x08001197
 80010d0:	08001197 	.word	0x08001197
 80010d4:	08001197 	.word	0x08001197
 80010d8:	0800115f 	.word	0x0800115f
 80010dc:	3b08      	subs	r3, #8
 80010de:	2b14      	cmp	r3, #20
 80010e0:	d859      	bhi.n	8001196 <StartIRTask+0x552>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <StartIRTask+0x4a4>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001167 	.word	0x08001167
 80010ec:	08001197 	.word	0x08001197
 80010f0:	08001197 	.word	0x08001197
 80010f4:	08001197 	.word	0x08001197
 80010f8:	0800114f 	.word	0x0800114f
 80010fc:	08001197 	.word	0x08001197
 8001100:	08001197 	.word	0x08001197
 8001104:	08001197 	.word	0x08001197
 8001108:	08001197 	.word	0x08001197
 800110c:	08001197 	.word	0x08001197
 8001110:	08001197 	.word	0x08001197
 8001114:	08001197 	.word	0x08001197
 8001118:	08001197 	.word	0x08001197
 800111c:	08001197 	.word	0x08001197
 8001120:	08001147 	.word	0x08001147
 8001124:	08001197 	.word	0x08001197
 8001128:	08001157 	.word	0x08001157
 800112c:	08001197 	.word	0x08001197
 8001130:	08001197 	.word	0x08001197
 8001134:	08001197 	.word	0x08001197
 8001138:	0800116f 	.word	0x0800116f
 800113c:	2b5e      	cmp	r3, #94	@ 0x5e
 800113e:	dc2a      	bgt.n	8001196 <StartIRTask+0x552>
 8001140:	2b42      	cmp	r3, #66	@ 0x42
 8001142:	da89      	bge.n	8001058 <StartIRTask+0x414>
 8001144:	e027      	b.n	8001196 <StartIRTask+0x552>
			  case 0x16: num = 0; break;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800114c:	e023      	b.n	8001196 <StartIRTask+0x552>
			  case 0x0C: num = 1; break;
 800114e:	2301      	movs	r3, #1
 8001150:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001154:	e01f      	b.n	8001196 <StartIRTask+0x552>
			  case 0x18: num = 2; break;
 8001156:	2302      	movs	r3, #2
 8001158:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800115c:	e01b      	b.n	8001196 <StartIRTask+0x552>
			  case 0x5E: num = 3; break;
 800115e:	2303      	movs	r3, #3
 8001160:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001164:	e017      	b.n	8001196 <StartIRTask+0x552>
			  case 0x08: num = 4; break;
 8001166:	2304      	movs	r3, #4
 8001168:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800116c:	e013      	b.n	8001196 <StartIRTask+0x552>
			  case 0x1C: num = 5; break;
 800116e:	2305      	movs	r3, #5
 8001170:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001174:	e00f      	b.n	8001196 <StartIRTask+0x552>
			  case 0x5A: num = 6; break;
 8001176:	2306      	movs	r3, #6
 8001178:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800117c:	e00b      	b.n	8001196 <StartIRTask+0x552>
			  case 0x42: num = 7; break;
 800117e:	2307      	movs	r3, #7
 8001180:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001184:	e007      	b.n	8001196 <StartIRTask+0x552>
			  case 0x52: num = 8; break;
 8001186:	2308      	movs	r3, #8
 8001188:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800118c:	e003      	b.n	8001196 <StartIRTask+0x552>
			  case 0x4A: num = 9; break;
 800118e:	2309      	movs	r3, #9
 8001190:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001194:	bf00      	nop
			}

			if (current_mode == MODE_SET_TIME && selected_time_field != TIME_FIELD_NONE) {
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <StartIRTask+0x5ec>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d15a      	bne.n	8001254 <StartIRTask+0x610>
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <StartIRTask+0x5f0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d056      	beq.n	8001254 <StartIRTask+0x610>
			  if (selected_time_field == TIME_FIELD_HOUR) {
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <StartIRTask+0x5f0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d112      	bne.n	80011d4 <StartIRTask+0x590>
				setup_hour_digits[setup_hour_input_idx] = num;
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <StartIRTask+0x5f8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4a22      	ldr	r2, [pc, #136]	@ (8001240 <StartIRTask+0x5fc>)
 80011b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80011ba:	5453      	strb	r3, [r2, r1]
				setup_hour_input_idx = (setup_hour_input_idx + 1) % 2;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <StartIRTask+0x5f8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	bfb8      	it	lt
 80011ca:	425b      	neglt	r3, r3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <StartIRTask+0x5f8>)
 80011d0:	701a      	strb	r2, [r3, #0]
			  if (selected_time_field == TIME_FIELD_HOUR) {
 80011d2:	e08f      	b.n	80012f4 <StartIRTask+0x6b0>
			  }
			  else if (selected_time_field == TIME_FIELD_MINUTE) {
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <StartIRTask+0x5f0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d112      	bne.n	8001202 <StartIRTask+0x5be>
				setup_min_digits[setup_min_input_idx] = num;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <StartIRTask+0x600>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <StartIRTask+0x604>)
 80011e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80011e8:	5453      	strb	r3, [r2, r1]
				setup_min_input_idx = (setup_min_input_idx + 1) % 2;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <StartIRTask+0x600>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	bfb8      	it	lt
 80011f8:	425b      	neglt	r3, r3
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <StartIRTask+0x600>)
 80011fe:	701a      	strb	r2, [r3, #0]
			  if (selected_time_field == TIME_FIELD_HOUR) {
 8001200:	e078      	b.n	80012f4 <StartIRTask+0x6b0>
			  }
			  else if (selected_time_field == TIME_FIELD_SECOND) {
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <StartIRTask+0x5f0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d174      	bne.n	80012f4 <StartIRTask+0x6b0>
				setup_sec_digits[setup_sec_input_idx] = num;
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <StartIRTask+0x608>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <StartIRTask+0x60c>)
 8001212:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001216:	5453      	strb	r3, [r2, r1]
				setup_sec_input_idx = (setup_sec_input_idx + 1) % 2;
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <StartIRTask+0x608>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	bfb8      	it	lt
 8001226:	425b      	neglt	r3, r3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <StartIRTask+0x608>)
 800122c:	701a      	strb	r2, [r3, #0]
			  if (selected_time_field == TIME_FIELD_HOUR) {
 800122e:	e061      	b.n	80012f4 <StartIRTask+0x6b0>
 8001230:	20000094 	.word	0x20000094
 8001234:	20000095 	.word	0x20000095
 8001238:	20000096 	.word	0x20000096
 800123c:	2000015a 	.word	0x2000015a
 8001240:	20000150 	.word	0x20000150
 8001244:	2000015b 	.word	0x2000015b
 8001248:	20000154 	.word	0x20000154
 800124c:	2000015c 	.word	0x2000015c
 8001250:	20000158 	.word	0x20000158
			  }
			}
			else if (current_mode == MODE_SET_ALARM && selected_alarm_field != ALARM_FIELD_NONE) {
 8001254:	4ba5      	ldr	r3, [pc, #660]	@ (80014ec <StartIRTask+0x8a8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	f040 813e 	bne.w	80014da <StartIRTask+0x896>
 800125e:	4ba4      	ldr	r3, [pc, #656]	@ (80014f0 <StartIRTask+0x8ac>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8139 	beq.w	80014da <StartIRTask+0x896>
			  if (selected_alarm_field == ALARM_FIELD_HOUR) {
 8001268:	4ba1      	ldr	r3, [pc, #644]	@ (80014f0 <StartIRTask+0x8ac>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d112      	bne.n	8001296 <StartIRTask+0x652>
				alarm_hour_digits[alarm_hour_input_idx] = num;
 8001270:	4ba0      	ldr	r3, [pc, #640]	@ (80014f4 <StartIRTask+0x8b0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	4aa0      	ldr	r2, [pc, #640]	@ (80014f8 <StartIRTask+0x8b4>)
 8001278:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800127c:	5453      	strb	r3, [r2, r1]
				alarm_hour_input_idx = (alarm_hour_input_idx + 1) % 2;
 800127e:	4b9d      	ldr	r3, [pc, #628]	@ (80014f4 <StartIRTask+0x8b0>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	bfb8      	it	lt
 800128c:	425b      	neglt	r3, r3
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b98      	ldr	r3, [pc, #608]	@ (80014f4 <StartIRTask+0x8b0>)
 8001292:	701a      	strb	r2, [r3, #0]
				   cmd == 0x52 || cmd == 0x4A) {
 8001294:	e121      	b.n	80014da <StartIRTask+0x896>
			  }
			  else if (selected_alarm_field == ALARM_FIELD_MINUTE) {
 8001296:	4b96      	ldr	r3, [pc, #600]	@ (80014f0 <StartIRTask+0x8ac>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d112      	bne.n	80012c4 <StartIRTask+0x680>
				alarm_min_digits[alarm_min_input_idx] = num;
 800129e:	4b97      	ldr	r3, [pc, #604]	@ (80014fc <StartIRTask+0x8b8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4a96      	ldr	r2, [pc, #600]	@ (8001500 <StartIRTask+0x8bc>)
 80012a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80012aa:	5453      	strb	r3, [r2, r1]
				alarm_min_input_idx = (alarm_min_input_idx + 1) % 2;
 80012ac:	4b93      	ldr	r3, [pc, #588]	@ (80014fc <StartIRTask+0x8b8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	bfb8      	it	lt
 80012ba:	425b      	neglt	r3, r3
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b8f      	ldr	r3, [pc, #572]	@ (80014fc <StartIRTask+0x8b8>)
 80012c0:	701a      	strb	r2, [r3, #0]
				   cmd == 0x52 || cmd == 0x4A) {
 80012c2:	e10a      	b.n	80014da <StartIRTask+0x896>
			  }
			  else if (selected_alarm_field == ALARM_FIELD_SECOND) {
 80012c4:	4b8a      	ldr	r3, [pc, #552]	@ (80014f0 <StartIRTask+0x8ac>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	f040 8106 	bne.w	80014da <StartIRTask+0x896>
				alarm_sec_digits[alarm_sec_input_idx] = num;
 80012ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001504 <StartIRTask+0x8c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4a8c      	ldr	r2, [pc, #560]	@ (8001508 <StartIRTask+0x8c4>)
 80012d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80012da:	5453      	strb	r3, [r2, r1]
				alarm_sec_input_idx = (alarm_sec_input_idx + 1) % 2;
 80012dc:	4b89      	ldr	r3, [pc, #548]	@ (8001504 <StartIRTask+0x8c0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	bfb8      	it	lt
 80012ea:	425b      	neglt	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b85      	ldr	r3, [pc, #532]	@ (8001504 <StartIRTask+0x8c0>)
 80012f0:	701a      	strb	r2, [r3, #0]
				   cmd == 0x52 || cmd == 0x4A) {
 80012f2:	e0f2      	b.n	80014da <StartIRTask+0x896>
			  if (selected_time_field == TIME_FIELD_HOUR) {
 80012f4:	bf00      	nop
				   cmd == 0x52 || cmd == 0x4A) {
 80012f6:	e0f0      	b.n	80014da <StartIRTask+0x896>
			  }
			}
		  }

		  else if (cmd == 0x07) {  // - 버튼: 날짜 출력
 80012f8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d12f      	bne.n	8001360 <StartIRTask+0x71c>
			  date_display_enabled = true;
 8001300:	4b82      	ldr	r3, [pc, #520]	@ (800150c <StartIRTask+0x8c8>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
		      RTC_DateTypeDef date;
		      HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001306:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	4880      	ldr	r0, [pc, #512]	@ (8001510 <StartIRTask+0x8cc>)
 8001310:	f004 f949 	bl	80055a6 <HAL_RTC_GetDate>

		      char dateStr[32];
		      snprintf(dateStr, sizeof(dateStr), "Date: %04d-%02d-%02d  ",
		               2000 + date.Year, date.Month, date.Date);
 8001314:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
		      snprintf(dateStr, sizeof(dateStr), "Date: %04d-%02d-%02d  ",
 8001318:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
		               2000 + date.Year, date.Month, date.Date);
 800131c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8001320:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
		      snprintf(dateStr, sizeof(dateStr), "Date: %04d-%02d-%02d  ",
 8001324:	f107 0008 	add.w	r0, r7, #8
 8001328:	9101      	str	r1, [sp, #4]
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	4a79      	ldr	r2, [pc, #484]	@ (8001514 <StartIRTask+0x8d0>)
 800132e:	2120      	movs	r1, #32
 8001330:	f009 fae2 	bl	800a8f8 <sniprintf>

		      osMutexAcquire(LCDMutexHandle, osWaitForever);
 8001334:	4b78      	ldr	r3, [pc, #480]	@ (8001518 <StartIRTask+0x8d4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	4618      	mov	r0, r3
 800133e:	f006 f90d 	bl	800755c <osMutexAcquire>
		      LCD_SetCursor(1, 0);  // 2행 0열
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f000 fd1c 	bl	8001d82 <LCD_SetCursor>
		      LCD_Print(dateStr);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fd32 	bl	8001db8 <LCD_Print>
		      osMutexRelease(LCDMutexHandle);
 8001354:	4b70      	ldr	r3, [pc, #448]	@ (8001518 <StartIRTask+0x8d4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f006 f94a 	bl	80075f2 <osMutexRelease>
 800135e:	e0bd      	b.n	80014dc <StartIRTask+0x898>
		  }


		  else if (cmd == 0x19) {  // 100+ 버튼: WIFI에서 시간 복원 후 LCD 0행에 표시
 8001360:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001364:	2b19      	cmp	r3, #25
 8001366:	d154      	bne.n	8001412 <StartIRTask+0x7ce>
		      RTC_TimeTypeDef dsTime;
		      RTC_DateTypeDef dsDate;
		      char ntp_msg[32];

		      if (isWiFiready) {
 8001368:	4b6c      	ldr	r3, [pc, #432]	@ (800151c <StartIRTask+0x8d8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d047      	beq.n	8001400 <StartIRTask+0x7bc>
		    	  DS1302_GetTime(&dsTime, &dsDate);  // ds1302에서 백업된 시간 불러오기
 8001370:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001374:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fa9a 	bl	80008b4 <DS1302_GetTime>

		          HAL_RTC_SetTime(&hrtc, &dsTime, RTC_FORMAT_BIN);
 8001380:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	4861      	ldr	r0, [pc, #388]	@ (8001510 <StartIRTask+0x8cc>)
 800138a:	f003 ff90 	bl	80052ae <HAL_RTC_SetTime>
		          HAL_RTC_SetDate(&hrtc, &dsDate, RTC_FORMAT_BIN);
 800138e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	485e      	ldr	r0, [pc, #376]	@ (8001510 <StartIRTask+0x8cc>)
 8001398:	f004 f881 	bl	800549e <HAL_RTC_SetDate>

		          // LCD 0행에 NTP 시간 한 번 출력
		          snprintf(ntp_msg, sizeof(ntp_msg), "NTP: %02d:%02d:%02d  ",
		                   dsTime.Hours, dsTime.Minutes, dsTime.Seconds);
 800139c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
		          snprintf(ntp_msg, sizeof(ntp_msg), "NTP: %02d:%02d:%02d  ",
 80013a0:	4619      	mov	r1, r3
		                   dsTime.Hours, dsTime.Minutes, dsTime.Seconds);
 80013a2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80013a6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
		          snprintf(ntp_msg, sizeof(ntp_msg), "NTP: %02d:%02d:%02d  ",
 80013aa:	f107 0008 	add.w	r0, r7, #8
 80013ae:	9201      	str	r2, [sp, #4]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	460b      	mov	r3, r1
 80013b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001520 <StartIRTask+0x8dc>)
 80013b6:	2120      	movs	r1, #32
 80013b8:	f009 fa9e 	bl	800a8f8 <sniprintf>

		          osMutexAcquire(LCDMutexHandle, osWaitForever);
 80013bc:	4b56      	ldr	r3, [pc, #344]	@ (8001518 <StartIRTask+0x8d4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 f8c9 	bl	800755c <osMutexAcquire>
		          LCD_SetCursor(0, 0);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fcd8 	bl	8001d82 <LCD_SetCursor>
		          LCD_Print(ntp_msg);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fcee 	bl	8001db8 <LCD_Print>
		          osMutexRelease(LCDMutexHandle);
 80013dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <StartIRTask+0x8d4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 f906 	bl	80075f2 <osMutexRelease>

		          time_restored_WIFI_flag = 1;
 80013e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <StartIRTask+0x8e0>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
		          time_restored_WIFI_tick = osKernelGetTickCount();
 80013ec:	f005 ff08 	bl	8007200 <osKernelGetTickCount>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <StartIRTask+0x8e4>)
 80013f4:	6013      	str	r3, [r2, #0]

		          osDelay(1000);
 80013f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013fa:	f006 f80e 	bl	800741a <osDelay>
 80013fe:	e06d      	b.n	80014dc <StartIRTask+0x898>
		      }
		      else {
		          // LCD 1행에 실패 메시지 → 플래그 사용
		          time_sync_fail_flag = 1;
 8001400:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <StartIRTask+0x8e8>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
		          time_sync_fail_tick = osKernelGetTickCount();
 8001406:	f005 fefb 	bl	8007200 <osKernelGetTickCount>
 800140a:	4603      	mov	r3, r0
 800140c:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <StartIRTask+0x8ec>)
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e064      	b.n	80014dc <StartIRTask+0x898>
		      }
		  }

		  else if (cmd == 0x0D) {  // 200+ 버튼: DS1302에서 시간 복원
 8001412:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001416:	2b0d      	cmp	r3, #13
 8001418:	d122      	bne.n	8001460 <StartIRTask+0x81c>
		      RTC_TimeTypeDef dsTime;
		      RTC_DateTypeDef dsDate;
		      //char log[64];

		      DS1302_GetTime(&dsTime, &dsDate);  // ds1302에서 백업된 시간 불러오기
 800141a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800141e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fa45 	bl	80008b4 <DS1302_GetTime>

		      HAL_RTC_SetTime(&hrtc, &dsTime, RTC_FORMAT_BIN); // 불러온 시간 RTC에 저장
 800142a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	4837      	ldr	r0, [pc, #220]	@ (8001510 <StartIRTask+0x8cc>)
 8001434:	f003 ff3b 	bl	80052ae <HAL_RTC_SetTime>
		      HAL_RTC_SetDate(&hrtc, &dsDate, RTC_FORMAT_BIN); // 불러온 날짜 RTC에 저장
 8001438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4833      	ldr	r0, [pc, #204]	@ (8001510 <StartIRTask+0x8cc>)
 8001442:	f004 f82c 	bl	800549e <HAL_RTC_SetDate>

		      //HAL_UART_Transmit(&huart2, (uint8_t*)log, strlen(log), 100);
		      time_restored_RTC_flag = 1;
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <StartIRTask+0x8f0>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
		      time_restored_RTC_tick = osKernelGetTickCount();
 800144c:	f005 fed8 	bl	8007200 <osKernelGetTickCount>
 8001450:	4603      	mov	r3, r0
 8001452:	4a39      	ldr	r2, [pc, #228]	@ (8001538 <StartIRTask+0x8f4>)
 8001454:	6013      	str	r3, [r2, #0]
		      osDelay(1000);
 8001456:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800145a:	f005 ffde 	bl	800741a <osDelay>
 800145e:	e03d      	b.n	80014dc <StartIRTask+0x898>
		  }

		  // EQ 버튼: 시간/알람 설정 취소
		  else if (cmd == 0x09) {
 8001460:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001464:	2b09      	cmp	r3, #9
 8001466:	d139      	bne.n	80014dc <StartIRTask+0x898>
			if (current_mode == MODE_SET_TIME || current_mode == MODE_SET_ALARM) {
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <StartIRTask+0x8a8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d003      	beq.n	8001478 <StartIRTask+0x834>
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <StartIRTask+0x8a8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d131      	bne.n	80014dc <StartIRTask+0x898>
			  current_mode = MODE_IDLE;
 8001478:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <StartIRTask+0x8a8>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
			  selected_time_field = TIME_FIELD_NONE;
 800147e:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <StartIRTask+0x8f8>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
			  selected_alarm_field = ALARM_FIELD_NONE;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <StartIRTask+0x8ac>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
			  alarm_is_set = false;
 800148a:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <StartIRTask+0x8fc>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]

			  alarm_hour = alarm_min = alarm_sec = 255;
 8001490:	4b2c      	ldr	r3, [pc, #176]	@ (8001544 <StartIRTask+0x900>)
 8001492:	22ff      	movs	r2, #255	@ 0xff
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <StartIRTask+0x900>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <StartIRTask+0x904>)
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <StartIRTask+0x904>)
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <StartIRTask+0x908>)
 80014a4:	701a      	strb	r2, [r3, #0]
			  date_display_enabled = false;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <StartIRTask+0x8c8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
			  alarm_triggered = 0;
 80014ac:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <StartIRTask+0x90c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]

			  // 2행을 표시하지 않도록 관련 플래그 초기화

			  osMutexAcquire(LCDMutexHandle, osWaitForever);
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <StartIRTask+0x8d4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f04f 31ff 	mov.w	r1, #4294967295
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 f84e 	bl	800755c <osMutexAcquire>
			  LCD_SetCursor(1, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 fc5d 	bl	8001d82 <LCD_SetCursor>
			  LCD_Print("                ");
 80014c8:	4822      	ldr	r0, [pc, #136]	@ (8001554 <StartIRTask+0x910>)
 80014ca:	f000 fc75 	bl	8001db8 <LCD_Print>
			  osMutexRelease(LCDMutexHandle);
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <StartIRTask+0x8d4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 f88d 	bl	80075f2 <osMutexRelease>
 80014d8:	e000      	b.n	80014dc <StartIRTask+0x898>
				   cmd == 0x52 || cmd == 0x4A) {
 80014da:	bf00      	nop
			}
		  }
		  reset_ir_state();  // 수신 완료 후 초기화
 80014dc:	f000 fc0a 	bl	8001cf4 <reset_ir_state>
		}
		osDelay(30);
 80014e0:	201e      	movs	r0, #30
 80014e2:	f005 ff9a 	bl	800741a <osDelay>
		if (ir_key_ready) {
 80014e6:	f7ff bbb1 	b.w	8000c4c <StartIRTask+0x8>
 80014ea:	bf00      	nop
 80014ec:	20000094 	.word	0x20000094
 80014f0:	20000096 	.word	0x20000096
 80014f4:	2000013f 	.word	0x2000013f
 80014f8:	20000144 	.word	0x20000144
 80014fc:	20000140 	.word	0x20000140
 8001500:	20000148 	.word	0x20000148
 8001504:	20000141 	.word	0x20000141
 8001508:	2000014c 	.word	0x2000014c
 800150c:	200000c2 	.word	0x200000c2
 8001510:	2000067c 	.word	0x2000067c
 8001514:	0800b460 	.word	0x0800b460
 8001518:	200000e0 	.word	0x200000e0
 800151c:	2000015d 	.word	0x2000015d
 8001520:	0800b478 	.word	0x0800b478
 8001524:	200000b0 	.word	0x200000b0
 8001528:	200000b4 	.word	0x200000b4
 800152c:	200000b8 	.word	0x200000b8
 8001530:	200000bc 	.word	0x200000bc
 8001534:	200000a8 	.word	0x200000a8
 8001538:	200000ac 	.word	0x200000ac
 800153c:	20000095 	.word	0x20000095
 8001540:	200000c1 	.word	0x200000c1
 8001544:	20000002 	.word	0x20000002
 8001548:	20000001 	.word	0x20000001
 800154c:	20000000 	.word	0x20000000
 8001550:	200000c0 	.word	0x200000c0
 8001554:	0800b490 	.word	0x0800b490

08001558 <StartUIStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUIStateTask */
void StartUIStateTask(void *argument)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b093      	sub	sp, #76	@ 0x4c
 800155c:	af06      	add	r7, sp, #24
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUIStateTask */
	char buf[32];
	for (;;) {
	osMutexAcquire(LCDMutexHandle, osWaitForever);
 8001560:	4b9d      	ldr	r3, [pc, #628]	@ (80017d8 <StartUIStateTask+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	4618      	mov	r0, r3
 800156a:	f005 fff7 	bl	800755c <osMutexAcquire>

	// 1️⃣ Alarm Triggered
	if (alarm_triggered_flag) {
 800156e:	4b9b      	ldr	r3, [pc, #620]	@ (80017dc <StartUIStateTask+0x284>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d02b      	beq.n	80015ce <StartUIStateTask+0x76>
	  if ((osKernelGetTickCount() - alarm_triggered_tick) <= 1000) {
 8001576:	f005 fe43 	bl	8007200 <osKernelGetTickCount>
 800157a:	4602      	mov	r2, r0
 800157c:	4b98      	ldr	r3, [pc, #608]	@ (80017e0 <StartUIStateTask+0x288>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001586:	d80f      	bhi.n	80015a8 <StartUIStateTask+0x50>
		LCD_SetCursor(1, 0);
 8001588:	2100      	movs	r1, #0
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fbf9 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("Alarm Triggered   ");
 8001590:	4894      	ldr	r0, [pc, #592]	@ (80017e4 <StartUIStateTask+0x28c>)
 8001592:	f000 fc11 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 8001596:	4b90      	ldr	r3, [pc, #576]	@ (80017d8 <StartUIStateTask+0x280>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f006 f829 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 80015a0:	20c8      	movs	r0, #200	@ 0xc8
 80015a2:	f005 ff3a 	bl	800741a <osDelay>
		continue;
 80015a6:	e1b2      	b.n	800190e <StartUIStateTask+0x3b6>
	  } else {
		alarm_triggered_flag = 0;
 80015a8:	4b8c      	ldr	r3, [pc, #560]	@ (80017dc <StartUIStateTask+0x284>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
		LCD_SetCursor(1, 0);
 80015ae:	2100      	movs	r1, #0
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 fbe6 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("                ");
 80015b6:	488c      	ldr	r0, [pc, #560]	@ (80017e8 <StartUIStateTask+0x290>)
 80015b8:	f000 fbfe 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 80015bc:	4b86      	ldr	r3, [pc, #536]	@ (80017d8 <StartUIStateTask+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f006 f816 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 80015c6:	20c8      	movs	r0, #200	@ 0xc8
 80015c8:	f005 ff27 	bl	800741a <osDelay>
		continue;
 80015cc:	e19f      	b.n	800190e <StartUIStateTask+0x3b6>
	  }
	}

	// 2️⃣ Time Set Done
	if (time_set_done_flag) {
 80015ce:	4b87      	ldr	r3, [pc, #540]	@ (80017ec <StartUIStateTask+0x294>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d02b      	beq.n	800162e <StartUIStateTask+0xd6>
	  if ((osKernelGetTickCount() - time_set_done_tick) <= 1000) {
 80015d6:	f005 fe13 	bl	8007200 <osKernelGetTickCount>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b84      	ldr	r3, [pc, #528]	@ (80017f0 <StartUIStateTask+0x298>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e6:	d80f      	bhi.n	8001608 <StartUIStateTask+0xb0>
		LCD_SetCursor(1, 0);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2001      	movs	r0, #1
 80015ec:	f000 fbc9 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("Time Set Done     ");
 80015f0:	4880      	ldr	r0, [pc, #512]	@ (80017f4 <StartUIStateTask+0x29c>)
 80015f2:	f000 fbe1 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 80015f6:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <StartUIStateTask+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 fff9 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 8001600:	20c8      	movs	r0, #200	@ 0xc8
 8001602:	f005 ff0a 	bl	800741a <osDelay>
		continue;
 8001606:	e182      	b.n	800190e <StartUIStateTask+0x3b6>
	  } else {
		time_set_done_flag = 0;
 8001608:	4b78      	ldr	r3, [pc, #480]	@ (80017ec <StartUIStateTask+0x294>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
		LCD_SetCursor(1, 0);
 800160e:	2100      	movs	r1, #0
 8001610:	2001      	movs	r0, #1
 8001612:	f000 fbb6 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("                ");
 8001616:	4874      	ldr	r0, [pc, #464]	@ (80017e8 <StartUIStateTask+0x290>)
 8001618:	f000 fbce 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 800161c:	4b6e      	ldr	r3, [pc, #440]	@ (80017d8 <StartUIStateTask+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f005 ffe6 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 8001626:	20c8      	movs	r0, #200	@ 0xc8
 8001628:	f005 fef7 	bl	800741a <osDelay>
		continue;
 800162c:	e16f      	b.n	800190e <StartUIStateTask+0x3b6>
	  }
	}

	// 3️⃣ Time Restored (DS1302)
	if (time_restored_RTC_flag || time_restored_WIFI_flag) {
 800162e:	4b72      	ldr	r3, [pc, #456]	@ (80017f8 <StartUIStateTask+0x2a0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <StartUIStateTask+0xe6>
 8001636:	4b71      	ldr	r3, [pc, #452]	@ (80017fc <StartUIStateTask+0x2a4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04f      	beq.n	80016de <StartUIStateTask+0x186>
	  if ((osKernelGetTickCount() - time_restored_RTC_tick) <= 1000) {
 800163e:	f005 fddf 	bl	8007200 <osKernelGetTickCount>
 8001642:	4602      	mov	r2, r0
 8001644:	4b6e      	ldr	r3, [pc, #440]	@ (8001800 <StartUIStateTask+0x2a8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164e:	d80f      	bhi.n	8001670 <StartUIStateTask+0x118>
		LCD_SetCursor(1, 0);
 8001650:	2100      	movs	r1, #0
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fb95 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("Refresh(RTC)     ");
 8001658:	486a      	ldr	r0, [pc, #424]	@ (8001804 <StartUIStateTask+0x2ac>)
 800165a:	f000 fbad 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 800165e:	4b5e      	ldr	r3, [pc, #376]	@ (80017d8 <StartUIStateTask+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f005 ffc5 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 8001668:	20c8      	movs	r0, #200	@ 0xc8
 800166a:	f005 fed6 	bl	800741a <osDelay>
		continue;
 800166e:	e14e      	b.n	800190e <StartUIStateTask+0x3b6>
	  }
	  else if ((osKernelGetTickCount() - time_restored_WIFI_tick) <= 1000) {
 8001670:	f005 fdc6 	bl	8007200 <osKernelGetTickCount>
 8001674:	4602      	mov	r2, r0
 8001676:	4b64      	ldr	r3, [pc, #400]	@ (8001808 <StartUIStateTask+0x2b0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001680:	d80f      	bhi.n	80016a2 <StartUIStateTask+0x14a>
		LCD_SetCursor(1, 0);
 8001682:	2100      	movs	r1, #0
 8001684:	2001      	movs	r0, #1
 8001686:	f000 fb7c 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("Refresh(WIFI)     ");
 800168a:	4860      	ldr	r0, [pc, #384]	@ (800180c <StartUIStateTask+0x2b4>)
 800168c:	f000 fb94 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 8001690:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <StartUIStateTask+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f005 ffac 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 800169a:	20c8      	movs	r0, #200	@ 0xc8
 800169c:	f005 febd 	bl	800741a <osDelay>
		continue;
 80016a0:	e135      	b.n	800190e <StartUIStateTask+0x3b6>
	  }
	  else {
		if(time_restored_RTC_flag == 1) time_restored_RTC_flag = 0;
 80016a2:	4b55      	ldr	r3, [pc, #340]	@ (80017f8 <StartUIStateTask+0x2a0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <StartUIStateTask+0x158>
 80016aa:	4b53      	ldr	r3, [pc, #332]	@ (80017f8 <StartUIStateTask+0x2a0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
		if(time_restored_WIFI_flag == 1) time_restored_WIFI_flag = 0;
 80016b0:	4b52      	ldr	r3, [pc, #328]	@ (80017fc <StartUIStateTask+0x2a4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <StartUIStateTask+0x166>
 80016b8:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <StartUIStateTask+0x2a4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		LCD_SetCursor(1, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	2001      	movs	r0, #1
 80016c2:	f000 fb5e 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("                ");
 80016c6:	4848      	ldr	r0, [pc, #288]	@ (80017e8 <StartUIStateTask+0x290>)
 80016c8:	f000 fb76 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <StartUIStateTask+0x280>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 ff8e 	bl	80075f2 <osMutexRelease>
		osDelay(200);
 80016d6:	20c8      	movs	r0, #200	@ 0xc8
 80016d8:	f005 fe9f 	bl	800741a <osDelay>
		continue;
 80016dc:	e117      	b.n	800190e <StartUIStateTask+0x3b6>
	  }
	}

	// 0️⃣ NTP Sync Fail
	if (time_sync_fail_flag) {
 80016de:	4b4c      	ldr	r3, [pc, #304]	@ (8001810 <StartUIStateTask+0x2b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02b      	beq.n	800173e <StartUIStateTask+0x1e6>
	    if ((osKernelGetTickCount() - time_sync_fail_tick) <= 1000) {
 80016e6:	f005 fd8b 	bl	8007200 <osKernelGetTickCount>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <StartUIStateTask+0x2bc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016f6:	d80f      	bhi.n	8001718 <StartUIStateTask+0x1c0>
	        LCD_SetCursor(1, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2001      	movs	r0, #1
 80016fc:	f000 fb41 	bl	8001d82 <LCD_SetCursor>
	        LCD_Print("NTP Sync Fail    ");
 8001700:	4845      	ldr	r0, [pc, #276]	@ (8001818 <StartUIStateTask+0x2c0>)
 8001702:	f000 fb59 	bl	8001db8 <LCD_Print>
	        osMutexRelease(LCDMutexHandle);
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <StartUIStateTask+0x280>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f005 ff71 	bl	80075f2 <osMutexRelease>
	        osDelay(200);
 8001710:	20c8      	movs	r0, #200	@ 0xc8
 8001712:	f005 fe82 	bl	800741a <osDelay>
	        continue;
 8001716:	e0fa      	b.n	800190e <StartUIStateTask+0x3b6>
	    } else {
	        time_sync_fail_flag = 0;
 8001718:	4b3d      	ldr	r3, [pc, #244]	@ (8001810 <StartUIStateTask+0x2b8>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
	        LCD_SetCursor(1, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f000 fb2e 	bl	8001d82 <LCD_SetCursor>
	        LCD_Print("                ");
 8001726:	4830      	ldr	r0, [pc, #192]	@ (80017e8 <StartUIStateTask+0x290>)
 8001728:	f000 fb46 	bl	8001db8 <LCD_Print>
	        osMutexRelease(LCDMutexHandle);
 800172c:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <StartUIStateTask+0x280>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f005 ff5e 	bl	80075f2 <osMutexRelease>
	        osDelay(200);
 8001736:	20c8      	movs	r0, #200	@ 0xc8
 8001738:	f005 fe6f 	bl	800741a <osDelay>
	        continue;
 800173c:	e0e7      	b.n	800190e <StartUIStateTask+0x3b6>
	    }
	}

	// 🌐 기본 출력 (날짜, 설정 중, 알람 설정 등)
	else if (date_display_enabled) {
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <StartUIStateTask+0x2c4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01d      	beq.n	8001782 <StartUIStateTask+0x22a>
	  RTC_DateTypeDef sDate;
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4834      	ldr	r0, [pc, #208]	@ (8001820 <StartUIStateTask+0x2c8>)
 8001750:	f003 ff29 	bl	80055a6 <HAL_RTC_GetDate>
	  snprintf(buf, sizeof(buf), "Date: %04d/%02d/%02d",
			   2000 + sDate.Year, sDate.Month, sDate.Date);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
	  snprintf(buf, sizeof(buf), "Date: %04d/%02d/%02d",
 8001756:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
			   2000 + sDate.Year, sDate.Month, sDate.Date);
 800175a:	7b7a      	ldrb	r2, [r7, #13]
 800175c:	7bb9      	ldrb	r1, [r7, #14]
	  snprintf(buf, sizeof(buf), "Date: %04d/%02d/%02d",
 800175e:	f107 0010 	add.w	r0, r7, #16
 8001762:	9101      	str	r1, [sp, #4]
 8001764:	9200      	str	r2, [sp, #0]
 8001766:	4a2f      	ldr	r2, [pc, #188]	@ (8001824 <StartUIStateTask+0x2cc>)
 8001768:	2120      	movs	r1, #32
 800176a:	f009 f8c5 	bl	800a8f8 <sniprintf>
	  LCD_SetCursor(1, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	2001      	movs	r0, #1
 8001772:	f000 fb06 	bl	8001d82 <LCD_SetCursor>
	  LCD_Print(buf);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fb1c 	bl	8001db8 <LCD_Print>
 8001780:	e0bd      	b.n	80018fe <StartUIStateTask+0x3a6>
	}
	else if (current_mode == MODE_SET_ALARM) {
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <StartUIStateTask+0x2d0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d158      	bne.n	800183c <StartUIStateTask+0x2e4>
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
			   alarm_hour_digits[0], alarm_hour_digits[1],
 800178a:	4b28      	ldr	r3, [pc, #160]	@ (800182c <StartUIStateTask+0x2d4>)
 800178c:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 800178e:	461e      	mov	r6, r3
			   alarm_hour_digits[0], alarm_hour_digits[1],
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <StartUIStateTask+0x2d4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 8001794:	461a      	mov	r2, r3
			   alarm_min_digits[0], alarm_min_digits[1],
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <StartUIStateTask+0x2d8>)
 8001798:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 800179a:	4619      	mov	r1, r3
			   alarm_min_digits[0], alarm_min_digits[1],
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <StartUIStateTask+0x2d8>)
 800179e:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 80017a0:	461c      	mov	r4, r3
			   alarm_sec_digits[0], alarm_sec_digits[1]);
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <StartUIStateTask+0x2dc>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 80017a6:	461d      	mov	r5, r3
			   alarm_sec_digits[0], alarm_sec_digits[1]);
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <StartUIStateTask+0x2dc>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), "SetA: %d%d:%d%d:%d%d  ",
 80017ac:	f107 0010 	add.w	r0, r7, #16
 80017b0:	9304      	str	r3, [sp, #16]
 80017b2:	9503      	str	r5, [sp, #12]
 80017b4:	9402      	str	r4, [sp, #8]
 80017b6:	9101      	str	r1, [sp, #4]
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	4633      	mov	r3, r6
 80017bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <StartUIStateTask+0x2e0>)
 80017be:	2120      	movs	r1, #32
 80017c0:	f009 f89a 	bl	800a8f8 <sniprintf>
	  LCD_SetCursor(1, 0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 fadb 	bl	8001d82 <LCD_SetCursor>
	  LCD_Print(buf);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 faf1 	bl	8001db8 <LCD_Print>
 80017d6:	e092      	b.n	80018fe <StartUIStateTask+0x3a6>
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	20000098 	.word	0x20000098
 80017e0:	2000009c 	.word	0x2000009c
 80017e4:	0800b4a4 	.word	0x0800b4a4
 80017e8:	0800b490 	.word	0x0800b490
 80017ec:	200000a0 	.word	0x200000a0
 80017f0:	200000a4 	.word	0x200000a4
 80017f4:	0800b424 	.word	0x0800b424
 80017f8:	200000a8 	.word	0x200000a8
 80017fc:	200000b0 	.word	0x200000b0
 8001800:	200000ac 	.word	0x200000ac
 8001804:	0800b4b8 	.word	0x0800b4b8
 8001808:	200000b4 	.word	0x200000b4
 800180c:	0800b4cc 	.word	0x0800b4cc
 8001810:	200000b8 	.word	0x200000b8
 8001814:	200000bc 	.word	0x200000bc
 8001818:	0800b4e0 	.word	0x0800b4e0
 800181c:	200000c2 	.word	0x200000c2
 8001820:	2000067c 	.word	0x2000067c
 8001824:	0800b4f4 	.word	0x0800b4f4
 8001828:	20000094 	.word	0x20000094
 800182c:	20000144 	.word	0x20000144
 8001830:	20000148 	.word	0x20000148
 8001834:	2000014c 	.word	0x2000014c
 8001838:	0800b50c 	.word	0x0800b50c
	}
	else if (current_mode == MODE_SET_TIME) {
 800183c:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <StartUIStateTask+0x3b8>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d126      	bne.n	8001892 <StartUIStateTask+0x33a>
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
			   setup_hour_digits[0], setup_hour_digits[1],
 8001844:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <StartUIStateTask+0x3bc>)
 8001846:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 8001848:	461e      	mov	r6, r3
			   setup_hour_digits[0], setup_hour_digits[1],
 800184a:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <StartUIStateTask+0x3bc>)
 800184c:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 800184e:	461a      	mov	r2, r3
			   setup_min_digits[0], setup_min_digits[1],
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <StartUIStateTask+0x3c0>)
 8001852:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 8001854:	4619      	mov	r1, r3
			   setup_min_digits[0], setup_min_digits[1],
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <StartUIStateTask+0x3c0>)
 8001858:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 800185a:	461c      	mov	r4, r3
			   setup_sec_digits[0], setup_sec_digits[1]);
 800185c:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <StartUIStateTask+0x3c4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 8001860:	461d      	mov	r5, r3
			   setup_sec_digits[0], setup_sec_digits[1]);
 8001862:	4b2e      	ldr	r3, [pc, #184]	@ (800191c <StartUIStateTask+0x3c4>)
 8001864:	785b      	ldrb	r3, [r3, #1]
	  snprintf(buf, sizeof(buf), "SetT: %d%d:%d%d:%d%d  ",
 8001866:	f107 0010 	add.w	r0, r7, #16
 800186a:	9304      	str	r3, [sp, #16]
 800186c:	9503      	str	r5, [sp, #12]
 800186e:	9402      	str	r4, [sp, #8]
 8001870:	9101      	str	r1, [sp, #4]
 8001872:	9200      	str	r2, [sp, #0]
 8001874:	4633      	mov	r3, r6
 8001876:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <StartUIStateTask+0x3c8>)
 8001878:	2120      	movs	r1, #32
 800187a:	f009 f83d 	bl	800a8f8 <sniprintf>
	  LCD_SetCursor(1, 0);
 800187e:	2100      	movs	r1, #0
 8001880:	2001      	movs	r0, #1
 8001882:	f000 fa7e 	bl	8001d82 <LCD_SetCursor>
	  LCD_Print(buf);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fa94 	bl	8001db8 <LCD_Print>
 8001890:	e035      	b.n	80018fe <StartUIStateTask+0x3a6>
	}
	else if (current_mode == MODE_IDLE) {
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <StartUIStateTask+0x3b8>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d131      	bne.n	80018fe <StartUIStateTask+0x3a6>
	  if (alarm_is_set && !(alarm_hour == 255 || alarm_min == 255 || alarm_sec == 255)) {
 800189a:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <StartUIStateTask+0x3cc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d026      	beq.n	80018f0 <StartUIStateTask+0x398>
 80018a2:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <StartUIStateTask+0x3d0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2bff      	cmp	r3, #255	@ 0xff
 80018a8:	d022      	beq.n	80018f0 <StartUIStateTask+0x398>
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <StartUIStateTask+0x3d4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2bff      	cmp	r3, #255	@ 0xff
 80018b0:	d01e      	beq.n	80018f0 <StartUIStateTask+0x398>
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <StartUIStateTask+0x3d8>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2bff      	cmp	r3, #255	@ 0xff
 80018b8:	d01a      	beq.n	80018f0 <StartUIStateTask+0x398>
		snprintf(buf, sizeof(buf), "Alarm: %02d:%02d:%02d  ",
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <StartUIStateTask+0x3d0>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <StartUIStateTask+0x3d4>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <StartUIStateTask+0x3d8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f107 0010 	add.w	r0, r7, #16
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9200      	str	r2, [sp, #0]
 80018d2:	460b      	mov	r3, r1
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <StartUIStateTask+0x3dc>)
 80018d6:	2120      	movs	r1, #32
 80018d8:	f009 f80e 	bl	800a8f8 <sniprintf>
				 alarm_hour, alarm_min, alarm_sec);
		LCD_SetCursor(1, 0);
 80018dc:	2100      	movs	r1, #0
 80018de:	2001      	movs	r0, #1
 80018e0:	f000 fa4f 	bl	8001d82 <LCD_SetCursor>
		LCD_Print(buf);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fa65 	bl	8001db8 <LCD_Print>
 80018ee:	e006      	b.n	80018fe <StartUIStateTask+0x3a6>
	  } else {
		LCD_SetCursor(1, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 fa45 	bl	8001d82 <LCD_SetCursor>
		LCD_Print("                ");
 80018f8:	480f      	ldr	r0, [pc, #60]	@ (8001938 <StartUIStateTask+0x3e0>)
 80018fa:	f000 fa5d 	bl	8001db8 <LCD_Print>
	  }
	}

	osMutexRelease(LCDMutexHandle);
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <StartUIStateTask+0x3e4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fe75 	bl	80075f2 <osMutexRelease>
	osDelay(200);
 8001908:	20c8      	movs	r0, #200	@ 0xc8
 800190a:	f005 fd86 	bl	800741a <osDelay>
	osMutexAcquire(LCDMutexHandle, osWaitForever);
 800190e:	e627      	b.n	8001560 <StartUIStateTask+0x8>
 8001910:	20000094 	.word	0x20000094
 8001914:	20000150 	.word	0x20000150
 8001918:	20000154 	.word	0x20000154
 800191c:	20000158 	.word	0x20000158
 8001920:	0800b524 	.word	0x0800b524
 8001924:	200000c1 	.word	0x200000c1
 8001928:	20000000 	.word	0x20000000
 800192c:	20000001 	.word	0x20000001
 8001930:	20000002 	.word	0x20000002
 8001934:	0800b448 	.word	0x0800b448
 8001938:	0800b490 	.word	0x0800b490
 800193c:	200000e0 	.word	0x200000e0

08001940 <StartLCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
  osDelay(500);   // 전원 안정화 대기
 8001948:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800194c:	f005 fd65 	bl	800741a <osDelay>
  LCD_Init(&hi2c1);
 8001950:	4812      	ldr	r0, [pc, #72]	@ (800199c <StartLCDTask+0x5c>)
 8001952:	f000 f9f6 	bl	8001d42 <LCD_Init>
  char msg[LCD_QUEUE_ITEM_SIZE];
  /* Infinite loop */
  for(;;)
  {
    // CMSIS RTOS2 방식으로 메시지 수신
	if (osMessageQueueGet(LCD_QueueHandle, msg, NULL, osWaitForever) == osOK) {
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <StartLCDTask+0x60>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	f107 0108 	add.w	r1, r7, #8
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	2200      	movs	r2, #0
 8001964:	f005 fef6 	bl	8007754 <osMessageQueueGet>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f3      	bne.n	8001956 <StartLCDTask+0x16>
		osMutexAcquire(LCDMutexHandle, osWaitForever);
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <StartLCDTask+0x64>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 31ff 	mov.w	r1, #4294967295
 8001976:	4618      	mov	r0, r3
 8001978:	f005 fdf0 	bl	800755c <osMutexAcquire>
		LCD_SetCursor(0, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f9ff 	bl	8001d82 <LCD_SetCursor>
		LCD_Print(msg);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fa15 	bl	8001db8 <LCD_Print>
		osMutexRelease(LCDMutexHandle);
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <StartLCDTask+0x64>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f005 fe2d 	bl	80075f2 <osMutexRelease>
	if (osMessageQueueGet(LCD_QueueHandle, msg, NULL, osWaitForever) == osOK) {
 8001998:	e7dd      	b.n	8001956 <StartLCDTask+0x16>
 800199a:	bf00      	nop
 800199c:	200000e4 	.word	0x200000e4
 80019a0:	200000dc 	.word	0x200000dc
 80019a4:	200000e0 	.word	0x200000e0

080019a8 <StartNTPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNTPTask */
void StartNTPTask(void *argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNTPTask */
  // 태스크 시작 후 즉시 NTP 동기화 요청 (테스트용)
  osDelay(3000);  // 시스템이 안정화될 때까지 3초 대기
 80019b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80019b4:	f005 fd31 	bl	800741a <osDelay>
  //NTP_RequestTimeSync();  // 즉시 NTP 동기화 요청
  //Debug_Print("Start NTP Task\r\n");
  NTP_Timer_Init(&huart1, &huart2);
 80019b8:	4905      	ldr	r1, [pc, #20]	@ (80019d0 <StartNTPTask+0x28>)
 80019ba:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <StartNTPTask+0x2c>)
 80019bc:	f000 fb3c 	bl	8002038 <NTP_Timer_Init>
  /* Infinite loop */
  for(;;)
  {
    // NTP 타이머 태스크 실행
    NTP_Timer_Task(argument);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fb83 	bl	80020cc <NTP_Timer_Task>
    osDelay(100);
 80019c6:	2064      	movs	r0, #100	@ 0x64
 80019c8:	f005 fd27 	bl	800741a <osDelay>
    NTP_Timer_Task(argument);
 80019cc:	bf00      	nop
 80019ce:	e7f7      	b.n	80019c0 <StartNTPTask+0x18>
 80019d0:	20000730 	.word	0x20000730
 80019d4:	200006e8 	.word	0x200006e8

080019d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b53      	ldr	r3, [pc, #332]	@ (8001b40 <MX_GPIO_Init+0x168>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a52      	ldr	r2, [pc, #328]	@ (8001b40 <MX_GPIO_Init+0x168>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b50      	ldr	r3, [pc, #320]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b49      	ldr	r3, [pc, #292]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b45      	ldr	r3, [pc, #276]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a44      	ldr	r2, [pc, #272]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <MX_GPIO_Init+0x168>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS1302_CLK_Pin|DS1302_RST_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001a64:	4837      	ldr	r0, [pc, #220]	@ (8001b44 <MX_GPIO_Init+0x16c>)
 8001a66:	f002 f949 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4836      	ldr	r0, [pc, #216]	@ (8001b48 <MX_GPIO_Init+0x170>)
 8001a70:	f002 f944 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4830      	ldr	r0, [pc, #192]	@ (8001b4c <MX_GPIO_Init+0x174>)
 8001a8c:	f001 ff9a 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Receiver_Pin */
  GPIO_InitStruct.Pin = IR_Receiver_Pin;
 8001a90:	2301      	movs	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a94:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Receiver_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4827      	ldr	r0, [pc, #156]	@ (8001b44 <MX_GPIO_Init+0x16c>)
 8001aa6:	f001 ff8d 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DS1302_CLK_Pin DS1302_RST_Pin */
  GPIO_InitStruct.Pin = DS1302_CLK_Pin|DS1302_RST_Pin;
 8001aaa:	23a0      	movs	r3, #160	@ 0xa0
 8001aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4820      	ldr	r0, [pc, #128]	@ (8001b44 <MX_GPIO_Init+0x16c>)
 8001ac2:	f001 ff7f 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS1302_IO_Pin */
  GPIO_InitStruct.Pin = DS1302_IO_Pin;
 8001ac6:	2340      	movs	r3, #64	@ 0x40
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS1302_IO_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481a      	ldr	r0, [pc, #104]	@ (8001b44 <MX_GPIO_Init+0x16c>)
 8001ada:	f001 ff73 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4814      	ldr	r0, [pc, #80]	@ (8001b48 <MX_GPIO_Init+0x170>)
 8001af6:	f001 ff65 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <MX_GPIO_Init+0x16c>)
 8001b14:	f001 ff56 	bl	80039c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2105      	movs	r1, #5
 8001b1c:	2006      	movs	r0, #6
 8001b1e:	f001 fe88 	bl	8003832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b22:	2006      	movs	r0, #6
 8001b24:	f001 fea1 	bl	800386a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2105      	movs	r1, #5
 8001b2c:	2028      	movs	r0, #40	@ 0x28
 8001b2e:	f001 fe80 	bl	8003832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b32:	2028      	movs	r0, #40	@ 0x28
 8001b34:	f001 fe99 	bl	800386a <HAL_NVIC_EnableIRQ>

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	@ 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800

08001b50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b56:	4a13      	ldr	r2, [pc, #76]	@ (8001ba4 <MX_I2C1_Init+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <MX_I2C1_Init+0x58>)
 8001b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <MX_I2C1_Init+0x50>)
 8001b8e:	f002 f8e7 	bl	8003d60 <HAL_I2C_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 fa47 	bl	800202a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200000e4 	.word	0x200000e4
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	000186a0 	.word	0x000186a0

08001bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	@ (8001c30 <HAL_I2C_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12c      	bne.n	8001c28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_I2C_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <HAL_I2C_MspInit+0x88>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_I2C_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <HAL_I2C_MspInit+0x8c>)
 8001c08:	f001 fedc 	bl	80039c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_I2C_MspInit+0x88>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_I2C_MspInit+0x88>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_I2C_MspInit+0x88>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	@ 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400

08001c3c <check_ir>:
#include "ir_decode.h"
#include "main.h"

void check_ir(uint16_t period)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
    if (!receiving) {
 8001c46:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <check_ir+0xa8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d113      	bne.n	8001c78 <check_ir+0x3c>
        if (period > LEADER_MIN && period < LEADER_MAX) {  // 리더 코드 감지 (데이터 수신 시작)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d940      	bls.n	8001cdc <check_ir+0xa0>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f241 527b 	movw	r2, #5499	@ 0x157b
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d83b      	bhi.n	8001cdc <check_ir+0xa0>
            receiving = 1;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <check_ir+0xa8>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
            bit_cnt = 0;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <check_ir+0xac>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
            ir_data = 0;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <check_ir+0xb0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
        }
        return;
 8001c76:	e031      	b.n	8001cdc <check_ir+0xa0>
    }

    ir_data >>= 1;  // 한 칸 시프트
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <check_ir+0xb0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <check_ir+0xb0>)
 8001c80:	6013      	str	r3, [r2, #0]

    // 1비트 구간이면 MSB를 1로 설정
    if (period > BIT1_MIN && period < BIT1_MAX) {
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f240 526e 	movw	r2, #1390	@ 0x56e
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d90b      	bls.n	8001ca4 <check_ir+0x68>
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d806      	bhi.n	8001ca4 <check_ir+0x68>
        ir_data |= 0x80000000;
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <check_ir+0xb0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c9e:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <check_ir+0xb0>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00a      	b.n	8001cba <check_ir+0x7e>
    }
    // 0비트 구간도 아니고 1비트 구간도 아니면 잘못된 신호로 간주
    else if (!(period > BIT0_MIN && period < BIT0_MAX)) {
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8001caa:	d303      	bcc.n	8001cb4 <check_ir+0x78>
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	f5b3 7f3f 	cmp.w	r3, #764	@ 0x2fc
 8001cb2:	d902      	bls.n	8001cba <check_ir+0x7e>
        reset_ir_state();
 8001cb4:	f000 f81e 	bl	8001cf4 <reset_ir_state>
        return;
 8001cb8:	e011      	b.n	8001cde <check_ir+0xa2>
    }

    // 32비트 수신 완료 시
    if (++bit_cnt == 32) {
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <check_ir+0xac>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <check_ir+0xac>)
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	7011      	strb	r1, [r2, #0]
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d107      	bne.n	8001cde <check_ir+0xa2>
        ir_key_ready = 1;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <check_ir+0xb4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
        receiving = 0;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <check_ir+0xa8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	e000      	b.n	8001cde <check_ir+0xa2>
        return;
 8001cdc:	bf00      	nop
    }
}
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000013e 	.word	0x2000013e
 8001ce8:	2000013c 	.word	0x2000013c
 8001cec:	20000138 	.word	0x20000138
 8001cf0:	2000013d 	.word	0x2000013d

08001cf4 <reset_ir_state>:

void reset_ir_state(void) // 신호의 유효값을 벗어나면 해당 값들을 0으로 초기화
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
    ir_data = 0;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <reset_ir_state+0x28>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
    bit_cnt = 0;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <reset_ir_state+0x2c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
    receiving = 0;
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <reset_ir_state+0x30>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
    ir_key_ready = 0;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <reset_ir_state+0x34>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000138 	.word	0x20000138
 8001d20:	2000013c 	.word	0x2000013c
 8001d24:	2000013e 	.word	0x2000013e
 8001d28:	2000013d 	.word	0x2000013d

08001d2c <LCD_Delay>:

static void LCD_Send_Cmd(uint8_t cmd);
static void LCD_Send_Data(uint8_t data);
static void LCD_Send(uint8_t data, uint8_t mode);

static void LCD_Delay(uint32_t ms) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    osDelay(ms);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f005 fb70 	bl	800741a <osDelay>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c) {
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
    LCD_Delay(50);
 8001d4a:	2032      	movs	r0, #50	@ 0x32
 8001d4c:	f7ff ffee 	bl	8001d2c <LCD_Delay>
    LCD_Send_Cmd(0x33);
 8001d50:	2033      	movs	r0, #51	@ 0x33
 8001d52:	f000 f846 	bl	8001de2 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x32);
 8001d56:	2032      	movs	r0, #50	@ 0x32
 8001d58:	f000 f843 	bl	8001de2 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x28);
 8001d5c:	2028      	movs	r0, #40	@ 0x28
 8001d5e:	f000 f840 	bl	8001de2 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x0C);
 8001d62:	200c      	movs	r0, #12
 8001d64:	f000 f83d 	bl	8001de2 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x06);
 8001d68:	2006      	movs	r0, #6
 8001d6a:	f000 f83a 	bl	8001de2 <LCD_Send_Cmd>
    LCD_Send_Cmd(0x01);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 f837 	bl	8001de2 <LCD_Send_Cmd>
    LCD_Delay(5);
 8001d74:	2005      	movs	r0, #5
 8001d76:	f7ff ffd9 	bl	8001d2c <LCD_Delay>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <LCD_SetCursor+0x1e>
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	3b80      	subs	r3, #128	@ 0x80
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e002      	b.n	8001da6 <LCD_SetCursor+0x24>
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	3b40      	subs	r3, #64	@ 0x40
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	73fb      	strb	r3, [r7, #15]
    LCD_Send_Cmd(addr);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f819 	bl	8001de2 <LCD_Send_Cmd>
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <LCD_Print>:

void LCD_Print(char *str) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001dc0:	e006      	b.n	8001dd0 <LCD_Print+0x18>
        LCD_Send_Data(*str++);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f821 	bl	8001e12 <LCD_Send_Data>
    while (*str) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f4      	bne.n	8001dc2 <LCD_Print+0xa>
    }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <LCD_Send_Cmd>:
void LCD_Clear(void) {
    LCD_Send_Cmd(0x01);
    LCD_Delay(2);
}

static void LCD_Send_Cmd(uint8_t cmd) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd & 0xF0, 0);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f023 030f 	bic.w	r3, r3, #15
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f824 	bl	8001e44 <LCD_Send>
    LCD_Send((cmd << 4) & 0xF0, 0);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f81d 	bl	8001e44 <LCD_Send>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <LCD_Send_Data>:

static void LCD_Send_Data(uint8_t data) {
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data & 0xF0, 1);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f023 030f 	bic.w	r3, r3, #15
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f80c 	bl	8001e44 <LCD_Send>
    LCD_Send((data << 4) & 0xF0, 1);
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 f805 	bl	8001e44 <LCD_Send>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t mode) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71bb      	strb	r3, [r7, #6]
    uint8_t data_u = data | (mode ? 0x01 : 0x00) | 0x08; // backlight
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	73fb      	strb	r3, [r7, #15]
    uint8_t en_high = data_u | 0x04;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	73bb      	strb	r3, [r7, #14]
    uint8_t en_low  = data_u & ~0x04;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[2] = {en_high, en_low};
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	723b      	strb	r3, [r7, #8]
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, 2, 100);
 8001e8a:	f107 0208 	add.w	r2, r7, #8
 8001e8e:	2364      	movs	r3, #100	@ 0x64
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2302      	movs	r3, #2
 8001e94:	214e      	movs	r1, #78	@ 0x4e
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <LCD_Send+0x68>)
 8001e98:	f002 f8a6 	bl	8003fe8 <HAL_I2C_Master_Transmit>
    LCD_Delay(1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff ff45 	bl	8001d2c <LCD_Delay>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200000e4 	.word	0x200000e4

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb4:	f001 fb4c 	bl	8003550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb8:	f000 f81c 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ebc:	f7ff fd8c 	bl	80019d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ec0:	f001 fa34 	bl	800332c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ec4:	f7ff fe44 	bl	8001b50 <MX_I2C1_Init>
  MX_RTC_Init();
 8001ec8:	f001 f88a 	bl	8002fe0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001ecc:	f001 f992 	bl	80031f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001ed0:	f001 fa02 	bl	80032d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // TIM2 타이머 시작
 8001ed4:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <main+0x40>)
 8001ed6:	f003 fcc3 	bl	8005860 <HAL_TIM_Base_Start>
  reset_ir_state();
 8001eda:	f7ff ff0b 	bl	8001cf4 <reset_ir_state>
  //}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001ede:	f005 f945 	bl	800716c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ee2:	f7fe fd3f 	bl	8000964 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ee6:	f005 f965 	bl	80071b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <main+0x3a>
 8001eee:	bf00      	nop
 8001ef0:	200006a0 	.word	0x200006a0

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b094      	sub	sp, #80	@ 0x50
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	2230      	movs	r2, #48	@ 0x30
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f008 fd6a 	bl	800a9dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <SystemClock_Config+0xd0>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	4a28      	ldr	r2, [pc, #160]	@ (8001fc4 <SystemClock_Config+0xd0>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <SystemClock_Config+0xd0>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <SystemClock_Config+0xd4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <SystemClock_Config+0xd4>)
 8001f3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <SystemClock_Config+0xd4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f50:	230a      	movs	r3, #10
 8001f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f58:	2310      	movs	r3, #16
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f60:	2302      	movs	r3, #2
 8001f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f68:	2310      	movs	r3, #16
 8001f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f72:	2304      	movs	r3, #4
 8001f74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	f107 0320 	add.w	r3, r7, #32
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fb8c 	bl	800469c <HAL_RCC_OscConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f8a:	f000 f84e 	bl	800202a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8e:	230f      	movs	r3, #15
 8001f90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f92:	2302      	movs	r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fdee 	bl	8004b8c <HAL_RCC_ClockConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001fb6:	f000 f838 	bl	800202a <Error_Handler>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3750      	adds	r7, #80	@ 0x50
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d113      	bne.n	8002004 <HAL_GPIO_EXTI_Callback+0x38>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	480b      	ldr	r0, [pc, #44]	@ (800200c <HAL_GPIO_EXTI_Callback+0x40>)
 8001fe0:	f001 fe74 	bl	8003ccc <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d104      	bne.n	8001ff4 <HAL_GPIO_EXTI_Callback+0x28>
        {
            __HAL_TIM_SET_COUNTER(&htim2, 0); // Rising : 시간 초기
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <HAL_GPIO_EXTI_Callback+0x44>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
        {
            uint16_t delta = __HAL_TIM_GET_COUNTER(&htim2); // Falling : 시간 측정
            check_ir(delta);
        }
    }
}
 8001ff2:	e007      	b.n	8002004 <HAL_GPIO_EXTI_Callback+0x38>
            uint16_t delta = __HAL_TIM_GET_COUNTER(&htim2); // Falling : 시간 측정
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_GPIO_EXTI_Callback+0x44>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	81fb      	strh	r3, [r7, #14]
            check_ir(delta);
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe1c 	bl	8001c3c <check_ir>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020000 	.word	0x40020000
 8002010:	200006a0 	.word	0x200006a0

08002014 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

	NTP_UART_RxCallback(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f863 	bl	80020e8 <NTP_UART_RxCallback>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202e:	b672      	cpsid	i
}
 8002030:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002032:	bf00      	nop
 8002034:	e7fd      	b.n	8002032 <Error_Handler+0x8>
	...

08002038 <NTP_Timer_Init>:
 * @param  huart_esp: ESP 모듈과 연결된 UART 핸들
 * @param  huart_debug: 디버그 출력용 UART 핸들
 * @retval None
 */
void NTP_Timer_Init(UART_HandleTypeDef *huart_esp,
		UART_HandleTypeDef *huart_debug) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
	huart_esp_module = huart_esp;
 8002042:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <NTP_Timer_Init+0x70>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
	huart_debug_module = huart_debug;
 8002048:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <NTP_Timer_Init+0x74>)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6013      	str	r3, [r2, #0]

	// 링 버퍼 초기화
	NTP_RingBuffer_Init(&esp_to_system_buffer);
 800204e:	4818      	ldr	r0, [pc, #96]	@ (80020b0 <NTP_Timer_Init+0x78>)
 8002050:	f000 f888 	bl	8002164 <NTP_RingBuffer_Init>
	NTP_RingBuffer_Init(&system_to_esp_buffer);
 8002054:	4817      	ldr	r0, [pc, #92]	@ (80020b4 <NTP_Timer_Init+0x7c>)
 8002056:	f000 f885 	bl	8002164 <NTP_RingBuffer_Init>

	// 뮤텍스 생성
	const osMutexAttr_t ntp_mutex_attr = { .name = "NTP_Mutex" };
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <NTP_Timer_Init+0x80>)
 800206a:	60bb      	str	r3, [r7, #8]
	NTP_MutexHandle = osMutexNew(&ntp_mutex_attr);
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4618      	mov	r0, r3
 8002072:	f005 f9ed 	bl	8007450 <osMutexNew>
 8002076:	4603      	mov	r3, r0
 8002078:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <NTP_Timer_Init+0x84>)
 800207a:	6013      	str	r3, [r2, #0]

	// UART 수신 인터럽트 시작
	HAL_UART_Receive_IT(huart_esp_module, &uart_esp_rx_data, 1);
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <NTP_Timer_Init+0x70>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	490f      	ldr	r1, [pc, #60]	@ (80020c0 <NTP_Timer_Init+0x88>)
 8002084:	4618      	mov	r0, r3
 8002086:	f004 f8ac 	bl	80061e2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(huart_debug_module, &uart_debug_rx_data, 1);
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <NTP_Timer_Init+0x74>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <NTP_Timer_Init+0x8c>)
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f8a5 	bl	80061e2 <HAL_UART_Receive_IT>

	// 초기화 메시지
	NTP_Debug_Print("NTP Timer initialized\r\n");
 8002098:	480b      	ldr	r0, [pc, #44]	@ (80020c8 <NTP_Timer_Init+0x90>)
 800209a:	f000 f91b 	bl	80022d4 <NTP_Debug_Print>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000178 	.word	0x20000178
 80020ac:	2000017c 	.word	0x2000017c
 80020b0:	20000184 	.word	0x20000184
 80020b4:	20000288 	.word	0x20000288
 80020b8:	0800b53c 	.word	0x0800b53c
 80020bc:	200005ec 	.word	0x200005ec
 80020c0:	20000180 	.word	0x20000180
 80020c4:	20000181 	.word	0x20000181
 80020c8:	0800b548 	.word	0x0800b548

080020cc <NTP_Timer_Task>:
/**
 * @brief  NTP 타이머 태스크
 * @param  argument: 사용하지 않음
 * @retval None
 */
void NTP_Timer_Task(void const *argument) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	for (;;) {
		// ESP 응답 처리
		NTP_ESP_ProcessResponse();
 80020d4:	f000 f990 	bl	80023f8 <NTP_ESP_ProcessResponse>

		// WiFi 상태 머신 실행
		NTP_WiFi_StateMachine();
 80020d8:	f000 fa64 	bl	80025a4 <NTP_WiFi_StateMachine>

		// 100ms 대기
		osDelay(100);
 80020dc:	2064      	movs	r0, #100	@ 0x64
 80020de:	f005 f99c 	bl	800741a <osDelay>
		NTP_ESP_ProcessResponse();
 80020e2:	bf00      	nop
 80020e4:	e7f6      	b.n	80020d4 <NTP_Timer_Task+0x8>
	...

080020e8 <NTP_UART_RxCallback>:
/**
 * @brief  UART 수신 콜백 함수
 * @param  huart: UART 핸들
 * @retval None
 */
void NTP_UART_RxCallback(UART_HandleTypeDef *huart) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart_esp_module->Instance) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b15      	ldr	r3, [pc, #84]	@ (800214c <NTP_UART_RxCallback+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10d      	bne.n	800211a <NTP_UART_RxCallback+0x32>
		// ESP 모듈로부터 수신
		NTP_RingBuffer_Put(&esp_to_system_buffer, uart_esp_rx_data);
 80020fe:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <NTP_UART_RxCallback+0x68>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	4813      	ldr	r0, [pc, #76]	@ (8002154 <NTP_UART_RxCallback+0x6c>)
 8002106:	f000 f83f 	bl	8002188 <NTP_RingBuffer_Put>
		HAL_UART_Receive_IT(huart_esp_module, &uart_esp_rx_data, 1);
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <NTP_UART_RxCallback+0x64>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	490f      	ldr	r1, [pc, #60]	@ (8002150 <NTP_UART_RxCallback+0x68>)
 8002112:	4618      	mov	r0, r3
 8002114:	f004 f865 	bl	80061e2 <HAL_UART_Receive_IT>
	} else if (huart->Instance == huart_debug_module->Instance) {
		// 디버그 포트로부터 수신
		NTP_RingBuffer_Put(&system_to_esp_buffer, uart_debug_rx_data);
		HAL_UART_Receive_IT(huart_debug_module, &uart_debug_rx_data, 1);
	}
}
 8002118:	e013      	b.n	8002142 <NTP_UART_RxCallback+0x5a>
	} else if (huart->Instance == huart_debug_module->Instance) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <NTP_UART_RxCallback+0x70>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d10c      	bne.n	8002142 <NTP_UART_RxCallback+0x5a>
		NTP_RingBuffer_Put(&system_to_esp_buffer, uart_debug_rx_data);
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <NTP_UART_RxCallback+0x74>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	480c      	ldr	r0, [pc, #48]	@ (8002160 <NTP_UART_RxCallback+0x78>)
 8002130:	f000 f82a 	bl	8002188 <NTP_RingBuffer_Put>
		HAL_UART_Receive_IT(huart_debug_module, &uart_debug_rx_data, 1);
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <NTP_UART_RxCallback+0x70>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <NTP_UART_RxCallback+0x74>)
 800213c:	4618      	mov	r0, r3
 800213e:	f004 f850 	bl	80061e2 <HAL_UART_Receive_IT>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000178 	.word	0x20000178
 8002150:	20000180 	.word	0x20000180
 8002154:	20000184 	.word	0x20000184
 8002158:	2000017c 	.word	0x2000017c
 800215c:	20000181 	.word	0x20000181
 8002160:	20000288 	.word	0x20000288

08002164 <NTP_RingBuffer_Init>:
/* Private functions ---------------------------------------------------------*/

/**
 * @brief  링 버퍼 초기화
 */
static void NTP_RingBuffer_Init(NTP_RingBuffer_t *rb) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	rb->tail = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <NTP_RingBuffer_Put>:

/**
 * @brief  링 버퍼에 데이터 추가
 */
static int NTP_RingBuffer_Put(NTP_RingBuffer_t *rb, uint8_t data) {
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
	uint16_t next_head = (rb->head + 1) % 256;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800219a:	b29b      	uxth	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	425a      	negs	r2, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	bf58      	it	pl
 80021a6:	4253      	negpl	r3, r2
 80021a8:	81fb      	strh	r3, [r7, #14]
	if (next_head == rb->tail) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d102      	bne.n	80021be <NTP_RingBuffer_Put+0x36>
		return -1;  // 버퍼 가득참
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	e00c      	b.n	80021d8 <NTP_RingBuffer_Put+0x50>
	}
	rb->buffer[rb->head] = data;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	545a      	strb	r2, [r3, r1]
	rb->head = next_head;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	89fa      	ldrh	r2, [r7, #14]
 80021d2:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	return 0;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <NTP_RingBuffer_Get>:

/**
 * @brief  링 버퍼에서 데이터 가져오기
 */
static int NTP_RingBuffer_Get(NTP_RingBuffer_t *rb, uint8_t *data) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	if (rb->head == rb->tail) {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	429a      	cmp	r2, r3
 8002200:	d102      	bne.n	8002208 <NTP_RingBuffer_Get+0x24>
		return -1;  // 버퍼 비어있음
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e017      	b.n	8002238 <NTP_RingBuffer_Get+0x54>
	}
	*data = rb->buffer[rb->tail];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	5c9a      	ldrb	r2, [r3, r2]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	701a      	strb	r2, [r3, #0]
	rb->tail = (rb->tail + 1) % 256;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002220:	b29b      	uxth	r3, r3
 8002222:	3301      	adds	r3, #1
 8002224:	425a      	negs	r2, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	bf58      	it	pl
 800222c:	4253      	negpl	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <NTP_ESP_SendString>:

/**
 * @brief  ESP 모듈에 문자열 전송
 */
static void NTP_ESP_SendString(const char *str) {
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b0c3      	sub	sp, #268	@ 0x10c
 8002248:	af00      	add	r7, sp, #0
 800224a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800224e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002252:	6018      	str	r0, [r3, #0]
#if NTP_DEBUG_MODE
	char tx_buf[128];
	sprintf(tx_buf, ">> %s\r\n", str);
 8002254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800225c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4918      	ldr	r1, [pc, #96]	@ (80022c4 <NTP_ESP_SendString+0x80>)
 8002264:	f008 fb7e 	bl	800a964 <siprintf>
	HAL_UART_Transmit(huart_debug_module, (uint8_t*) tx_buf, strlen(tx_buf),
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <NTP_ESP_SendString+0x84>)
 800226a:	681c      	ldr	r4, [r3, #0]
 800226c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd ffb5 	bl	80001e0 <strlen>
 8002276:	4603      	mov	r3, r0
 8002278:	b29a      	uxth	r2, r3
 800227a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800227e:	2364      	movs	r3, #100	@ 0x64
 8002280:	4620      	mov	r0, r4
 8002282:	f003 ff23 	bl	80060cc <HAL_UART_Transmit>
			100);
#endif

	char cmd_buf[128];
	sprintf(cmd_buf, "%s\r\n", str);
 8002286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800228a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800228e:	f107 0008 	add.w	r0, r7, #8
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	490d      	ldr	r1, [pc, #52]	@ (80022cc <NTP_ESP_SendString+0x88>)
 8002296:	f008 fb65 	bl	800a964 <siprintf>
	HAL_UART_Transmit(huart_esp_module, (uint8_t*) cmd_buf, strlen(cmd_buf),
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <NTP_ESP_SendString+0x8c>)
 800229c:	681c      	ldr	r4, [r3, #0]
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fd ff9c 	bl	80001e0 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	f107 0108 	add.w	r1, r7, #8
 80022b0:	2364      	movs	r3, #100	@ 0x64
 80022b2:	4620      	mov	r0, r4
 80022b4:	f003 ff0a 	bl	80060cc <HAL_UART_Transmit>
			100);
}
 80022b8:	bf00      	nop
 80022ba:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800b5b4 	.word	0x0800b5b4
 80022c8:	2000017c 	.word	0x2000017c
 80022cc:	0800b5bc 	.word	0x0800b5bc
 80022d0:	20000178 	.word	0x20000178

080022d4 <NTP_Debug_Print>:

/**
 * @brief  디버그 메시지 출력
 */
static void NTP_Debug_Print(const char *msg) {
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
#if NTP_DEBUG_MODE
	const char *prefix = "--ntp-debug :: ";
 80022dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <NTP_Debug_Print+0x44>)
 80022de:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(huart_debug_module, (uint8_t*) prefix, strlen(prefix),
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <NTP_Debug_Print+0x48>)
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7fd ff7b 	bl	80001e0 <strlen>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	2364      	movs	r3, #100	@ 0x64
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	4620      	mov	r0, r4
 80022f4:	f003 feea 	bl	80060cc <HAL_UART_Transmit>
			100);
	HAL_UART_Transmit(huart_debug_module, (uint8_t*) msg, strlen(msg), 100);
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <NTP_Debug_Print+0x48>)
 80022fa:	681c      	ldr	r4, [r3, #0]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fd ff6f 	bl	80001e0 <strlen>
 8002302:	4603      	mov	r3, r0
 8002304:	b29a      	uxth	r2, r3
 8002306:	2364      	movs	r3, #100	@ 0x64
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4620      	mov	r0, r4
 800230c:	f003 fede 	bl	80060cc <HAL_UART_Transmit>
#endif
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	0800b5c4 	.word	0x0800b5c4
 800231c:	2000017c 	.word	0x2000017c

08002320 <NTP_ESP_CheckResponse>:

/**
 * @brief  ESP 응답 확인
 */
static int NTP_ESP_CheckResponse(const char *expected_response) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b0ce      	sub	sp, #312	@ 0x138
 8002324:	af00      	add	r7, sp, #0
 8002326:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800232a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800232e:	6018      	str	r0, [r3, #0]
	if (strstr(ntp_esp_response_buffer, expected_response) != NULL) {
 8002330:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002334:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	4821      	ldr	r0, [pc, #132]	@ (80023c0 <NTP_ESP_CheckResponse+0xa0>)
 800233c:	f008 fb56 	bl	800a9ec <strstr>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <NTP_ESP_CheckResponse+0x48>
		char check_msg[200];
		sprintf(check_msg, "Response check PASS: '%s' found in buffer\r\n",
 8002346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800234a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800234e:	f107 0008 	add.w	r0, r7, #8
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	491b      	ldr	r1, [pc, #108]	@ (80023c4 <NTP_ESP_CheckResponse+0xa4>)
 8002356:	f008 fb05 	bl	800a964 <siprintf>
				expected_response);
		NTP_Debug_Print(check_msg);
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ffb8 	bl	80022d4 <NTP_Debug_Print>
		return 1;
 8002364:	2301      	movs	r3, #1
 8002366:	e026      	b.n	80023b6 <NTP_ESP_CheckResponse+0x96>
	}

	// 주기적으로 현재 응답 버퍼 상태를 출력 (너무 자주 출력하지 않도록 제한)
	static uint32_t last_buffer_print = 0;
	uint32_t current_time_buffer = osKernelSysTick();
 8002368:	f004 ff8c 	bl	8007284 <osKernelGetSysTimerCount>
 800236c:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
	if (current_time_buffer - last_buffer_print > 5000
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <NTP_ESP_CheckResponse+0xa8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d918      	bls.n	80023b4 <NTP_ESP_CheckResponse+0x94>
			&& ntp_esp_response_index > 0) { // 10초마다
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <NTP_ESP_CheckResponse+0xac>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <NTP_ESP_CheckResponse+0x94>
		char buffer_msg[300];
		sprintf(buffer_msg,
 800238c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002390:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8002394:	f107 0008 	add.w	r0, r7, #8
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <NTP_ESP_CheckResponse+0xa0>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <NTP_ESP_CheckResponse+0xb0>)
 800239e:	f008 fae1 	bl	800a964 <siprintf>
				"Current ESP buffer (waiting for '%s'): %.100s...\r\n",
				expected_response, ntp_esp_response_buffer);
		NTP_Debug_Print(buffer_msg);
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff94 	bl	80022d4 <NTP_Debug_Print>
		last_buffer_print = current_time_buffer;
 80023ac:	4a06      	ldr	r2, [pc, #24]	@ (80023c8 <NTP_ESP_CheckResponse+0xa8>)
 80023ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80023b2:	6013      	str	r3, [r2, #0]
	}

	return 0;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000039c 	.word	0x2000039c
 80023c4:	0800b5d4 	.word	0x0800b5d4
 80023c8:	200005f0 	.word	0x200005f0
 80023cc:	2000059c 	.word	0x2000059c
 80023d0:	0800b600 	.word	0x0800b600

080023d4 <NTP_ESP_ClearResponseBuffer>:

/**
 * @brief  ESP 응답 버퍼 클리어
 */
static void NTP_ESP_ClearResponseBuffer(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	memset(ntp_esp_response_buffer, 0, sizeof(ntp_esp_response_buffer));
 80023d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023dc:	2100      	movs	r1, #0
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <NTP_ESP_ClearResponseBuffer+0x1c>)
 80023e0:	f008 fafc 	bl	800a9dc <memset>
	ntp_esp_response_index = 0;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <NTP_ESP_ClearResponseBuffer+0x20>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000039c 	.word	0x2000039c
 80023f4:	2000059c 	.word	0x2000059c

080023f8 <NTP_ESP_ProcessResponse>:

/**
 * @brief  ESP 응답 처리 (외부 호출 가능)
 */
void NTP_ESP_ProcessResponse(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0a8      	sub	sp, #160	@ 0xa0
 80023fc:	af00      	add	r7, sp, #0
	static uint8_t ipd_detected = 0;
	static uint8_t ipd_data_count = 0;
	static char debug_buffer[128];
	static uint8_t debug_index = 0;

	while (NTP_RingBuffer_Get(&esp_to_system_buffer, &data) == 0) {
 80023fe:	e0a6      	b.n	800254e <NTP_ESP_ProcessResponse+0x156>
		// 실시간 ESP 응답 디버그 출력을 위한 버퍼 관리
		if (data == '\r' || data == '\n') {
 8002400:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8002404:	2b0d      	cmp	r3, #13
 8002406:	d003      	beq.n	8002410 <NTP_ESP_ProcessResponse+0x18>
 8002408:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800240c:	2b0a      	cmp	r3, #10
 800240e:	d117      	bne.n	8002440 <NTP_ESP_ProcessResponse+0x48>
			if (debug_index > 0) {
 8002410:	4b56      	ldr	r3, [pc, #344]	@ (800256c <NTP_ESP_ProcessResponse+0x174>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <NTP_ESP_ProcessResponse+0x66>
				debug_buffer[debug_index] = '\0';
 8002418:	4b54      	ldr	r3, [pc, #336]	@ (800256c <NTP_ESP_ProcessResponse+0x174>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b54      	ldr	r3, [pc, #336]	@ (8002570 <NTP_ESP_ProcessResponse+0x178>)
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
				char esp_debug_msg[150];
				sprintf(esp_debug_msg, "<< ESP: %s\r\n", debug_buffer);
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4a52      	ldr	r2, [pc, #328]	@ (8002570 <NTP_ESP_ProcessResponse+0x178>)
 8002428:	4952      	ldr	r1, [pc, #328]	@ (8002574 <NTP_ESP_ProcessResponse+0x17c>)
 800242a:	4618      	mov	r0, r3
 800242c:	f008 fa9a 	bl	800a964 <siprintf>
				NTP_Debug_Print(esp_debug_msg);
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff4e 	bl	80022d4 <NTP_Debug_Print>
				debug_index = 0;
 8002438:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <NTP_ESP_ProcessResponse+0x174>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
			if (debug_index > 0) {
 800243e:	e00e      	b.n	800245e <NTP_ESP_ProcessResponse+0x66>
			}
		} else if (debug_index < sizeof(debug_buffer) - 1) {
 8002440:	4b4a      	ldr	r3, [pc, #296]	@ (800256c <NTP_ESP_ProcessResponse+0x174>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b7e      	cmp	r3, #126	@ 0x7e
 8002446:	d80a      	bhi.n	800245e <NTP_ESP_ProcessResponse+0x66>
			debug_buffer[debug_index++] = data;
 8002448:	4b48      	ldr	r3, [pc, #288]	@ (800256c <NTP_ESP_ProcessResponse+0x174>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	b2d1      	uxtb	r1, r2
 8002450:	4a46      	ldr	r2, [pc, #280]	@ (800256c <NTP_ESP_ProcessResponse+0x174>)
 8002452:	7011      	strb	r1, [r2, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	f897 109d 	ldrb.w	r1, [r7, #157]	@ 0x9d
 800245a:	4b45      	ldr	r3, [pc, #276]	@ (8002570 <NTP_ESP_ProcessResponse+0x178>)
 800245c:	5499      	strb	r1, [r3, r2]
		}

		// NTP 데이터 수신 중인지 확인
		if (ipd_detected && ipd_data_count < 48) {
 800245e:	4b46      	ldr	r3, [pc, #280]	@ (8002578 <NTP_ESP_ProcessResponse+0x180>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01f      	beq.n	80024a6 <NTP_ESP_ProcessResponse+0xae>
 8002466:	4b45      	ldr	r3, [pc, #276]	@ (800257c <NTP_ESP_ProcessResponse+0x184>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b2f      	cmp	r3, #47	@ 0x2f
 800246c:	d81b      	bhi.n	80024a6 <NTP_ESP_ProcessResponse+0xae>
			ntp_response_data[ipd_data_count++] = data;
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <NTP_ESP_ProcessResponse+0x184>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	b2d1      	uxtb	r1, r2
 8002476:	4a41      	ldr	r2, [pc, #260]	@ (800257c <NTP_ESP_ProcessResponse+0x184>)
 8002478:	7011      	strb	r1, [r2, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	f897 109d 	ldrb.w	r1, [r7, #157]	@ 0x9d
 8002480:	4b3f      	ldr	r3, [pc, #252]	@ (8002580 <NTP_ESP_ProcessResponse+0x188>)
 8002482:	5499      	strb	r1, [r3, r2]
			if (ipd_data_count >= 48) {
 8002484:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <NTP_ESP_ProcessResponse+0x184>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b2f      	cmp	r3, #47	@ 0x2f
 800248a:	d95f      	bls.n	800254c <NTP_ESP_ProcessResponse+0x154>
				ntp_data_received = 1;
 800248c:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <NTP_ESP_ProcessResponse+0x18c>)
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
				ipd_detected = 0;
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <NTP_ESP_ProcessResponse+0x180>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
				ipd_data_count = 0;
 8002498:	4b38      	ldr	r3, [pc, #224]	@ (800257c <NTP_ESP_ProcessResponse+0x184>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print(
 800249e:	483a      	ldr	r0, [pc, #232]	@ (8002588 <NTP_ESP_ProcessResponse+0x190>)
 80024a0:	f7ff ff18 	bl	80022d4 <NTP_Debug_Print>
						"<< ESP: NTP data packet received (48 bytes)\r\n");
			}
			continue;
 80024a4:	e052      	b.n	800254c <NTP_ESP_ProcessResponse+0x154>
		}

		// 응답 버퍼에 저장
		if (ntp_esp_response_index < sizeof(ntp_esp_response_buffer) - 1) {
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 80024b0:	d812      	bhi.n	80024d8 <NTP_ESP_ProcessResponse+0xe0>
			ntp_esp_response_buffer[ntp_esp_response_index++] = data;
 80024b2:	4b36      	ldr	r3, [pc, #216]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	b291      	uxth	r1, r2
 80024bc:	4a33      	ldr	r2, [pc, #204]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 80024be:	8011      	strh	r1, [r2, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f897 109d 	ldrb.w	r1, [r7, #157]	@ 0x9d
 80024c6:	4b32      	ldr	r3, [pc, #200]	@ (8002590 <NTP_ESP_ProcessResponse+0x198>)
 80024c8:	5499      	strb	r1, [r3, r2]
			ntp_esp_response_buffer[ntp_esp_response_index] = '\0';
 80024ca:	4b30      	ldr	r3, [pc, #192]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002590 <NTP_ESP_ProcessResponse+0x198>)
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]
		}

		// "+IPD,4,48:" 패턴 감지
		if (strstr(ntp_esp_response_buffer, "+IPD,4,48:") != NULL
 80024d8:	492e      	ldr	r1, [pc, #184]	@ (8002594 <NTP_ESP_ProcessResponse+0x19c>)
 80024da:	482d      	ldr	r0, [pc, #180]	@ (8002590 <NTP_ESP_ProcessResponse+0x198>)
 80024dc:	f008 fa86 	bl	800a9ec <strstr>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <NTP_ESP_ProcessResponse+0x10e>
				&& !ipd_detected) {
 80024e6:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <NTP_ESP_ProcessResponse+0x180>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10b      	bne.n	8002506 <NTP_ESP_ProcessResponse+0x10e>
			ipd_detected = 1;
 80024ee:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <NTP_ESP_ProcessResponse+0x180>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
			ipd_data_count = 0;
 80024f4:	4b21      	ldr	r3, [pc, #132]	@ (800257c <NTP_ESP_ProcessResponse+0x184>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
			ntp_data_received = 0;
 80024fa:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <NTP_ESP_ProcessResponse+0x18c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
			NTP_Debug_Print(
 8002500:	4825      	ldr	r0, [pc, #148]	@ (8002598 <NTP_ESP_ProcessResponse+0x1a0>)
 8002502:	f7ff fee7 	bl	80022d4 <NTP_Debug_Print>
					"<< ESP: IPD pattern detected, expecting NTP data\r\n");
		}

		// 버퍼가 가득 차면 절반 삭제
		if (ntp_esp_response_index >= sizeof(ntp_esp_response_buffer) - 1) {
 8002506:	4b21      	ldr	r3, [pc, #132]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8002510:	d91d      	bls.n	800254e <NTP_ESP_ProcessResponse+0x156>
			uint16_t half_size = sizeof(ntp_esp_response_buffer) / 2;
 8002512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002516:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
			NTP_Debug_Print("ESP response buffer overflow, clearing half\r\n");
 800251a:	4820      	ldr	r0, [pc, #128]	@ (800259c <NTP_ESP_ProcessResponse+0x1a4>)
 800251c:	f7ff feda 	bl	80022d4 <NTP_Debug_Print>
			memmove(ntp_esp_response_buffer,
 8002520:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002524:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <NTP_ESP_ProcessResponse+0x198>)
 8002526:	4413      	add	r3, r2
 8002528:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 800252c:	4619      	mov	r1, r3
 800252e:	4818      	ldr	r0, [pc, #96]	@ (8002590 <NTP_ESP_ProcessResponse+0x198>)
 8002530:	f008 fa3a 	bl	800a9a8 <memmove>
					ntp_esp_response_buffer + half_size, half_size);
			ntp_esp_response_index = half_size;
 8002534:	4a15      	ldr	r2, [pc, #84]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 8002536:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800253a:	8013      	strh	r3, [r2, #0]
			ntp_esp_response_buffer[ntp_esp_response_index] = '\0';
 800253c:	4b13      	ldr	r3, [pc, #76]	@ (800258c <NTP_ESP_ProcessResponse+0x194>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <NTP_ESP_ProcessResponse+0x198>)
 8002546:	2100      	movs	r1, #0
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	e000      	b.n	800254e <NTP_ESP_ProcessResponse+0x156>
			continue;
 800254c:	bf00      	nop
	while (NTP_RingBuffer_Get(&esp_to_system_buffer, &data) == 0) {
 800254e:	f107 039d 	add.w	r3, r7, #157	@ 0x9d
 8002552:	4619      	mov	r1, r3
 8002554:	4812      	ldr	r0, [pc, #72]	@ (80025a0 <NTP_ESP_ProcessResponse+0x1a8>)
 8002556:	f7ff fe45 	bl	80021e4 <NTP_RingBuffer_Get>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f43f af4f 	beq.w	8002400 <NTP_ESP_ProcessResponse+0x8>
		}
	}
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	37a0      	adds	r7, #160	@ 0xa0
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200005f4 	.word	0x200005f4
 8002570:	200005f8 	.word	0x200005f8
 8002574:	0800b634 	.word	0x0800b634
 8002578:	20000678 	.word	0x20000678
 800257c:	20000679 	.word	0x20000679
 8002580:	200005a0 	.word	0x200005a0
 8002584:	200005d0 	.word	0x200005d0
 8002588:	0800b644 	.word	0x0800b644
 800258c:	2000059c 	.word	0x2000059c
 8002590:	2000039c 	.word	0x2000039c
 8002594:	0800b674 	.word	0x0800b674
 8002598:	0800b680 	.word	0x0800b680
 800259c:	0800b6b4 	.word	0x0800b6b4
 80025a0:	20000184 	.word	0x20000184

080025a4 <NTP_WiFi_StateMachine>:

/**
 * @brief  WiFi 상태 머신 (외부 호출 가능)
 */
void NTP_WiFi_StateMachine(void) {
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b0b3      	sub	sp, #204	@ 0xcc
 80025a8:	af04      	add	r7, sp, #16
	uint32_t current_time = osKernelSysTick();
 80025aa:	f004 fe6b 	bl	8007284 <osKernelGetSysTimerCount>
 80025ae:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	static NTP_WiFiState_t last_state = NTP_WIFI_INIT;
	static uint8_t init_done = 0;

	// 초기화
	if (!init_done) {
 80025b2:	4bb0      	ldr	r3, [pc, #704]	@ (8002874 <NTP_WiFi_StateMachine+0x2d0>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d120      	bne.n	80025fc <NTP_WiFi_StateMachine+0x58>
		NTP_Debug_Print("ESP-01 initializing...\r\n");
 80025ba:	48af      	ldr	r0, [pc, #700]	@ (8002878 <NTP_WiFi_StateMachine+0x2d4>)
 80025bc:	f7ff fe8a 	bl	80022d4 <NTP_Debug_Print>
		NTP_ESP_SendString("AT+RST");
 80025c0:	48ae      	ldr	r0, [pc, #696]	@ (800287c <NTP_WiFi_StateMachine+0x2d8>)
 80025c2:	f7ff fe3f 	bl	8002244 <NTP_ESP_SendString>
		osDelay(5000);
 80025c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80025ca:	f004 ff26 	bl	800741a <osDelay>
		NTP_ESP_ClearResponseBuffer();
 80025ce:	f7ff ff01 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
		NTP_ESP_SendString("AT");
 80025d2:	48ab      	ldr	r0, [pc, #684]	@ (8002880 <NTP_WiFi_StateMachine+0x2dc>)
 80025d4:	f7ff fe36 	bl	8002244 <NTP_ESP_SendString>
		ntp_wifi_state = NTP_WIFI_INIT;
 80025d8:	4baa      	ldr	r3, [pc, #680]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
		ntp_command_timer = current_time;
 80025de:	4aaa      	ldr	r2, [pc, #680]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 80025e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025e4:	6013      	str	r3, [r2, #0]
		ntp_retry_count = 0;
 80025e6:	4ba9      	ldr	r3, [pc, #676]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
		ntp_state_executed = 0;
 80025ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002890 <NTP_WiFi_StateMachine+0x2ec>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
		init_done = 1;
 80025f2:	4ba0      	ldr	r3, [pc, #640]	@ (8002874 <NTP_WiFi_StateMachine+0x2d0>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
		return;
 80025f8:	f000 bcef 	b.w	8002fda <NTP_WiFi_StateMachine+0xa36>
	}

	// 상태 변경 시 플래그 리셋
	if (ntp_wifi_state != last_state) {
 80025fc:	4ba1      	ldr	r3, [pc, #644]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4ba4      	ldr	r3, [pc, #656]	@ (8002894 <NTP_WiFi_StateMachine+0x2f0>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d010      	beq.n	800262c <NTP_WiFi_StateMachine+0x88>
		ntp_state_executed = 0;
 800260a:	4ba1      	ldr	r3, [pc, #644]	@ (8002890 <NTP_WiFi_StateMachine+0x2ec>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
		last_state = ntp_wifi_state;
 8002610:	4b9c      	ldr	r3, [pc, #624]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b9f      	ldr	r3, [pc, #636]	@ (8002894 <NTP_WiFi_StateMachine+0x2f0>)
 8002618:	701a      	strb	r2, [r3, #0]
		NTP_Debug_Print("State Changed. wait for 1000.\r\n");
 800261a:	489f      	ldr	r0, [pc, #636]	@ (8002898 <NTP_WiFi_StateMachine+0x2f4>)
 800261c:	f7ff fe5a 	bl	80022d4 <NTP_Debug_Print>
		osDelay(500);
 8002620:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002624:	f004 fef9 	bl	800741a <osDelay>
		NTP_ESP_ProcessResponse();
 8002628:	f7ff fee6 	bl	80023f8 <NTP_ESP_ProcessResponse>
	}

	switch (ntp_wifi_state) {
 800262c:	4b95      	ldr	r3, [pc, #596]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	f200 8496 	bhi.w	8002f64 <NTP_WiFi_StateMachine+0x9c0>
 8002638:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <NTP_WiFi_StateMachine+0x9c>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	0800266d 	.word	0x0800266d
 8002644:	08002709 	.word	0x08002709
 8002648:	080027a9 	.word	0x080027a9
 800264c:	0800283b 	.word	0x0800283b
 8002650:	080028e5 	.word	0x080028e5
 8002654:	08002985 	.word	0x08002985
 8002658:	08002a8b 	.word	0x08002a8b
 800265c:	08002acf 	.word	0x08002acf
 8002660:	08002f65 	.word	0x08002f65
 8002664:	08002f65 	.word	0x08002f65
 8002668:	08002f1f 	.word	0x08002f1f
	case NTP_WIFI_INIT:
		if (NTP_ESP_CheckResponse("OK")) {
 800266c:	488b      	ldr	r0, [pc, #556]	@ (800289c <NTP_WiFi_StateMachine+0x2f8>)
 800266e:	f7ff fe57 	bl	8002320 <NTP_ESP_CheckResponse>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <NTP_WiFi_StateMachine+0xfc>
			NTP_Debug_Print("ESP AT command OK\r\n");
 8002678:	4889      	ldr	r0, [pc, #548]	@ (80028a0 <NTP_WiFi_StateMachine+0x2fc>)
 800267a:	f7ff fe2b 	bl	80022d4 <NTP_Debug_Print>
			NTP_ESP_ClearResponseBuffer();
 800267e:	f7ff fea9 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			NTP_ESP_SendString("AT+CWMODE=1");
 8002682:	4888      	ldr	r0, [pc, #544]	@ (80028a4 <NTP_WiFi_StateMachine+0x300>)
 8002684:	f7ff fdde 	bl	8002244 <NTP_ESP_SendString>
			ntp_wifi_state = NTP_WIFI_IDLE;
 8002688:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
			ntp_command_timer = current_time;
 800268e:	4a7e      	ldr	r2, [pc, #504]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 8002690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002694:	6013      	str	r3, [r2, #0]
			ntp_retry_count = 0;
 8002696:	4b7d      	ldr	r3, [pc, #500]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
				osDelay(5000);
				NTP_ESP_ClearResponseBuffer();
				ntp_command_timer = current_time;
			}
		}
		break;
 800269c:	f000 bc66 	b.w	8002f6c <NTP_WiFi_StateMachine+0x9c8>
		} else if (current_time - ntp_command_timer >
 80026a0:	4b79      	ldr	r3, [pc, #484]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f240 845c 	bls.w	8002f6c <NTP_WiFi_StateMachine+0x9c8>
			if (ntp_retry_count < NTP_MAX_RETRY) {
 80026b4:	4b75      	ldr	r3, [pc, #468]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d813      	bhi.n	80026e4 <NTP_WiFi_StateMachine+0x140>
				ntp_retry_count++;
 80026bc:	4b73      	ldr	r3, [pc, #460]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b71      	ldr	r3, [pc, #452]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80026c6:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("ESP AT command retry...\r\n");
 80026c8:	4877      	ldr	r0, [pc, #476]	@ (80028a8 <NTP_WiFi_StateMachine+0x304>)
 80026ca:	f7ff fe03 	bl	80022d4 <NTP_Debug_Print>
				NTP_ESP_ClearResponseBuffer();
 80026ce:	f7ff fe81 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_ESP_SendString("AT");
 80026d2:	486b      	ldr	r0, [pc, #428]	@ (8002880 <NTP_WiFi_StateMachine+0x2dc>)
 80026d4:	f7ff fdb6 	bl	8002244 <NTP_ESP_SendString>
				ntp_command_timer = current_time;
 80026d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 80026da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026de:	6013      	str	r3, [r2, #0]
		break;
 80026e0:	f000 bc44 	b.w	8002f6c <NTP_WiFi_StateMachine+0x9c8>
				NTP_Debug_Print("ESP initialization failed\r\n");
 80026e4:	4871      	ldr	r0, [pc, #452]	@ (80028ac <NTP_WiFi_StateMachine+0x308>)
 80026e6:	f7ff fdf5 	bl	80022d4 <NTP_Debug_Print>
				ntp_retry_count = 0;
 80026ea:	4b68      	ldr	r3, [pc, #416]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
				osDelay(5000);
 80026f0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80026f4:	f004 fe91 	bl	800741a <osDelay>
				NTP_ESP_ClearResponseBuffer();
 80026f8:	f7ff fe6c 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				ntp_command_timer = current_time;
 80026fc:	4a62      	ldr	r2, [pc, #392]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 80026fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002702:	6013      	str	r3, [r2, #0]
		break;
 8002704:	f000 bc32 	b.w	8002f6c <NTP_WiFi_StateMachine+0x9c8>

	case NTP_WIFI_IDLE:
		if (NTP_ESP_CheckResponse("OK")) {
 8002708:	4864      	ldr	r0, [pc, #400]	@ (800289c <NTP_WiFi_StateMachine+0x2f8>)
 800270a:	f7ff fe09 	bl	8002320 <NTP_ESP_CheckResponse>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01a      	beq.n	800274a <NTP_WiFi_StateMachine+0x1a6>
			NTP_Debug_Print("Station mode set successfully\r\n");
 8002714:	4866      	ldr	r0, [pc, #408]	@ (80028b0 <NTP_WiFi_StateMachine+0x30c>)
 8002716:	f7ff fddd 	bl	80022d4 <NTP_Debug_Print>
			NTP_ESP_ClearResponseBuffer();
 800271a:	f7ff fe5b 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			char cmd[128];
			sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"", WIFI_SSID,
 800271e:	1d38      	adds	r0, r7, #4
 8002720:	4b64      	ldr	r3, [pc, #400]	@ (80028b4 <NTP_WiFi_StateMachine+0x310>)
 8002722:	4a65      	ldr	r2, [pc, #404]	@ (80028b8 <NTP_WiFi_StateMachine+0x314>)
 8002724:	4965      	ldr	r1, [pc, #404]	@ (80028bc <NTP_WiFi_StateMachine+0x318>)
 8002726:	f008 f91d 	bl	800a964 <siprintf>
			WIFI_PASSWORD);
			NTP_ESP_SendString(cmd);
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fd89 	bl	8002244 <NTP_ESP_SendString>
			ntp_wifi_state = NTP_WIFI_CONNECTING;
 8002732:	4b54      	ldr	r3, [pc, #336]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]
			ntp_command_timer = current_time;
 8002738:	4a53      	ldr	r2, [pc, #332]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 800273a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800273e:	6013      	str	r3, [r2, #0]
			NTP_Debug_Print("WiFi connecting...\r\n");
 8002740:	485f      	ldr	r0, [pc, #380]	@ (80028c0 <NTP_WiFi_StateMachine+0x31c>)
 8002742:	f7ff fdc7 	bl	80022d4 <NTP_Debug_Print>
				ntp_wifi_state = NTP_WIFI_INIT;
				ntp_retry_count = 0;
				osDelay(5000);
			}
		}
		break;
 8002746:	f000 bc13 	b.w	8002f70 <NTP_WiFi_StateMachine+0x9cc>
		} else if (current_time - ntp_command_timer >
 800274a:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002758:	4293      	cmp	r3, r2
 800275a:	f240 8409 	bls.w	8002f70 <NTP_WiFi_StateMachine+0x9cc>
			if (ntp_retry_count < NTP_MAX_RETRY) {
 800275e:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d812      	bhi.n	800278c <NTP_WiFi_StateMachine+0x1e8>
				ntp_retry_count++;
 8002766:	4b49      	ldr	r3, [pc, #292]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b47      	ldr	r3, [pc, #284]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 8002770:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("Station mode retry...\r\n");
 8002772:	4854      	ldr	r0, [pc, #336]	@ (80028c4 <NTP_WiFi_StateMachine+0x320>)
 8002774:	f7ff fdae 	bl	80022d4 <NTP_Debug_Print>
				NTP_ESP_ClearResponseBuffer();
 8002778:	f7ff fe2c 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_ESP_SendString("AT+CWMODE=1");
 800277c:	4849      	ldr	r0, [pc, #292]	@ (80028a4 <NTP_WiFi_StateMachine+0x300>)
 800277e:	f7ff fd61 	bl	8002244 <NTP_ESP_SendString>
				ntp_command_timer = current_time;
 8002782:	4a41      	ldr	r2, [pc, #260]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 8002784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002788:	6013      	str	r3, [r2, #0]
		break;
 800278a:	e3f1      	b.n	8002f70 <NTP_WiFi_StateMachine+0x9cc>
				NTP_Debug_Print("Station mode failed\r\n");
 800278c:	484e      	ldr	r0, [pc, #312]	@ (80028c8 <NTP_WiFi_StateMachine+0x324>)
 800278e:	f7ff fda1 	bl	80022d4 <NTP_Debug_Print>
				ntp_wifi_state = NTP_WIFI_INIT;
 8002792:	4b3c      	ldr	r3, [pc, #240]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
				ntp_retry_count = 0;
 8002798:	4b3c      	ldr	r3, [pc, #240]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
				osDelay(5000);
 800279e:	f241 3088 	movw	r0, #5000	@ 0x1388
 80027a2:	f004 fe3a 	bl	800741a <osDelay>
		break;
 80027a6:	e3e3      	b.n	8002f70 <NTP_WiFi_StateMachine+0x9cc>

	case NTP_WIFI_CONNECTING:
		if (NTP_ESP_CheckResponse("WIFI GOT IP")) {
 80027a8:	4848      	ldr	r0, [pc, #288]	@ (80028cc <NTP_WiFi_StateMachine+0x328>)
 80027aa:	f7ff fdb9 	bl	8002320 <NTP_ESP_CheckResponse>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <NTP_WiFi_StateMachine+0x228>
			NTP_Debug_Print("WiFi connected successfully!\r\n");
 80027b4:	4846      	ldr	r0, [pc, #280]	@ (80028d0 <NTP_WiFi_StateMachine+0x32c>)
 80027b6:	f7ff fd8d 	bl	80022d4 <NTP_Debug_Print>
			ntp_wifi_state = NTP_WIFI_CONNECTED;
 80027ba:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 80027bc:	2203      	movs	r2, #3
 80027be:	701a      	strb	r2, [r3, #0]
			ntp_retry_count = 0;
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
			NTP_ESP_ClearResponseBuffer();
 80027c6:	f7ff fe05 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_Debug_Print("WiFi connection failed\r\n");
				ntp_retry_count = 0;
				osDelay(5000);
			}
		}
		break;
 80027ca:	e3d3      	b.n	8002f74 <NTP_WiFi_StateMachine+0x9d0>
		} else if (current_time - ntp_command_timer >
 80027cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80027da:	4293      	cmp	r3, r2
 80027dc:	f240 83ca 	bls.w	8002f74 <NTP_WiFi_StateMachine+0x9d0>
			if (ntp_retry_count < NTP_MAX_RETRY) {
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d81d      	bhi.n	8002824 <NTP_WiFi_StateMachine+0x280>
				ntp_retry_count++;
 80027e8:	4b28      	ldr	r3, [pc, #160]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b26      	ldr	r3, [pc, #152]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 80027f2:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("WiFi connection retry...\r\n");
 80027f4:	4837      	ldr	r0, [pc, #220]	@ (80028d4 <NTP_WiFi_StateMachine+0x330>)
 80027f6:	f7ff fd6d 	bl	80022d4 <NTP_Debug_Print>
				NTP_ESP_ClearResponseBuffer();
 80027fa:	f7ff fdeb 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"", WIFI_SSID,
 80027fe:	1d38      	adds	r0, r7, #4
 8002800:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <NTP_WiFi_StateMachine+0x310>)
 8002802:	4a2d      	ldr	r2, [pc, #180]	@ (80028b8 <NTP_WiFi_StateMachine+0x314>)
 8002804:	492d      	ldr	r1, [pc, #180]	@ (80028bc <NTP_WiFi_StateMachine+0x318>)
 8002806:	f008 f8ad 	bl	800a964 <siprintf>
				osDelay(5000);
 800280a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800280e:	f004 fe04 	bl	800741a <osDelay>
				NTP_ESP_SendString(cmd);
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fd15 	bl	8002244 <NTP_ESP_SendString>
				ntp_command_timer = current_time;
 800281a:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 800281c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002820:	6013      	str	r3, [r2, #0]
		break;
 8002822:	e3a7      	b.n	8002f74 <NTP_WiFi_StateMachine+0x9d0>
				NTP_Debug_Print("WiFi connection failed\r\n");
 8002824:	482c      	ldr	r0, [pc, #176]	@ (80028d8 <NTP_WiFi_StateMachine+0x334>)
 8002826:	f7ff fd55 	bl	80022d4 <NTP_Debug_Print>
				ntp_retry_count = 0;
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <NTP_WiFi_StateMachine+0x2e8>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
				osDelay(5000);
 8002830:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002834:	f004 fdf1 	bl	800741a <osDelay>
		break;
 8002838:	e39c      	b.n	8002f74 <NTP_WiFi_StateMachine+0x9d0>

	case NTP_WIFI_CONNECTED:
		if (!ntp_state_executed) {
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <NTP_WiFi_StateMachine+0x2ec>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 83c0 	bne.w	8002fc4 <NTP_WiFi_StateMachine+0xa20>
			// WiFi 연결 상태 확인 후 다음 단계 진행
			//NTP_ESP_SendString("AT+CWJAP?");
			NTP_ESP_ClearResponseBuffer();
 8002844:	f7ff fdc6 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			NTP_ESP_SendString("AT+CIPMUX=1");
 8002848:	4824      	ldr	r0, [pc, #144]	@ (80028dc <NTP_WiFi_StateMachine+0x338>)
 800284a:	f7ff fcfb 	bl	8002244 <NTP_ESP_SendString>
			osDelay(2000);
 800284e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002852:	f004 fde2 	bl	800741a <osDelay>
			ntp_wifi_state = NTP_CIPMUX_SETTING;
 8002856:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <NTP_WiFi_StateMachine+0x2e0>)
 8002858:	2204      	movs	r2, #4
 800285a:	701a      	strb	r2, [r3, #0]
			ntp_command_timer = current_time;
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <NTP_WiFi_StateMachine+0x2e4>)
 800285e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002862:	6013      	str	r3, [r2, #0]
			NTP_Debug_Print("Setting CIPMUX mode...\r\n");
 8002864:	481e      	ldr	r0, [pc, #120]	@ (80028e0 <NTP_WiFi_StateMachine+0x33c>)
 8002866:	f7ff fd35 	bl	80022d4 <NTP_Debug_Print>
			ntp_state_executed = 1;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <NTP_WiFi_StateMachine+0x2ec>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002870:	e3a8      	b.n	8002fc4 <NTP_WiFi_StateMachine+0xa20>
 8002872:	bf00      	nop
 8002874:	2000067a 	.word	0x2000067a
 8002878:	0800b6e4 	.word	0x0800b6e4
 800287c:	0800b700 	.word	0x0800b700
 8002880:	0800b708 	.word	0x0800b708
 8002884:	2000038c 	.word	0x2000038c
 8002888:	20000390 	.word	0x20000390
 800288c:	20000394 	.word	0x20000394
 8002890:	20000395 	.word	0x20000395
 8002894:	2000067b 	.word	0x2000067b
 8002898:	0800b70c 	.word	0x0800b70c
 800289c:	0800b72c 	.word	0x0800b72c
 80028a0:	0800b730 	.word	0x0800b730
 80028a4:	0800b744 	.word	0x0800b744
 80028a8:	0800b750 	.word	0x0800b750
 80028ac:	0800b76c 	.word	0x0800b76c
 80028b0:	0800b788 	.word	0x0800b788
 80028b4:	0800b7a8 	.word	0x0800b7a8
 80028b8:	0800b7b4 	.word	0x0800b7b4
 80028bc:	0800b7c0 	.word	0x0800b7c0
 80028c0:	0800b7d4 	.word	0x0800b7d4
 80028c4:	0800b7ec 	.word	0x0800b7ec
 80028c8:	0800b804 	.word	0x0800b804
 80028cc:	0800b81c 	.word	0x0800b81c
 80028d0:	0800b828 	.word	0x0800b828
 80028d4:	0800b848 	.word	0x0800b848
 80028d8:	0800b864 	.word	0x0800b864
 80028dc:	0800b880 	.word	0x0800b880
 80028e0:	0800b88c 	.word	0x0800b88c

	case NTP_CIPMUX_SETTING:
		if (NTP_ESP_CheckResponse("OK")) {
 80028e4:	48b1      	ldr	r0, [pc, #708]	@ (8002bac <NTP_WiFi_StateMachine+0x608>)
 80028e6:	f7ff fd1b 	bl	8002320 <NTP_ESP_CheckResponse>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01e      	beq.n	800292e <NTP_WiFi_StateMachine+0x38a>
			NTP_Debug_Print("CIPMUX set successfully\r\n");
 80028f0:	48af      	ldr	r0, [pc, #700]	@ (8002bb0 <NTP_WiFi_StateMachine+0x60c>)
 80028f2:	f7ff fcef 	bl	80022d4 <NTP_Debug_Print>
			NTP_ESP_ClearResponseBuffer();
 80028f6:	f7ff fd6d 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			// 기존 연결 정리 후 새 연결 시도
			NTP_ESP_SendString("AT+CIPCLOSE=4");
 80028fa:	48ae      	ldr	r0, [pc, #696]	@ (8002bb4 <NTP_WiFi_StateMachine+0x610>)
 80028fc:	f7ff fca2 	bl	8002244 <NTP_ESP_SendString>
			osDelay(1000);
 8002900:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002904:	f004 fd89 	bl	800741a <osDelay>
			NTP_ESP_ClearResponseBuffer();
 8002908:	f7ff fd64 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			NTP_ESP_SendString("AT+CIPSTART=4,\"UDP\",\"" NTP_IP
 800290c:	48aa      	ldr	r0, [pc, #680]	@ (8002bb8 <NTP_WiFi_StateMachine+0x614>)
 800290e:	f7ff fc99 	bl	8002244 <NTP_ESP_SendString>
			"\"," NTP_PORT);
			ntp_wifi_state = NTP_UDP_CONNECTING;
 8002912:	4baa      	ldr	r3, [pc, #680]	@ (8002bbc <NTP_WiFi_StateMachine+0x618>)
 8002914:	2205      	movs	r2, #5
 8002916:	701a      	strb	r2, [r3, #0]
			ntp_command_timer = current_time;
 8002918:	4aa9      	ldr	r2, [pc, #676]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 800291a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800291e:	6013      	str	r3, [r2, #0]
			NTP_Debug_Print("NTP server connecting...\r\n");
 8002920:	48a8      	ldr	r0, [pc, #672]	@ (8002bc4 <NTP_WiFi_StateMachine+0x620>)
 8002922:	f7ff fcd7 	bl	80022d4 <NTP_Debug_Print>
			ntp_retry_count = 0;
 8002926:	4ba8      	ldr	r3, [pc, #672]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("CIPMUX setting failed\r\n");
				ntp_wifi_state = NTP_WIFI_CONNECTED;
				ntp_retry_count = 0;
			}
		}
		break;
 800292c:	e34c      	b.n	8002fc8 <NTP_WiFi_StateMachine+0xa24>
		} else if (current_time - ntp_command_timer >
 800292e:	4ba4      	ldr	r3, [pc, #656]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f242 7210 	movw	r2, #10000	@ 0x2710
 800293c:	4293      	cmp	r3, r2
 800293e:	f240 8343 	bls.w	8002fc8 <NTP_WiFi_StateMachine+0xa24>
			if (ntp_retry_count < NTP_MAX_RETRY) {
 8002942:	4ba1      	ldr	r3, [pc, #644]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d812      	bhi.n	8002970 <NTP_WiFi_StateMachine+0x3cc>
				ntp_retry_count++;
 800294a:	4b9f      	ldr	r3, [pc, #636]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b9d      	ldr	r3, [pc, #628]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002954:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("CIPMUX setting retry...\r\n");
 8002956:	489d      	ldr	r0, [pc, #628]	@ (8002bcc <NTP_WiFi_StateMachine+0x628>)
 8002958:	f7ff fcbc 	bl	80022d4 <NTP_Debug_Print>
				NTP_ESP_ClearResponseBuffer();
 800295c:	f7ff fd3a 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_ESP_SendString("AT+CIPMUX=1");
 8002960:	489b      	ldr	r0, [pc, #620]	@ (8002bd0 <NTP_WiFi_StateMachine+0x62c>)
 8002962:	f7ff fc6f 	bl	8002244 <NTP_ESP_SendString>
				ntp_command_timer = current_time;
 8002966:	4a96      	ldr	r2, [pc, #600]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 8002968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800296c:	6013      	str	r3, [r2, #0]
		break;
 800296e:	e32b      	b.n	8002fc8 <NTP_WiFi_StateMachine+0xa24>
				NTP_Debug_Print("CIPMUX setting failed\r\n");
 8002970:	4898      	ldr	r0, [pc, #608]	@ (8002bd4 <NTP_WiFi_StateMachine+0x630>)
 8002972:	f7ff fcaf 	bl	80022d4 <NTP_Debug_Print>
				ntp_wifi_state = NTP_WIFI_CONNECTED;
 8002976:	4b91      	ldr	r3, [pc, #580]	@ (8002bbc <NTP_WiFi_StateMachine+0x618>)
 8002978:	2203      	movs	r2, #3
 800297a:	701a      	strb	r2, [r3, #0]
				ntp_retry_count = 0;
 800297c:	4b92      	ldr	r3, [pc, #584]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
		break;
 8002982:	e321      	b.n	8002fc8 <NTP_WiFi_StateMachine+0xa24>

	case NTP_UDP_CONNECTING:
		if (NTP_ESP_CheckResponse("CONNECT")
 8002984:	4894      	ldr	r0, [pc, #592]	@ (8002bd8 <NTP_WiFi_StateMachine+0x634>)
 8002986:	f7ff fccb 	bl	8002320 <NTP_ESP_CheckResponse>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <NTP_WiFi_StateMachine+0x3f8>
				|| NTP_ESP_CheckResponse("ALREADY CONNECTED")) {
 8002990:	4892      	ldr	r0, [pc, #584]	@ (8002bdc <NTP_WiFi_StateMachine+0x638>)
 8002992:	f7ff fcc5 	bl	8002320 <NTP_ESP_CheckResponse>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <NTP_WiFi_StateMachine+0x41e>
			NTP_Debug_Print("UDP connection established\r\n");
 800299c:	4890      	ldr	r0, [pc, #576]	@ (8002be0 <NTP_WiFi_StateMachine+0x63c>)
 800299e:	f7ff fc99 	bl	80022d4 <NTP_Debug_Print>
			osDelay(500);
 80029a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029a6:	f004 fd38 	bl	800741a <osDelay>
			NTP_ESP_ClearResponseBuffer();
 80029aa:	f7ff fd13 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			ntp_wifi_state = NTP_UDP_CONNECTED;
 80029ae:	4b83      	ldr	r3, [pc, #524]	@ (8002bbc <NTP_WiFi_StateMachine+0x618>)
 80029b0:	2206      	movs	r2, #6
 80029b2:	701a      	strb	r2, [r3, #0]
			ntp_retry_count = 0;
 80029b4:	4b84      	ldr	r3, [pc, #528]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
			NTP_Debug_Print("Ready for NTP communication\r\n");
 80029ba:	488a      	ldr	r0, [pc, #552]	@ (8002be4 <NTP_WiFi_StateMachine+0x640>)
 80029bc:	f7ff fc8a 	bl	80022d4 <NTP_Debug_Print>
 80029c0:	e062      	b.n	8002a88 <NTP_WiFi_StateMachine+0x4e4>
		} else if (NTP_ESP_CheckResponse("ERROR")
 80029c2:	4889      	ldr	r0, [pc, #548]	@ (8002be8 <NTP_WiFi_StateMachine+0x644>)
 80029c4:	f7ff fcac 	bl	8002320 <NTP_ESP_CheckResponse>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <NTP_WiFi_StateMachine+0x436>
				|| NTP_ESP_CheckResponse("Link type ERROR")) {
 80029ce:	4887      	ldr	r0, [pc, #540]	@ (8002bec <NTP_WiFi_StateMachine+0x648>)
 80029d0:	f7ff fca6 	bl	8002320 <NTP_ESP_CheckResponse>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02b      	beq.n	8002a32 <NTP_WiFi_StateMachine+0x48e>
			NTP_Debug_Print("UDP connection error - retrying...\r\n");
 80029da:	4885      	ldr	r0, [pc, #532]	@ (8002bf0 <NTP_WiFi_StateMachine+0x64c>)
 80029dc:	f7ff fc7a 	bl	80022d4 <NTP_Debug_Print>
			NTP_ESP_ClearResponseBuffer();
 80029e0:	f7ff fcf8 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			if (ntp_retry_count < NTP_MAX_RETRY) {
 80029e4:	4b78      	ldr	r3, [pc, #480]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d818      	bhi.n	8002a1e <NTP_WiFi_StateMachine+0x47a>
				ntp_retry_count++;
 80029ec:	4b76      	ldr	r3, [pc, #472]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b74      	ldr	r3, [pc, #464]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 80029f6:	701a      	strb	r2, [r3, #0]
				// WiFi 연결 상태 재확인 후 재시도
				NTP_ESP_ClearResponseBuffer();
 80029f8:	f7ff fcec 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_ESP_SendString("AT+CIPCLOSE=4");
 80029fc:	486d      	ldr	r0, [pc, #436]	@ (8002bb4 <NTP_WiFi_StateMachine+0x610>)
 80029fe:	f7ff fc21 	bl	8002244 <NTP_ESP_SendString>
				osDelay(1000);
 8002a02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a06:	f004 fd08 	bl	800741a <osDelay>
				NTP_ESP_ClearResponseBuffer();
 8002a0a:	f7ff fce3 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_ESP_SendString("AT+CIPSTART=4,\"UDP\",\"" NTP_IP
 8002a0e:	486a      	ldr	r0, [pc, #424]	@ (8002bb8 <NTP_WiFi_StateMachine+0x614>)
 8002a10:	f7ff fc18 	bl	8002244 <NTP_ESP_SendString>
				"\"," NTP_PORT);
				ntp_command_timer = current_time;
 8002a14:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 8002a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a1a:	6013      	str	r3, [r2, #0]
			if (ntp_retry_count < NTP_MAX_RETRY) {
 8002a1c:	e034      	b.n	8002a88 <NTP_WiFi_StateMachine+0x4e4>
			} else {
				NTP_Debug_Print(
 8002a1e:	4875      	ldr	r0, [pc, #468]	@ (8002bf4 <NTP_WiFi_StateMachine+0x650>)
 8002a20:	f7ff fc58 	bl	80022d4 <NTP_Debug_Print>
						"UDP connection failed - going back to WiFi check\r\n");
				ntp_wifi_state = NTP_WIFI_CONNECTED;
 8002a24:	4b65      	ldr	r3, [pc, #404]	@ (8002bbc <NTP_WiFi_StateMachine+0x618>)
 8002a26:	2203      	movs	r2, #3
 8002a28:	701a      	strb	r2, [r3, #0]
				ntp_retry_count = 0;
 8002a2a:	4b67      	ldr	r3, [pc, #412]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			if (ntp_retry_count < NTP_MAX_RETRY) {
 8002a30:	e02a      	b.n	8002a88 <NTP_WiFi_StateMachine+0x4e4>
			}
		} else if (current_time - ntp_command_timer >
 8002a32:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002a40:	4293      	cmp	r3, r2
 8002a42:	f240 82c3 	bls.w	8002fcc <NTP_WiFi_StateMachine+0xa28>
		NTP_COMMAND_TIMEOUT_MS) {
			if (ntp_retry_count < NTP_MAX_RETRY) {
 8002a46:	4b60      	ldr	r3, [pc, #384]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d812      	bhi.n	8002a74 <NTP_WiFi_StateMachine+0x4d0>
				ntp_retry_count++;
 8002a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002a58:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("UDP connection retry...\r\n");
 8002a5a:	4867      	ldr	r0, [pc, #412]	@ (8002bf8 <NTP_WiFi_StateMachine+0x654>)
 8002a5c:	f7ff fc3a 	bl	80022d4 <NTP_Debug_Print>
				NTP_ESP_ClearResponseBuffer();
 8002a60:	f7ff fcb8 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
				NTP_ESP_SendString("AT+CIPSTART=4,\"UDP\",\"" NTP_IP
 8002a64:	4854      	ldr	r0, [pc, #336]	@ (8002bb8 <NTP_WiFi_StateMachine+0x614>)
 8002a66:	f7ff fbed 	bl	8002244 <NTP_ESP_SendString>
				"\"," NTP_PORT);
				ntp_command_timer = current_time;
 8002a6a:	4a55      	ldr	r2, [pc, #340]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 8002a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a70:	6013      	str	r3, [r2, #0]
				NTP_Debug_Print("UDP connection failed\r\n");
				ntp_wifi_state = NTP_WIFI_CONNECTED;
				ntp_retry_count = 0;
			}
		}
		break;
 8002a72:	e2ab      	b.n	8002fcc <NTP_WiFi_StateMachine+0xa28>
				NTP_Debug_Print("UDP connection failed\r\n");
 8002a74:	4861      	ldr	r0, [pc, #388]	@ (8002bfc <NTP_WiFi_StateMachine+0x658>)
 8002a76:	f7ff fc2d 	bl	80022d4 <NTP_Debug_Print>
				ntp_wifi_state = NTP_WIFI_CONNECTED;
 8002a7a:	4b50      	ldr	r3, [pc, #320]	@ (8002bbc <NTP_WiFi_StateMachine+0x618>)
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	701a      	strb	r2, [r3, #0]
				ntp_retry_count = 0;
 8002a80:	4b51      	ldr	r3, [pc, #324]	@ (8002bc8 <NTP_WiFi_StateMachine+0x624>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
		break;
 8002a86:	e2a1      	b.n	8002fcc <NTP_WiFi_StateMachine+0xa28>
 8002a88:	e2a0      	b.n	8002fcc <NTP_WiFi_StateMachine+0xa28>

	case NTP_UDP_CONNECTED:
		if (!ntp_state_executed) {
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c00 <NTP_WiFi_StateMachine+0x65c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 829e 	bne.w	8002fd0 <NTP_WiFi_StateMachine+0xa2c>
			//if (ntp_sync_requested) {
			if (1) {
				NTP_ESP_SendString("AT+CIPSEND=4,48");
 8002a94:	485b      	ldr	r0, [pc, #364]	@ (8002c04 <NTP_WiFi_StateMachine+0x660>)
 8002a96:	f7ff fbd5 	bl	8002244 <NTP_ESP_SendString>
				ntp_send_start_time = osKernelSysTick(); // 시간 측정 시작
 8002a9a:	f004 fbf3 	bl	8007284 <osKernelGetSysTimerCount>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a59      	ldr	r2, [pc, #356]	@ (8002c08 <NTP_WiFi_StateMachine+0x664>)
 8002aa2:	6013      	str	r3, [r2, #0]
				ntp_wifi_state = NTP_REQUESTING;
 8002aa4:	4b45      	ldr	r3, [pc, #276]	@ (8002bbc <NTP_WiFi_StateMachine+0x618>)
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
				ntp_command_timer = current_time;
 8002aaa:	4a45      	ldr	r2, [pc, #276]	@ (8002bc0 <NTP_WiFi_StateMachine+0x61c>)
 8002aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ab0:	6013      	str	r3, [r2, #0]
				ntp_last_request_time = current_time;
 8002ab2:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <NTP_WiFi_StateMachine+0x668>)
 8002ab4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ab8:	6013      	str	r3, [r2, #0]
				ntp_sync_requested = 0;  // 요청 플래그 리셋
 8002aba:	4b55      	ldr	r3, [pc, #340]	@ (8002c10 <NTP_WiFi_StateMachine+0x66c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
				NTP_Debug_Print("NTP send command issued\r\n");
 8002ac0:	4854      	ldr	r0, [pc, #336]	@ (8002c14 <NTP_WiFi_StateMachine+0x670>)
 8002ac2:	f7ff fc07 	bl	80022d4 <NTP_Debug_Print>
				ntp_state_executed = 1;
 8002ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c00 <NTP_WiFi_StateMachine+0x65c>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8002acc:	e280      	b.n	8002fd0 <NTP_WiFi_StateMachine+0xa2c>

	case NTP_REQUESTING:
		// 먼저 ">" 프롬프트 확인 (NTP 패킷 전송 준비)
		if (NTP_ESP_CheckResponse(">")) {
 8002ace:	4852      	ldr	r0, [pc, #328]	@ (8002c18 <NTP_WiFi_StateMachine+0x674>)
 8002ad0:	f7ff fc26 	bl	8002320 <NTP_ESP_CheckResponse>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d018      	beq.n	8002b0c <NTP_WiFi_StateMachine+0x568>
			NTP_Debug_Print("Ready to send NTP data\r\n");
 8002ada:	4850      	ldr	r0, [pc, #320]	@ (8002c1c <NTP_WiFi_StateMachine+0x678>)
 8002adc:	f7ff fbfa 	bl	80022d4 <NTP_Debug_Print>
			NTP_ESP_ClearResponseBuffer();
 8002ae0:	f7ff fc78 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			uint8_t ntp_packet[48] = { 0 };
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2230      	movs	r2, #48	@ 0x30
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f007 ff76 	bl	800a9dc <memset>
			ntp_packet[0] = 0x1B;
 8002af0:	231b      	movs	r3, #27
 8002af2:	713b      	strb	r3, [r7, #4]
			HAL_UART_Transmit(huart_esp_module, ntp_packet, 48, 1000);
 8002af4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <NTP_WiFi_StateMachine+0x67c>)
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	1d39      	adds	r1, r7, #4
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	2230      	movs	r2, #48	@ 0x30
 8002b00:	f003 fae4 	bl	80060cc <HAL_UART_Transmit>
			NTP_Debug_Print(
 8002b04:	4847      	ldr	r0, [pc, #284]	@ (8002c24 <NTP_WiFi_StateMachine+0x680>)
 8002b06:	f7ff fbe5 	bl	80022d4 <NTP_Debug_Print>
				> NTP_COMMAND_TIMEOUT_MS + 5000) {
			NTP_Debug_Print("NTP server response timeout (15s)\r\n");
			ntp_wifi_state = NTP_COMPLETE;
			ntp_state_executed = 0;
		}
		break;
 8002b0a:	e263      	b.n	8002fd4 <NTP_WiFi_StateMachine+0xa30>
		else if (NTP_ESP_CheckResponse("+IPD,4,48:") && ntp_data_received) {
 8002b0c:	4846      	ldr	r0, [pc, #280]	@ (8002c28 <NTP_WiFi_StateMachine+0x684>)
 8002b0e:	f7ff fc07 	bl	8002320 <NTP_ESP_CheckResponse>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 81ef 	beq.w	8002ef8 <NTP_WiFi_StateMachine+0x954>
 8002b1a:	4b44      	ldr	r3, [pc, #272]	@ (8002c2c <NTP_WiFi_StateMachine+0x688>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 81e9 	beq.w	8002ef8 <NTP_WiFi_StateMachine+0x954>
			NTP_Debug_Print("NTP response received!\r\n");
 8002b26:	4842      	ldr	r0, [pc, #264]	@ (8002c30 <NTP_WiFi_StateMachine+0x68c>)
 8002b28:	f7ff fbd4 	bl	80022d4 <NTP_Debug_Print>
			uint32_t ntp_timestamp = ((uint32_t) ntp_response_data[40] << 24)
 8002b2c:	4b41      	ldr	r3, [pc, #260]	@ (8002c34 <NTP_WiFi_StateMachine+0x690>)
 8002b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b32:	061a      	lsls	r2, r3, #24
					| ((uint32_t) ntp_response_data[41] << 16)
 8002b34:	4b3f      	ldr	r3, [pc, #252]	@ (8002c34 <NTP_WiFi_StateMachine+0x690>)
 8002b36:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
					| ((uint32_t) ntp_response_data[42] << 8)
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c34 <NTP_WiFi_StateMachine+0x690>)
 8002b40:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	4313      	orrs	r3, r2
					| ((uint32_t) ntp_response_data[43]);
 8002b48:	4a3a      	ldr	r2, [pc, #232]	@ (8002c34 <NTP_WiFi_StateMachine+0x690>)
 8002b4a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
			uint32_t ntp_timestamp = ((uint32_t) ntp_response_data[40] << 24)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			if (ntp_timestamp > 2208988800UL) {
 8002b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b58:	4a37      	ldr	r2, [pc, #220]	@ (8002c38 <NTP_WiFi_StateMachine+0x694>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f240 81c1 	bls.w	8002ee2 <NTP_WiFi_StateMachine+0x93e>
				uint32_t unix_timestamp = ntp_timestamp - 2208988800UL;
 8002b60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002b64:	4b35      	ldr	r3, [pc, #212]	@ (8002c3c <NTP_WiFi_StateMachine+0x698>)
 8002b66:	4413      	add	r3, r2
 8002b68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				uint32_t kst_timestamp = unix_timestamp + (9 * 3600);
 8002b6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b70:	f503 43fd 	add.w	r3, r3, #32384	@ 0x7e80
 8002b74:	3310      	adds	r3, #16
 8002b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				uint32_t days_since_epoch = kst_timestamp / 86400;
 8002b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b7e:	4a30      	ldr	r2, [pc, #192]	@ (8002c40 <NTP_WiFi_StateMachine+0x69c>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				uint32_t seconds_in_day = kst_timestamp % 86400;
 8002b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c40 <NTP_WiFi_StateMachine+0x69c>)
 8002b90:	fba2 1203 	umull	r1, r2, r2, r3
 8002b94:	0c12      	lsrs	r2, r2, #16
 8002b96:	492b      	ldr	r1, [pc, #172]	@ (8002c44 <NTP_WiFi_StateMachine+0x6a0>)
 8002b98:	fb01 f202 	mul.w	r2, r1, r2
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				uint32_t year = 1970;
 8002ba2:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				while (days_since_epoch
 8002baa:	e059      	b.n	8002c60 <NTP_WiFi_StateMachine+0x6bc>
 8002bac:	0800b72c 	.word	0x0800b72c
 8002bb0:	0800b8a8 	.word	0x0800b8a8
 8002bb4:	0800b8c4 	.word	0x0800b8c4
 8002bb8:	0800b8d4 	.word	0x0800b8d4
 8002bbc:	2000038c 	.word	0x2000038c
 8002bc0:	20000390 	.word	0x20000390
 8002bc4:	0800b8fc 	.word	0x0800b8fc
 8002bc8:	20000394 	.word	0x20000394
 8002bcc:	0800b918 	.word	0x0800b918
 8002bd0:	0800b880 	.word	0x0800b880
 8002bd4:	0800b934 	.word	0x0800b934
 8002bd8:	0800b94c 	.word	0x0800b94c
 8002bdc:	0800b954 	.word	0x0800b954
 8002be0:	0800b968 	.word	0x0800b968
 8002be4:	0800b988 	.word	0x0800b988
 8002be8:	0800b9a8 	.word	0x0800b9a8
 8002bec:	0800b9b0 	.word	0x0800b9b0
 8002bf0:	0800b9c0 	.word	0x0800b9c0
 8002bf4:	0800b9e8 	.word	0x0800b9e8
 8002bf8:	0800ba1c 	.word	0x0800ba1c
 8002bfc:	0800ba38 	.word	0x0800ba38
 8002c00:	20000395 	.word	0x20000395
 8002c04:	0800ba50 	.word	0x0800ba50
 8002c08:	200005e8 	.word	0x200005e8
 8002c0c:	20000398 	.word	0x20000398
 8002c10:	200005e4 	.word	0x200005e4
 8002c14:	0800ba60 	.word	0x0800ba60
 8002c18:	0800ba7c 	.word	0x0800ba7c
 8002c1c:	0800ba80 	.word	0x0800ba80
 8002c20:	20000178 	.word	0x20000178
 8002c24:	0800ba9c 	.word	0x0800ba9c
 8002c28:	0800b674 	.word	0x0800b674
 8002c2c:	200005d0 	.word	0x200005d0
 8002c30:	0800bad0 	.word	0x0800bad0
 8002c34:	200005a0 	.word	0x200005a0
 8002c38:	83aa7e80 	.word	0x83aa7e80
 8002c3c:	7c558180 	.word	0x7c558180
 8002c40:	c22e4507 	.word	0xc22e4507
 8002c44:	00015180 	.word	0x00015180
					days_since_epoch -= days_in_year;
 8002c48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					year++;
 8002c56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
								((year % 4 == 0 && year % 100 != 0)
 8002c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c64:	f003 0303 	and.w	r3, r3, #3
										|| (year % 400 == 0)) ? 366 : 365)) {
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <NTP_WiFi_StateMachine+0x6e0>
								((year % 4 == 0 && year % 100 != 0)
 8002c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c70:	4bc1      	ldr	r3, [pc, #772]	@ (8002f78 <NTP_WiFi_StateMachine+0x9d4>)
 8002c72:	fba3 1302 	umull	r1, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2164      	movs	r1, #100	@ 0x64
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <NTP_WiFi_StateMachine+0x6fa>
										|| (year % 400 == 0)) ? 366 : 365)) {
 8002c84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c88:	4bbb      	ldr	r3, [pc, #748]	@ (8002f78 <NTP_WiFi_StateMachine+0x9d4>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	09db      	lsrs	r3, r3, #7
 8002c90:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <NTP_WiFi_StateMachine+0x700>
 8002c9e:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002ca2:	e001      	b.n	8002ca8 <NTP_WiFi_StateMachine+0x704>
 8002ca4:	f240 136d 	movw	r3, #365	@ 0x16d
						>= (days_in_year =
 8002ca8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d9c7      	bls.n	8002c48 <NTP_WiFi_StateMachine+0x6a4>
				uint8_t days_in_month[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,
 8002cb8:	4ab0      	ldr	r2, [pc, #704]	@ (8002f7c <NTP_WiFi_StateMachine+0x9d8>)
 8002cba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
 8002cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <NTP_WiFi_StateMachine+0x744>
 8002cd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	@ (8002f78 <NTP_WiFi_StateMachine+0x9d4>)
 8002cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2164      	movs	r1, #100	@ 0x64
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <NTP_WiFi_StateMachine+0x75e>
 8002ce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cec:	4ba2      	ldr	r3, [pc, #648]	@ (8002f78 <NTP_WiFi_StateMachine+0x9d4>)
 8002cee:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf2:	09db      	lsrs	r3, r3, #7
 8002cf4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <NTP_WiFi_StateMachine+0x764>
					days_in_month[1] = 29;  // 윤년
 8002d02:	231d      	movs	r3, #29
 8002d04:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
				uint32_t month = 1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				while (days_since_epoch >= days_in_month[month - 1]) {
 8002d0e:	e011      	b.n	8002d34 <NTP_WiFi_StateMachine+0x790>
					days_since_epoch -= days_in_month[month - 1];
 8002d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d14:	3b01      	subs	r3, #1
 8002d16:	33b8      	adds	r3, #184	@ 0xb8
 8002d18:	443b      	add	r3, r7
 8002d1a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					month++;
 8002d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				while (days_since_epoch >= days_in_month[month - 1]) {
 8002d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	33b8      	adds	r3, #184	@ 0xb8
 8002d3c:	443b      	add	r3, r7
 8002d3e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d2e1      	bcs.n	8002d10 <NTP_WiFi_StateMachine+0x76c>
				uint32_t day = days_since_epoch + 1;
 8002d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d50:	3301      	adds	r3, #1
 8002d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8002d56:	4b8a      	ldr	r3, [pc, #552]	@ (8002f80 <NTP_WiFi_StateMachine+0x9dc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fbfc 	bl	800755c <osMutexAcquire>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8096 	bne.w	8002e98 <NTP_WiFi_StateMachine+0x8f4>
					current_time_data.years = year - 2000; // 2000년 기준 (예: 2025 -> 25)
 8002d6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3330      	adds	r3, #48	@ 0x30
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b83      	ldr	r3, [pc, #524]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002d78:	701a      	strb	r2, [r3, #0]
					current_time_data.months = month;
 8002d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b80      	ldr	r3, [pc, #512]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002d82:	705a      	strb	r2, [r3, #1]
					current_time_data.days = day;
 8002d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002d8c:	709a      	strb	r2, [r3, #2]
					current_time_data.hours = (seconds_in_day / 3600) % 24;
 8002d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d92:	4a7d      	ldr	r2, [pc, #500]	@ (8002f88 <NTP_WiFi_StateMachine+0x9e4>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	0ad9      	lsrs	r1, r3, #11
 8002d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f8c <NTP_WiFi_StateMachine+0x9e8>)
 8002d9c:	fba3 2301 	umull	r2, r3, r3, r1
 8002da0:	091a      	lsrs	r2, r3, #4
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1aca      	subs	r2, r1, r3
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4b75      	ldr	r3, [pc, #468]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002db0:	70da      	strb	r2, [r3, #3]
					current_time_data.minutes = (seconds_in_day / 60) % 60;
 8002db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002db6:	4a76      	ldr	r2, [pc, #472]	@ (8002f90 <NTP_WiFi_StateMachine+0x9ec>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	0959      	lsrs	r1, r3, #5
 8002dbe:	4b74      	ldr	r3, [pc, #464]	@ (8002f90 <NTP_WiFi_StateMachine+0x9ec>)
 8002dc0:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc4:	095a      	lsrs	r2, r3, #5
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	1aca      	subs	r2, r1, r3
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002dd4:	711a      	strb	r2, [r3, #4]
					current_time_data.seconds = seconds_in_day % 60;
 8002dd6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002dda:	4b6d      	ldr	r3, [pc, #436]	@ (8002f90 <NTP_WiFi_StateMachine+0x9ec>)
 8002ddc:	fba3 2301 	umull	r2, r3, r3, r1
 8002de0:	095a      	lsrs	r2, r3, #5
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	1aca      	subs	r2, r1, r3
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	4b65      	ldr	r3, [pc, #404]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002df0:	715a      	strb	r2, [r3, #5]
					current_time_data.unix_timestamp = unix_timestamp;
 8002df2:	4a64      	ldr	r2, [pc, #400]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002df4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002df8:	6093      	str	r3, [r2, #8]
					current_time_data.valid = 1;
 8002dfa:	4b62      	ldr	r3, [pc, #392]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	731a      	strb	r2, [r3, #12]
                    WiFiTime.Hours = (seconds_in_day / 3600) % 24;
 8002e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e04:	4a60      	ldr	r2, [pc, #384]	@ (8002f88 <NTP_WiFi_StateMachine+0x9e4>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0ad9      	lsrs	r1, r3, #11
 8002e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8002f8c <NTP_WiFi_StateMachine+0x9e8>)
 8002e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e12:	091a      	lsrs	r2, r3, #4
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	1aca      	subs	r2, r1, r3
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	4b5c      	ldr	r3, [pc, #368]	@ (8002f94 <NTP_WiFi_StateMachine+0x9f0>)
 8002e22:	701a      	strb	r2, [r3, #0]
                    WiFiTime.Minutes = (seconds_in_day / 60) % 60;
 8002e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e28:	4a59      	ldr	r2, [pc, #356]	@ (8002f90 <NTP_WiFi_StateMachine+0x9ec>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0959      	lsrs	r1, r3, #5
 8002e30:	4b57      	ldr	r3, [pc, #348]	@ (8002f90 <NTP_WiFi_StateMachine+0x9ec>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095a      	lsrs	r2, r3, #5
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	1aca      	subs	r2, r1, r3
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4b53      	ldr	r3, [pc, #332]	@ (8002f94 <NTP_WiFi_StateMachine+0x9f0>)
 8002e46:	705a      	strb	r2, [r3, #1]
                    WiFiTime.Seconds = seconds_in_day % 60;
 8002e48:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002e4c:	4b50      	ldr	r3, [pc, #320]	@ (8002f90 <NTP_WiFi_StateMachine+0x9ec>)
 8002e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e52:	095a      	lsrs	r2, r3, #5
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	1aca      	subs	r2, r1, r3
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	4b4c      	ldr	r3, [pc, #304]	@ (8002f94 <NTP_WiFi_StateMachine+0x9f0>)
 8002e62:	709a      	strb	r2, [r3, #2]
                    WiFiDate.Year = year - 2000;
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3330      	adds	r3, #48	@ 0x30
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <NTP_WiFi_StateMachine+0x9f4>)
 8002e70:	70da      	strb	r2, [r3, #3]
                    WiFiDate.Month = month;
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b47      	ldr	r3, [pc, #284]	@ (8002f98 <NTP_WiFi_StateMachine+0x9f4>)
 8002e7a:	705a      	strb	r2, [r3, #1]
                    WiFiDate.Date = day;
 8002e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4b45      	ldr	r3, [pc, #276]	@ (8002f98 <NTP_WiFi_StateMachine+0x9f4>)
 8002e84:	709a      	strb	r2, [r3, #2]
                    DS1302_SetTime(&WiFiTime,&WiFiDate);
 8002e86:	4944      	ldr	r1, [pc, #272]	@ (8002f98 <NTP_WiFi_StateMachine+0x9f4>)
 8002e88:	4842      	ldr	r0, [pc, #264]	@ (8002f94 <NTP_WiFi_StateMachine+0x9f0>)
 8002e8a:	f7fd fcbf 	bl	800080c <DS1302_SetTime>
					osMutexRelease(NTP_MutexHandle);
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f80 <NTP_WiFi_StateMachine+0x9dc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fbad 	bl	80075f2 <osMutexRelease>
                isWiFiready = 1;
 8002e98:	4b40      	ldr	r3, [pc, #256]	@ (8002f9c <NTP_WiFi_StateMachine+0x9f8>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
						current_time_data.years, current_time_data.months,
 8002e9e:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
				sprintf(time_msg,
 8002ea2:	461d      	mov	r5, r3
						current_time_data.years, current_time_data.months,
 8002ea4:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002ea6:	785b      	ldrb	r3, [r3, #1]
				sprintf(time_msg,
 8002ea8:	461e      	mov	r6, r3
						current_time_data.days, current_time_data.hours,
 8002eaa:	4b36      	ldr	r3, [pc, #216]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002eac:	789b      	ldrb	r3, [r3, #2]
				sprintf(time_msg,
 8002eae:	461a      	mov	r2, r3
						current_time_data.days, current_time_data.hours,
 8002eb0:	4b34      	ldr	r3, [pc, #208]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002eb2:	78db      	ldrb	r3, [r3, #3]
				sprintf(time_msg,
 8002eb4:	4619      	mov	r1, r3
						current_time_data.minutes, current_time_data.seconds);
 8002eb6:	4b33      	ldr	r3, [pc, #204]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002eb8:	791b      	ldrb	r3, [r3, #4]
				sprintf(time_msg,
 8002eba:	461c      	mov	r4, r3
						current_time_data.minutes, current_time_data.seconds);
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <NTP_WiFi_StateMachine+0x9e0>)
 8002ebe:	795b      	ldrb	r3, [r3, #5]
				sprintf(time_msg,
 8002ec0:	1d38      	adds	r0, r7, #4
 8002ec2:	9303      	str	r3, [sp, #12]
 8002ec4:	9402      	str	r4, [sp, #8]
 8002ec6:	9101      	str	r1, [sp, #4]
 8002ec8:	9200      	str	r2, [sp, #0]
 8002eca:	4633      	mov	r3, r6
 8002ecc:	462a      	mov	r2, r5
 8002ece:	4934      	ldr	r1, [pc, #208]	@ (8002fa0 <NTP_WiFi_StateMachine+0x9fc>)
 8002ed0:	f007 fd48 	bl	800a964 <siprintf>
				NTP_Debug_Print(time_msg);
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f9fc 	bl	80022d4 <NTP_Debug_Print>
				NTP_ESP_ClearResponseBuffer();
 8002edc:	f7ff fa7a 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
 8002ee0:	e002      	b.n	8002ee8 <NTP_WiFi_StateMachine+0x944>
				NTP_Debug_Print("Invalid NTP timestamp received\r\n");
 8002ee2:	4830      	ldr	r0, [pc, #192]	@ (8002fa4 <NTP_WiFi_StateMachine+0xa00>)
 8002ee4:	f7ff f9f6 	bl	80022d4 <NTP_Debug_Print>
			ntp_data_received = 0;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa8 <NTP_WiFi_StateMachine+0xa04>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			ntp_wifi_state = NTP_COMPLETE;
 8002eee:	4b2f      	ldr	r3, [pc, #188]	@ (8002fac <NTP_WiFi_StateMachine+0xa08>)
 8002ef0:	220a      	movs	r2, #10
 8002ef2:	701a      	strb	r2, [r3, #0]
		else if (NTP_ESP_CheckResponse("+IPD,4,48:") && ntp_data_received) {
 8002ef4:	bf00      	nop
		break;
 8002ef6:	e06d      	b.n	8002fd4 <NTP_WiFi_StateMachine+0xa30>
		else if (current_time - ntp_command_timer
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <NTP_WiFi_StateMachine+0xa0c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d964      	bls.n	8002fd4 <NTP_WiFi_StateMachine+0xa30>
			NTP_Debug_Print("NTP server response timeout (15s)\r\n");
 8002f0a:	482a      	ldr	r0, [pc, #168]	@ (8002fb4 <NTP_WiFi_StateMachine+0xa10>)
 8002f0c:	f7ff f9e2 	bl	80022d4 <NTP_Debug_Print>
			ntp_wifi_state = NTP_COMPLETE;
 8002f10:	4b26      	ldr	r3, [pc, #152]	@ (8002fac <NTP_WiFi_StateMachine+0xa08>)
 8002f12:	220a      	movs	r2, #10
 8002f14:	701a      	strb	r2, [r3, #0]
			ntp_state_executed = 0;
 8002f16:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <NTP_WiFi_StateMachine+0xa14>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
		break;
 8002f1c:	e05a      	b.n	8002fd4 <NTP_WiFi_StateMachine+0xa30>

	case NTP_COMPLETE:
		if (!ntp_state_executed) {
 8002f1e:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <NTP_WiFi_StateMachine+0xa14>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <NTP_WiFi_StateMachine+0x996>
			NTP_Debug_Print("NTP time synchronized\r\n");
 8002f26:	4825      	ldr	r0, [pc, #148]	@ (8002fbc <NTP_WiFi_StateMachine+0xa18>)
 8002f28:	f7ff f9d4 	bl	80022d4 <NTP_Debug_Print>
			ntp_state_executed = 1;
 8002f2c:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <NTP_WiFi_StateMachine+0xa14>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
			ntp_command_timer = current_time;
 8002f32:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <NTP_WiFi_StateMachine+0xa0c>)
 8002f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f38:	6013      	str	r3, [r2, #0]
		}
		if (current_time - ntp_command_timer > NTP_COMMAND_TIMEOUT_MS + 10000) {
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <NTP_WiFi_StateMachine+0xa0c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d945      	bls.n	8002fd8 <NTP_WiFi_StateMachine+0xa34>
			NTP_ESP_ClearResponseBuffer();
 8002f4c:	f7ff fa42 	bl	80023d4 <NTP_ESP_ClearResponseBuffer>
			ntp_wifi_state = NTP_UDP_CONNECTED;
 8002f50:	4b16      	ldr	r3, [pc, #88]	@ (8002fac <NTP_WiFi_StateMachine+0xa08>)
 8002f52:	2206      	movs	r2, #6
 8002f54:	701a      	strb	r2, [r3, #0]
			ntp_state_executed = 0;
 8002f56:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <NTP_WiFi_StateMachine+0xa14>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
			NTP_Debug_Print("Ready for next NTP request\r\n");
 8002f5c:	4818      	ldr	r0, [pc, #96]	@ (8002fc0 <NTP_WiFi_StateMachine+0xa1c>)
 8002f5e:	f7ff f9b9 	bl	80022d4 <NTP_Debug_Print>
		}
		break;
 8002f62:	e039      	b.n	8002fd8 <NTP_WiFi_StateMachine+0xa34>

	default:
		ntp_wifi_state = NTP_WIFI_INIT;
 8002f64:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <NTP_WiFi_StateMachine+0xa08>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
		break;
 8002f6a:	e036      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002f6c:	bf00      	nop
 8002f6e:	e034      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002f70:	bf00      	nop
 8002f72:	e032      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002f74:	bf00      	nop
 8002f76:	e030      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
 8002f78:	51eb851f 	.word	0x51eb851f
 8002f7c:	0800bba0 	.word	0x0800bba0
 8002f80:	200005ec 	.word	0x200005ec
 8002f84:	200005d4 	.word	0x200005d4
 8002f88:	91a2b3c5 	.word	0x91a2b3c5
 8002f8c:	aaaaaaab 	.word	0xaaaaaaab
 8002f90:	88888889 	.word	0x88888889
 8002f94:	20000160 	.word	0x20000160
 8002f98:	20000174 	.word	0x20000174
 8002f9c:	2000015d 	.word	0x2000015d
 8002fa0:	0800baec 	.word	0x0800baec
 8002fa4:	0800bb20 	.word	0x0800bb20
 8002fa8:	200005d0 	.word	0x200005d0
 8002fac:	2000038c 	.word	0x2000038c
 8002fb0:	20000390 	.word	0x20000390
 8002fb4:	0800bb44 	.word	0x0800bb44
 8002fb8:	20000395 	.word	0x20000395
 8002fbc:	0800bb68 	.word	0x0800bb68
 8002fc0:	0800bb80 	.word	0x0800bb80
		break;
 8002fc4:	bf00      	nop
 8002fc6:	e008      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002fc8:	bf00      	nop
 8002fca:	e006      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002fcc:	bf00      	nop
 8002fce:	e004      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002fd0:	bf00      	nop
 8002fd2:	e002      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <NTP_WiFi_StateMachine+0xa36>
		break;
 8002fd8:	bf00      	nop
	}
}
 8002fda:	37bc      	adds	r7, #188	@ 0xbc
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fe0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <MX_RTC_Init+0x44>)
 8002fe6:	4a10      	ldr	r2, [pc, #64]	@ (8003028 <MX_RTC_Init+0x48>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <MX_RTC_Init+0x44>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <MX_RTC_Init+0x44>)
 8002ff2:	227f      	movs	r2, #127	@ 0x7f
 8002ff4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <MX_RTC_Init+0x44>)
 8002ff8:	22ff      	movs	r2, #255	@ 0xff
 8002ffa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <MX_RTC_Init+0x44>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003002:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <MX_RTC_Init+0x44>)
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003008:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <MX_RTC_Init+0x44>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800300e:	4805      	ldr	r0, [pc, #20]	@ (8003024 <MX_RTC_Init+0x44>)
 8003010:	f002 f8cc 	bl	80051ac <HAL_RTC_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800301a:	f7ff f806 	bl	800202a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000067c 	.word	0x2000067c
 8003028:	40002800 	.word	0x40002800

0800302c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
 8003044:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0c      	ldr	r2, [pc, #48]	@ (800307c <HAL_RTC_MspInit+0x50>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d111      	bne.n	8003074 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003050:	2302      	movs	r3, #2
 8003052:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003058:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	4618      	mov	r0, r3
 8003060:	f001 ffb4 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800306a:	f7fe ffde 	bl	800202a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <HAL_RTC_MspInit+0x54>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003074:	bf00      	nop
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40002800 	.word	0x40002800
 8003080:	42470e3c 	.word	0x42470e3c

08003084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_MspInit+0x54>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	4a11      	ldr	r2, [pc, #68]	@ (80030d8 <HAL_MspInit+0x54>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003098:	6453      	str	r3, [r2, #68]	@ 0x44
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <HAL_MspInit+0x54>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_MspInit+0x54>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <HAL_MspInit+0x54>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_MspInit+0x54>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	210f      	movs	r1, #15
 80030c6:	f06f 0001 	mvn.w	r0, #1
 80030ca:	f000 fbb2 	bl	8003832 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <NMI_Handler+0x4>

080030e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <HardFault_Handler+0x4>

080030ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <MemManage_Handler+0x4>

080030f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <BusFault_Handler+0x4>

080030fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <UsageFault_Handler+0x4>

08003104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003116:	f000 fa6d 	bl	80035f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800311a:	f006 feb1 	bl	8009e80 <xTaskGetSchedulerState>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003124:	f005 f808 	bl	8008138 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Receiver_Pin);
 8003130:	2001      	movs	r0, #1
 8003132:	f000 fdfd 	bl	8003d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003140:	4802      	ldr	r0, [pc, #8]	@ (800314c <TIM2_IRQHandler+0x10>)
 8003142:	f002 fbe7 	bl	8005914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200006a0 	.word	0x200006a0

08003150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003154:	4802      	ldr	r0, [pc, #8]	@ (8003160 <USART1_IRQHandler+0x10>)
 8003156:	f003 f869 	bl	800622c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200006e8 	.word	0x200006e8

08003164 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003168:	4802      	ldr	r0, [pc, #8]	@ (8003174 <USART2_IRQHandler+0x10>)
 800316a:	f003 f85f 	bl	800622c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000730 	.word	0x20000730

08003178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800317c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003180:	f000 fdd6 	bl	8003d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}

08003188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800319c:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a4:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031aa:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b8:	f007 fc8c 	bl	800aad4 <__errno>
 80031bc:	4603      	mov	r3, r0
 80031be:	220c      	movs	r2, #12
 80031c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c8:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ce:	4b07      	ldr	r3, [pc, #28]	@ (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20020000 	.word	0x20020000
 80031e8:	00000400 	.word	0x00000400
 80031ec:	2000069c 	.word	0x2000069c
 80031f0:	200052b0 	.word	0x200052b0

080031f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003208:	463b      	mov	r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003210:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <MX_TIM2_Init+0x94>)
 8003212:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <MX_TIM2_Init+0x94>)
 800321a:	2253      	movs	r2, #83	@ 0x53
 800321c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321e:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <MX_TIM2_Init+0x94>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8003224:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <MX_TIM2_Init+0x94>)
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322c:	4b16      	ldr	r3, [pc, #88]	@ (8003288 <MX_TIM2_Init+0x94>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <MX_TIM2_Init+0x94>)
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003238:	4813      	ldr	r0, [pc, #76]	@ (8003288 <MX_TIM2_Init+0x94>)
 800323a:	f002 fac1 	bl	80057c0 <HAL_TIM_Base_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003244:	f7fe fef1 	bl	800202a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800324c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	4619      	mov	r1, r3
 8003254:	480c      	ldr	r0, [pc, #48]	@ (8003288 <MX_TIM2_Init+0x94>)
 8003256:	f002 fc4d 	bl	8005af4 <HAL_TIM_ConfigClockSource>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003260:	f7fe fee3 	bl	800202a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800326c:	463b      	mov	r3, r7
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	@ (8003288 <MX_TIM2_Init+0x94>)
 8003272:	f002 fe59 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800327c:	f7fe fed5 	bl	800202a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200006a0 	.word	0x200006a0

0800328c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329c:	d115      	bne.n	80032ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <HAL_TIM_Base_MspInit+0x48>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	4a0b      	ldr	r2, [pc, #44]	@ (80032d4 <HAL_TIM_Base_MspInit+0x48>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_TIM_Base_MspInit+0x48>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2105      	movs	r1, #5
 80032be:	201c      	movs	r0, #28
 80032c0:	f000 fab7 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032c4:	201c      	movs	r0, #28
 80032c6:	f000 fad0 	bl	800386a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 80032de:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <MX_USART1_UART_Init+0x50>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 80032e4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80032e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	@ (8003324 <MX_USART1_UART_Init+0x4c>)
 8003310:	f002 fe8c 	bl	800602c <HAL_UART_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800331a:	f7fe fe86 	bl	800202a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200006e8 	.word	0x200006e8
 8003328:	40011000 	.word	0x40011000

0800332c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003330:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <MX_USART2_UART_Init+0x50>)
 8003334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003338:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800333c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003362:	4805      	ldr	r0, [pc, #20]	@ (8003378 <MX_USART2_UART_Init+0x4c>)
 8003364:	f002 fe62 	bl	800602c <HAL_UART_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800336e:	f7fe fe5c 	bl	800202a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000730 	.word	0x20000730
 800337c:	40004400 	.word	0x40004400

08003380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	@ 0x30
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a49      	ldr	r2, [pc, #292]	@ (80034c4 <HAL_UART_MspInit+0x144>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d153      	bne.n	800344a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	4b48      	ldr	r3, [pc, #288]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	4a47      	ldr	r2, [pc, #284]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033ac:	f043 0310 	orr.w	r3, r3, #16
 80033b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b2:	4b45      	ldr	r3, [pc, #276]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ce:	4b3e      	ldr	r3, [pc, #248]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b3a      	ldr	r3, [pc, #232]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a39      	ldr	r2, [pc, #228]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b37      	ldr	r3, [pc, #220]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ESP01_TX_Pin;
 80033f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003408:	2307      	movs	r3, #7
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ESP01_TX_GPIO_Port, &GPIO_InitStruct);
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	482e      	ldr	r0, [pc, #184]	@ (80034cc <HAL_UART_MspInit+0x14c>)
 8003414:	f000 fad6 	bl	80039c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP01_RX_Pin;
 8003418:	2340      	movs	r3, #64	@ 0x40
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003428:	2307      	movs	r3, #7
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ESP01_RX_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	4619      	mov	r1, r3
 8003432:	4827      	ldr	r0, [pc, #156]	@ (80034d0 <HAL_UART_MspInit+0x150>)
 8003434:	f000 fac6 	bl	80039c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2105      	movs	r1, #5
 800343c:	2025      	movs	r0, #37	@ 0x25
 800343e:	f000 f9f8 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003442:	2025      	movs	r0, #37	@ 0x25
 8003444:	f000 fa11 	bl	800386a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003448:	e038      	b.n	80034bc <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_UART_MspInit+0x154>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d133      	bne.n	80034bc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003462:	6413      	str	r3, [r2, #64]	@ 0x40
 8003464:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	4a13      	ldr	r2, [pc, #76]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <HAL_UART_MspInit+0x148>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800348c:	230c      	movs	r3, #12
 800348e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800349c:	2307      	movs	r3, #7
 800349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 031c 	add.w	r3, r7, #28
 80034a4:	4619      	mov	r1, r3
 80034a6:	4809      	ldr	r0, [pc, #36]	@ (80034cc <HAL_UART_MspInit+0x14c>)
 80034a8:	f000 fa8c 	bl	80039c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2105      	movs	r1, #5
 80034b0:	2026      	movs	r0, #38	@ 0x26
 80034b2:	f000 f9be 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034b6:	2026      	movs	r0, #38	@ 0x26
 80034b8:	f000 f9d7 	bl	800386a <HAL_NVIC_EnableIRQ>
}
 80034bc:	bf00      	nop
 80034be:	3730      	adds	r7, #48	@ 0x30
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40011000 	.word	0x40011000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40004400 	.word	0x40004400

080034d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003510 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034dc:	f000 f826 	bl	800352c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034e0:	480c      	ldr	r0, [pc, #48]	@ (8003514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034e2:	490d      	ldr	r1, [pc, #52]	@ (8003518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e4:	4a0d      	ldr	r2, [pc, #52]	@ (800351c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003506:	f007 faeb 	bl	800aae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350a:	f7fe fcd1 	bl	8001eb0 <main>
  bx  lr    
 800350e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003518:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800351c:	0800bd3c 	.word	0x0800bd3c
  ldr r2, =_sbss
 8003520:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003524:	200052ac 	.word	0x200052ac

08003528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003528:	e7fe      	b.n	8003528 <ADC_IRQHandler>
	...

0800352c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003530:	4b06      	ldr	r3, [pc, #24]	@ (800354c <SystemInit+0x20>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	4a05      	ldr	r2, [pc, #20]	@ (800354c <SystemInit+0x20>)
 8003538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800353c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <HAL_Init+0x40>)
 800355a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800355e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <HAL_Init+0x40>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_Init+0x40>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 f94f 	bl	800381c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	200f      	movs	r0, #15
 8003580:	f000 f808 	bl	8003594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7ff fd7e 	bl	8003084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800359c:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_InitTick+0x54>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_InitTick+0x58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f967 	bl	8003886 <HAL_SYSTICK_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00e      	b.n	80035e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d80a      	bhi.n	80035de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c8:	2200      	movs	r2, #0
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f000 f92f 	bl	8003832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d4:	4a06      	ldr	r2, [pc, #24]	@ (80035f0 <HAL_InitTick+0x5c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000004 	.word	0x20000004
 80035ec:	2000000c 	.word	0x2000000c
 80035f0:	20000008 	.word	0x20000008

080035f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_IncTick+0x20>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_IncTick+0x24>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4413      	add	r3, r2
 8003604:	4a04      	ldr	r2, [pc, #16]	@ (8003618 <HAL_IncTick+0x24>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000000c 	.word	0x2000000c
 8003618:	20000778 	.word	0x20000778

0800361c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return uwTick;
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_GetTick+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000778 	.word	0x20000778

08003634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7ff ffee 	bl	800361c <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d005      	beq.n	800365a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800364e:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <HAL_Delay+0x44>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365a:	bf00      	nop
 800365c:	f7ff ffde 	bl	800361c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	429a      	cmp	r2, r3
 800366a:	d8f7      	bhi.n	800365c <HAL_Delay+0x28>
  {
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000000c 	.word	0x2000000c

0800367c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60d3      	str	r3, [r2, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <__NVIC_GetPriorityGrouping+0x18>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0307 	and.w	r3, r3, #7
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4907      	ldr	r1, [pc, #28]	@ (8003718 <__NVIC_EnableIRQ+0x38>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100

0800371c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db0a      	blt.n	8003746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <__NVIC_SetPriority+0x4c>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	440b      	add	r3, r1
 8003740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003744:	e00a      	b.n	800375c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4908      	ldr	r1, [pc, #32]	@ (800376c <__NVIC_SetPriority+0x50>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3b04      	subs	r3, #4
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	440b      	add	r3, r1
 800375a:	761a      	strb	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f1c3 0307 	rsb	r3, r3, #7
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf28      	it	cs
 800378e:	2304      	movcs	r3, #4
 8003790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3304      	adds	r3, #4
 8003796:	2b06      	cmp	r3, #6
 8003798:	d902      	bls.n	80037a0 <NVIC_EncodePriority+0x30>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3b03      	subs	r3, #3
 800379e:	e000      	b.n	80037a2 <NVIC_EncodePriority+0x32>
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	401a      	ands	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43d9      	mvns	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	4313      	orrs	r3, r2
         );
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	@ 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d301      	bcc.n	80037ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00f      	b.n	800380e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <SysTick_Config+0x40>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f6:	210f      	movs	r1, #15
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f7ff ff8e 	bl	800371c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <SysTick_Config+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <SysTick_Config+0x40>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff29 	bl	800367c <__NVIC_SetPriorityGrouping>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003844:	f7ff ff3e 	bl	80036c4 <__NVIC_GetPriorityGrouping>
 8003848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff8e 	bl	8003770 <NVIC_EncodePriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5d 	bl	800371c <__NVIC_SetPriority>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff31 	bl	80036e0 <__NVIC_EnableIRQ>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffa2 	bl	80037d8 <SysTick_Config>
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff feb6 	bl	800361c <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d008      	beq.n	80038d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2280      	movs	r2, #128	@ 0x80
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e052      	b.n	8003976 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0216 	bic.w	r2, r2, #22
 80038de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <HAL_DMA_Abort+0x62>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0208 	bic.w	r2, r2, #8
 800390e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003920:	e013      	b.n	800394a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003922:	f7ff fe7b 	bl	800361c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b05      	cmp	r3, #5
 800392e:	d90c      	bls.n	800394a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e015      	b.n	8003976 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e4      	bne.n	8003922 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	223f      	movs	r2, #63	@ 0x3f
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d004      	beq.n	800399c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2280      	movs	r2, #128	@ 0x80
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e00c      	b.n	80039b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2205      	movs	r2, #5
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e159      	b.n	8003c94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 8148 	bne.w	8003c8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d005      	beq.n	8003a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d130      	bne.n	8003a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 0201 	and.w	r2, r3, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d017      	beq.n	8003ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d123      	bne.n	8003b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a2 	beq.w	8003c8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b54      	ldr	r3, [pc, #336]	@ (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b66:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <HAL_GPIO_Init+0x2ec>)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a49      	ldr	r2, [pc, #292]	@ (8003cb4 <HAL_GPIO_Init+0x2f0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d019      	beq.n	8003bc6 <HAL_GPIO_Init+0x202>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a48      	ldr	r2, [pc, #288]	@ (8003cb8 <HAL_GPIO_Init+0x2f4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_GPIO_Init+0x1fe>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a47      	ldr	r2, [pc, #284]	@ (8003cbc <HAL_GPIO_Init+0x2f8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00d      	beq.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a46      	ldr	r2, [pc, #280]	@ (8003cc0 <HAL_GPIO_Init+0x2fc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <HAL_GPIO_Init+0x1f6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a45      	ldr	r2, [pc, #276]	@ (8003cc4 <HAL_GPIO_Init+0x300>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_GPIO_Init+0x1f2>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e008      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e004      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f002 0203 	and.w	r2, r2, #3
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	4093      	lsls	r3, r2
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bd8:	4935      	ldr	r1, [pc, #212]	@ (8003cb0 <HAL_GPIO_Init+0x2ec>)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	3302      	adds	r3, #2
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003be6:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c10:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c34:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3a:	4b23      	ldr	r3, [pc, #140]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c88:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	f67f aea2 	bls.w	80039e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3724      	adds	r7, #36	@ 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	40020c00 	.word	0x40020c00
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d46:	4a05      	ldr	r2, [pc, #20]	@ (8003d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe f93c 	bl	8001fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e12b      	b.n	8003fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd ff10 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	@ 0x24
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f001 f8da 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8003dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a81      	ldr	r2, [pc, #516]	@ (8003fd4 <HAL_I2C_Init+0x274>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d807      	bhi.n	8003de4 <HAL_I2C_Init+0x84>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a80      	ldr	r2, [pc, #512]	@ (8003fd8 <HAL_I2C_Init+0x278>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bf94      	ite	ls
 8003ddc:	2301      	movls	r3, #1
 8003dde:	2300      	movhi	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e006      	b.n	8003df2 <HAL_I2C_Init+0x92>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a7d      	ldr	r2, [pc, #500]	@ (8003fdc <HAL_I2C_Init+0x27c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0e7      	b.n	8003fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a78      	ldr	r2, [pc, #480]	@ (8003fe0 <HAL_I2C_Init+0x280>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0c9b      	lsrs	r3, r3, #18
 8003e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4a6a      	ldr	r2, [pc, #424]	@ (8003fd4 <HAL_I2C_Init+0x274>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d802      	bhi.n	8003e34 <HAL_I2C_Init+0xd4>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3301      	adds	r3, #1
 8003e32:	e009      	b.n	8003e48 <HAL_I2C_Init+0xe8>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	4a69      	ldr	r2, [pc, #420]	@ (8003fe4 <HAL_I2C_Init+0x284>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	3301      	adds	r3, #1
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	495c      	ldr	r1, [pc, #368]	@ (8003fd4 <HAL_I2C_Init+0x274>)
 8003e64:	428b      	cmp	r3, r1
 8003e66:	d819      	bhi.n	8003e9c <HAL_I2C_Init+0x13c>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e59      	subs	r1, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e76:	1c59      	adds	r1, r3, #1
 8003e78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_I2C_Init+0x138>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1e59      	subs	r1, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	e051      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e04f      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <HAL_I2C_Init+0x168>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1e58      	subs	r0, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e012      	b.n	8003eee <HAL_I2C_Init+0x18e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e58      	subs	r0, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	0099      	lsls	r1, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Init+0x196>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e022      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10e      	bne.n	8003f1c <HAL_I2C_Init+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1e58      	subs	r0, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	440b      	add	r3, r1
 8003f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1a:	e00f      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	0099      	lsls	r1, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6911      	ldr	r1, [r2, #16]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	000186a0 	.word	0x000186a0
 8003fd8:	001e847f 	.word	0x001e847f
 8003fdc:	003d08ff 	.word	0x003d08ff
 8003fe0:	431bde83 	.word	0x431bde83
 8003fe4:	10624dd3 	.word	0x10624dd3

08003fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	817b      	strh	r3, [r7, #10]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff fb0e 	bl	800361c <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	f040 80e0 	bne.w	80041d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2319      	movs	r3, #25
 8004016:	2201      	movs	r2, #1
 8004018:	4970      	ldr	r1, [pc, #448]	@ (80041dc <HAL_I2C_Master_Transmit+0x1f4>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f964 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	e0d3      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2C_Master_Transmit+0x50>
 8004034:	2302      	movs	r3, #2
 8004036:	e0cc      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d007      	beq.n	800405e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800406c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	@ 0x21
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2210      	movs	r2, #16
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	893a      	ldrh	r2, [r7, #8]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a50      	ldr	r2, [pc, #320]	@ (80041e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800409e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a0:	8979      	ldrh	r1, [r7, #10]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f89c 	bl	80041e4 <I2C_MasterRequestWrite>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e08d      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040cc:	e066      	b.n	800419c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa22 	bl	800451c <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06b      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d11b      	bne.n	8004170 <HAL_I2C_Master_Transmit+0x188>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d017      	beq.n	8004170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	6a39      	ldr	r1, [r7, #32]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fa19 	bl	80045ac <I2C_WaitOnBTFFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	2b04      	cmp	r3, #4
 8004186:	d107      	bne.n	8004198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e01a      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d194      	bne.n	80040ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	00100002 	.word	0x00100002
 80041e0:	ffff0000 	.word	0xffff0000

080041e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	460b      	mov	r3, r1
 80041f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d006      	beq.n	800420e <I2C_MasterRequestWrite+0x2a>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d003      	beq.n	800420e <I2C_MasterRequestWrite+0x2a>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800420c:	d108      	bne.n	8004220 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e00b      	b.n	8004238 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	2b12      	cmp	r3, #18
 8004226:	d107      	bne.n	8004238 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f84f 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425e:	d103      	bne.n	8004268 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e035      	b.n	80042d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004274:	d108      	bne.n	8004288 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004276:	897b      	ldrh	r3, [r7, #10]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	e01b      	b.n	80042c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004288:	897b      	ldrh	r3, [r7, #10]
 800428a:	11db      	asrs	r3, r3, #7
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f003 0306 	and.w	r3, r3, #6
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f063 030f 	orn	r3, r3, #15
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	490e      	ldr	r1, [pc, #56]	@ (80042e0 <I2C_MasterRequestWrite+0xfc>)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f898 	bl	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e010      	b.n	80042d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042b6:	897b      	ldrh	r3, [r7, #10]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4907      	ldr	r1, [pc, #28]	@ (80042e4 <I2C_MasterRequestWrite+0x100>)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f888 	bl	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	00010008 	.word	0x00010008
 80042e4:	00010002 	.word	0x00010002

080042e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	e048      	b.n	800438c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d044      	beq.n	800438c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7ff f98b 	bl	800361c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d139      	bne.n	800438c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	0c1b      	lsrs	r3, r3, #16
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d10d      	bne.n	800433e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	43da      	mvns	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	e00c      	b.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x70>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	429a      	cmp	r2, r3
 800435c:	d116      	bne.n	800438c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e023      	b.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10d      	bne.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	43da      	mvns	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	e00c      	b.n	80043cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	43da      	mvns	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4013      	ands	r3, r2
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d093      	beq.n	80042fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ea:	e071      	b.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d123      	bne.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	f043 0204 	orr.w	r2, r3, #4
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e067      	b.n	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d041      	beq.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7ff f8e6 	bl	800361c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d136      	bne.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10c      	bne.n	8004486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	43da      	mvns	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e00b      	b.n	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	43da      	mvns	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e021      	b.n	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	0c1b      	lsrs	r3, r3, #16
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10c      	bne.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	43da      	mvns	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e00b      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f af6d 	bne.w	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004528:	e034      	b.n	8004594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f886 	bl	800463c <I2C_IsAcknowledgeFailed>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e034      	b.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d028      	beq.n	8004594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004542:	f7ff f86b 	bl	800361c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11d      	bne.n	8004594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b80      	cmp	r3, #128	@ 0x80
 8004564:	d016      	beq.n	8004594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e007      	b.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b80      	cmp	r3, #128	@ 0x80
 80045a0:	d1c3      	bne.n	800452a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b8:	e034      	b.n	8004624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f83e 	bl	800463c <I2C_IsAcknowledgeFailed>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e034      	b.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d028      	beq.n	8004624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7ff f823 	bl	800361c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11d      	bne.n	8004624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d016      	beq.n	8004624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e007      	b.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d1c3      	bne.n	80045ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004652:	d11b      	bne.n	800468c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800465c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f043 0204 	orr.w	r2, r3, #4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e267      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d075      	beq.n	80047a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ba:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d00c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d112      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4b82      	ldr	r3, [pc, #520]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046de:	d10b      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	4b7e      	ldr	r3, [pc, #504]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d05b      	beq.n	80047a4 <HAL_RCC_OscConfig+0x108>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d157      	bne.n	80047a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e242      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004700:	d106      	bne.n	8004710 <HAL_RCC_OscConfig+0x74>
 8004702:	4b76      	ldr	r3, [pc, #472]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a75      	ldr	r2, [pc, #468]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e01d      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x98>
 800471a:	4b70      	ldr	r3, [pc, #448]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6f      	ldr	r2, [pc, #444]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b6d      	ldr	r3, [pc, #436]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6c      	ldr	r2, [pc, #432]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e00b      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004734:	4b69      	ldr	r3, [pc, #420]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a68      	ldr	r2, [pc, #416]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 800473a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b66      	ldr	r3, [pc, #408]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a65      	ldr	r2, [pc, #404]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d013      	beq.n	800477c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe ff62 	bl	800361c <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fe ff5e 	bl	800361c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	@ 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e207      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b5b      	ldr	r3, [pc, #364]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0xc0>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fe ff4e 	bl	800361c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe ff4a 	bl	800361c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	@ 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1f3      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	4b51      	ldr	r3, [pc, #324]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0xe8>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d063      	beq.n	800487a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047b2:	4b4a      	ldr	r3, [pc, #296]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b47      	ldr	r3, [pc, #284]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d11c      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b44      	ldr	r3, [pc, #272]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d116      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1c7      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ee:	4b3b      	ldr	r3, [pc, #236]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4937      	ldr	r1, [pc, #220]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	e03a      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b34      	ldr	r3, [pc, #208]	@ (80048e0 <HAL_RCC_OscConfig+0x244>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fe ff03 	bl	800361c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481a:	f7fe feff 	bl	800361c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1a8      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482c:	4b2b      	ldr	r3, [pc, #172]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4925      	ldr	r1, [pc, #148]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	e015      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484e:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_RCC_OscConfig+0x244>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe fee2 	bl	800361c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7fe fede 	bl	800361c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e187      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d036      	beq.n	80048f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	4b15      	ldr	r3, [pc, #84]	@ (80048e4 <HAL_RCC_OscConfig+0x248>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fe fec2 	bl	800361c <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe febe 	bl	800361c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e167      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCC_OscConfig+0x240>)
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x200>
 80048ba:	e01b      	b.n	80048f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <HAL_RCC_OscConfig+0x248>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c2:	f7fe feab 	bl	800361c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c8:	e00e      	b.n	80048e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fe fea7 	bl	800361c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d907      	bls.n	80048e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e150      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	42470000 	.word	0x42470000
 80048e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	4b88      	ldr	r3, [pc, #544]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ea      	bne.n	80048ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8097 	beq.w	8004a30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b81      	ldr	r3, [pc, #516]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b7d      	ldr	r3, [pc, #500]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	@ 0x40
 8004922:	4b7a      	ldr	r3, [pc, #488]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b77      	ldr	r3, [pc, #476]	@ (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493e:	4b74      	ldr	r3, [pc, #464]	@ (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a73      	ldr	r2, [pc, #460]	@ (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fe fe67 	bl	800361c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fe fe63 	bl	800361c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e10c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x2ea>
 8004978:	4b64      	ldr	r3, [pc, #400]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497c:	4a63      	ldr	r2, [pc, #396]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	@ 0x70
 8004984:	e01c      	b.n	80049c0 <HAL_RCC_OscConfig+0x324>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x30c>
 800498e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004992:	4a5e      	ldr	r2, [pc, #376]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	6713      	str	r3, [r2, #112]	@ 0x70
 800499a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0x324>
 80049a8:	4b58      	ldr	r3, [pc, #352]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	4a57      	ldr	r2, [pc, #348]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b4:	4b55      	ldr	r3, [pc, #340]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b8:	4a54      	ldr	r2, [pc, #336]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049ba:	f023 0304 	bic.w	r3, r3, #4
 80049be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fe fe28 	bl	800361c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fe fe24 	bl	800361c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0cb      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	4b49      	ldr	r3, [pc, #292]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ee      	beq.n	80049d0 <HAL_RCC_OscConfig+0x334>
 80049f2:	e014      	b.n	8004a1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f4:	f7fe fe12 	bl	800361c <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fe fe0e 	bl	800361c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e0b5      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a12:	4b3e      	ldr	r3, [pc, #248]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ee      	bne.n	80049fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a24:	4b39      	ldr	r3, [pc, #228]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	4a38      	ldr	r2, [pc, #224]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a1 	beq.w	8004b7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3a:	4b34      	ldr	r3, [pc, #208]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d05c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d141      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe fde2 	bl	800361c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe fdde 	bl	800361c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e087      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	491b      	ldr	r1, [pc, #108]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fe fdb7 	bl	800361c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fe fdb3 	bl	800361c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e05c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac4:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x416>
 8004ad0:	e054      	b.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad2:	4b10      	ldr	r3, [pc, #64]	@ (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fda0 	bl	800361c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fe fd9c 	bl	800361c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e045      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x444>
 8004afe:	e03d      	b.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e038      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40007000 	.word	0x40007000
 8004b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <HAL_RCC_OscConfig+0x4ec>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d028      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d121      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d11a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	3b01      	subs	r3, #1
 8004b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0cc      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b68      	ldr	r3, [pc, #416]	@ (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d90c      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b65      	ldr	r3, [pc, #404]	@ (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b63      	ldr	r3, [pc, #396]	@ (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b8      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be0:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a58      	ldr	r2, [pc, #352]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf8:	4b53      	ldr	r3, [pc, #332]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c04:	4b50      	ldr	r3, [pc, #320]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	494d      	ldr	r1, [pc, #308]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d044      	beq.n	8004cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b47      	ldr	r3, [pc, #284]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e06f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e067      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6a:	4b37      	ldr	r3, [pc, #220]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4934      	ldr	r1, [pc, #208]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7fe fcce 	bl	800361c <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c84:	f7fe fcca 	bl	800361c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e04f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 020c 	and.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1eb      	bne.n	8004c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cac:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d20c      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b20      	ldr	r3, [pc, #128]	@ (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e032      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b19      	ldr	r3, [pc, #100]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4916      	ldr	r1, [pc, #88]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	490e      	ldr	r1, [pc, #56]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d12:	f000 f821 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490a      	ldr	r1, [pc, #40]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fc2e 	bl	8003594 <HAL_InitTick>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023c00 	.word	0x40023c00
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	0800bce0 	.word	0x0800bce0
 8004d50:	20000004 	.word	0x20000004
 8004d54:	20000008 	.word	0x20000008

08004d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b094      	sub	sp, #80	@ 0x50
 8004d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d70:	4b79      	ldr	r3, [pc, #484]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d00d      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x40>
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	f200 80e1 	bhi.w	8004f44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x34>
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8a:	e0db      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b73      	ldr	r3, [pc, #460]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d90:	e0db      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d92:	4b73      	ldr	r3, [pc, #460]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d96:	e0d8      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d98:	4b6f      	ldr	r3, [pc, #444]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d063      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dae:	4b6a      	ldr	r3, [pc, #424]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	2200      	movs	r2, #0
 8004db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dca:	4622      	mov	r2, r4
 8004dcc:	462b      	mov	r3, r5
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	0159      	lsls	r1, r3, #5
 8004dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ddc:	0150      	lsls	r0, r2, #5
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4621      	mov	r1, r4
 8004de4:	1a51      	subs	r1, r2, r1
 8004de6:	6139      	str	r1, [r7, #16]
 8004de8:	4629      	mov	r1, r5
 8004dea:	eb63 0301 	sbc.w	r3, r3, r1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	018b      	lsls	r3, r1, #6
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e06:	4651      	mov	r1, sl
 8004e08:	018a      	lsls	r2, r1, #6
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e10:	4659      	mov	r1, fp
 8004e12:	eb63 0901 	sbc.w	r9, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	462b      	mov	r3, r5
 8004e38:	eb49 0303 	adc.w	r3, r9, r3
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	024b      	lsls	r3, r1, #9
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e54:	4621      	mov	r1, r4
 8004e56:	024a      	lsls	r2, r1, #9
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	2200      	movs	r2, #0
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e68:	f7fb fa12 	bl	8000290 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e74:	e058      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e76:	4b38      	ldr	r3, [pc, #224]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	4611      	mov	r1, r2
 8004e82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	0159      	lsls	r1, r3, #5
 8004e9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea2:	0150      	lsls	r0, r2, #5
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eae:	4649      	mov	r1, r9
 8004eb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ec8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ecc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	00eb      	lsls	r3, r5, #3
 8004eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ede:	00e2      	lsls	r2, r4, #3
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	18e3      	adds	r3, r4, r3
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	464b      	mov	r3, r9
 8004eec:	eb45 0303 	adc.w	r3, r5, r3
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004efe:	4629      	mov	r1, r5
 8004f00:	028b      	lsls	r3, r1, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f08:	4621      	mov	r1, r4
 8004f0a:	028a      	lsls	r2, r1, #10
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f12:	2200      	movs	r2, #0
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	61fa      	str	r2, [r7, #28]
 8004f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f1c:	f7fb f9b8 	bl	8000290 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3750      	adds	r7, #80	@ 0x50
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	007a1200 	.word	0x007a1200

08004f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f68:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000004 	.word	0x20000004

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff0 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a9b      	lsrs	r3, r3, #10
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	0800bcf0 	.word	0x0800bcf0

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fa8:	f7ff ffdc 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0b5b      	lsrs	r3, r3, #13
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800bcf0 	.word	0x0800bcf0

08004fcc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d038      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff4:	4b68      	ldr	r3, [pc, #416]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffa:	f7fe fb0f 	bl	800361c <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005002:	f7fe fb0b 	bl	800361c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0bd      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005014:	4b61      	ldr	r3, [pc, #388]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	071b      	lsls	r3, r3, #28
 8005032:	495a      	ldr	r1, [pc, #360]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800503a:	4b57      	ldr	r3, [pc, #348]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005040:	f7fe faec 	bl	800361c <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005048:	f7fe fae8 	bl	800361c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e09a      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800505a:	4b50      	ldr	r3, [pc, #320]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8083 	beq.w	800517a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	4b48      	ldr	r3, [pc, #288]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	4a47      	ldr	r2, [pc, #284]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005082:	6413      	str	r3, [r2, #64]	@ 0x40
 8005084:	4b45      	ldr	r3, [pc, #276]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005090:	4b43      	ldr	r3, [pc, #268]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a42      	ldr	r2, [pc, #264]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509c:	f7fe fabe 	bl	800361c <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a4:	f7fe faba 	bl	800361c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e06c      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050b6:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c2:	4b36      	ldr	r3, [pc, #216]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ca:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d02f      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d028      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e0:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ea:	4b2e      	ldr	r3, [pc, #184]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f0:	4b2c      	ldr	r3, [pc, #176]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050f6:	4a29      	ldr	r2, [pc, #164]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050fc:	4b27      	ldr	r3, [pc, #156]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d114      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005108:	f7fe fa88 	bl	800361c <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510e:	e00a      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7fe fa84 	bl	800361c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e034      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005126:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0ee      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800513e:	d10d      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005140:	4b16      	ldr	r3, [pc, #88]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	4911      	ldr	r1, [pc, #68]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
 800515a:	e005      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800515c:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a0e      	ldr	r2, [pc, #56]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	4909      	ldr	r1, [pc, #36]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7d1a      	ldrb	r2, [r3, #20]
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800518c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	42470068 	.word	0x42470068
 800519c:	40023800 	.word	0x40023800
 80051a0:	40007000 	.word	0x40007000
 80051a4:	42470e40 	.word	0x42470e40
 80051a8:	424711e0 	.word	0x424711e0

080051ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e073      	b.n	80052a6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7f5b      	ldrb	r3, [r3, #29]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd ff2c 	bl	800302c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d055      	beq.n	8005294 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	22ca      	movs	r2, #202	@ 0xca
 80051ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2253      	movs	r2, #83	@ 0x53
 80051f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa49 	bl	8005690 <RTC_EnterInitMode>
 80051fe:	4603      	mov	r3, r0
 8005200:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d12c      	bne.n	8005262 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800521a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6919      	ldr	r1, [r3, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	041a      	lsls	r2, r3, #16
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa50 	bl	80056fe <RTC_ExitInitMode>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	22ff      	movs	r2, #255	@ 0xff
 8005290:	625a      	str	r2, [r3, #36]	@ 0x24
 8005292:	e001      	b.n	8005298 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052ae:	b590      	push	{r4, r7, lr}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	7f1b      	ldrb	r3, [r3, #28]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_RTC_SetTime+0x1c>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e087      	b.n	80053da <HAL_RTC_SetTime+0x12c>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2202      	movs	r2, #2
 80052d4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d126      	bne.n	800532a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2200      	movs	r2, #0
 80052ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fa27 	bl	8005748 <RTC_ByteToBcd2>
 80052fa:	4603      	mov	r3, r0
 80052fc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa20 	bl	8005748 <RTC_ByteToBcd2>
 8005308:	4603      	mov	r3, r0
 800530a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800530c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	789b      	ldrb	r3, [r3, #2]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fa18 	bl	8005748 <RTC_ByteToBcd2>
 8005318:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800531a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	78db      	ldrb	r3, [r3, #3]
 8005322:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e018      	b.n	800535c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800534a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005350:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	22ca      	movs	r2, #202	@ 0xca
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2253      	movs	r2, #83	@ 0x53
 800536a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f98f 	bl	8005690 <RTC_EnterInitMode>
 8005372:	4603      	mov	r3, r0
 8005374:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d120      	bne.n	80053be <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005386:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800538a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800539a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f9a2 	bl	80056fe <RTC_ExitInitMode>
 80053ba:	4603      	mov	r3, r0
 80053bc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053be:	7cfb      	ldrb	r3, [r7, #19]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	22ff      	movs	r2, #255	@ 0xff
 80053d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]

  return status;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd90      	pop	{r4, r7, pc}

080053e2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005414:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005418:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	0a1b      	lsrs	r3, r3, #8
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	0d9b      	lsrs	r3, r3, #22
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11a      	bne.n	8005494 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f98e 	bl	8005784 <RTC_Bcd2ToByte>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f985 	bl	8005784 <RTC_Bcd2ToByte>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	789b      	ldrb	r3, [r3, #2]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f97c 	bl	8005784 <RTC_Bcd2ToByte>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800549e:	b590      	push	{r4, r7, lr}
 80054a0:	b087      	sub	sp, #28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	7f1b      	ldrb	r3, [r3, #28]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_RTC_SetDate+0x1c>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e071      	b.n	800559e <HAL_RTC_SetDate+0x100>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2202      	movs	r2, #2
 80054c4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10e      	bne.n	80054ea <HAL_RTC_SetDate+0x4c>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	330a      	adds	r3, #10
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d11c      	bne.n	800552a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	78db      	ldrb	r3, [r3, #3]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f927 	bl	8005748 <RTC_ByteToBcd2>
 80054fa:	4603      	mov	r3, r0
 80054fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f920 	bl	8005748 <RTC_ByteToBcd2>
 8005508:	4603      	mov	r3, r0
 800550a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800550c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f918 	bl	8005748 <RTC_ByteToBcd2>
 8005518:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800551a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e00e      	b.n	8005548 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005536:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800553c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	22ca      	movs	r2, #202	@ 0xca
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2253      	movs	r2, #83	@ 0x53
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f899 	bl	8005690 <RTC_EnterInitMode>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10c      	bne.n	8005582 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005572:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005576:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f8c0 	bl	80056fe <RTC_ExitInitMode>
 800557e:	4603      	mov	r3, r0
 8005580:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	22ff      	movs	r2, #255	@ 0xff
 8005594:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]

  return status;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}

080055a6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	0b5b      	lsrs	r3, r3, #13
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d11a      	bne.n	800563a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	78db      	ldrb	r3, [r3, #3]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 f8bb 	bl	8005784 <RTC_Bcd2ToByte>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f8b2 	bl	8005784 <RTC_Bcd2ToByte>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	789b      	ldrb	r3, [r3, #2]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f8a9 	bl	8005784 <RTC_Bcd2ToByte>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0d      	ldr	r2, [pc, #52]	@ (800568c <HAL_RTC_WaitForSynchro+0x48>)
 8005656:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005658:	f7fd ffe0 	bl	800361c <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800565e:	e009      	b.n	8005674 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005660:	f7fd ffdc 	bl	800361c <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800566e:	d901      	bls.n	8005674 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e007      	b.n	8005684 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0ee      	beq.n	8005660 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	00013f5f 	.word	0x00013f5f

08005690 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d122      	bne.n	80056f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056be:	f7fd ffad 	bl	800361c <HAL_GetTick>
 80056c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056c4:	e00c      	b.n	80056e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056c6:	f7fd ffa9 	bl	800361c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056d4:	d904      	bls.n	80056e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2204      	movs	r2, #4
 80056da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <RTC_EnterInitMode+0x64>
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d1e8      	bne.n	80056c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005718:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff8b 	bl	8005644 <HAL_RTC_WaitForSynchro>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005756:	e005      	b.n	8005764 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	3b0a      	subs	r3, #10
 8005762:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	2b09      	cmp	r3, #9
 8005768:	d8f6      	bhi.n	8005758 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	b2da      	uxtb	r2, r3
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	4313      	orrs	r3, r2
 8005776:	b2db      	uxtb	r3, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	b2db      	uxtb	r3, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e041      	b.n	8005856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fd fd50 	bl	800328c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f000 fa72 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d001      	beq.n	8005878 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e03c      	b.n	80058f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1e      	ldr	r2, [pc, #120]	@ (8005900 <HAL_TIM_Base_Start+0xa0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_TIM_Base_Start+0x5c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005892:	d013      	beq.n	80058bc <HAL_TIM_Base_Start+0x5c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <HAL_TIM_Base_Start+0xa4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_TIM_Base_Start+0x5c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <HAL_TIM_Base_Start+0xa8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_TIM_Base_Start+0x5c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a17      	ldr	r2, [pc, #92]	@ (800590c <HAL_TIM_Base_Start+0xac>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIM_Base_Start+0x5c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a16      	ldr	r2, [pc, #88]	@ (8005910 <HAL_TIM_Base_Start+0xb0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d111      	bne.n	80058e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d010      	beq.n	80058f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	e007      	b.n	80058f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40010000 	.word	0x40010000
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	40014000 	.word	0x40014000

08005914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0202 	mvn.w	r2, #2
 8005948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9a3 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f995 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f9a6 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d020      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0204 	mvn.w	r2, #4
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f97d 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f96f 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f980 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0208 	mvn.w	r2, #8
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f957 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f949 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f95a 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2208      	movs	r2, #8
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f931 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f923 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f934 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f901 	bl	8005c82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 faba 	bl	8006018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f905 	bl	8005cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0220 	mvn.w	r2, #32
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa8c 	bl	8006004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_ConfigClockSource+0x1c>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e0b4      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x186>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b48:	d03e      	beq.n	8005bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8005b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4e:	f200 8087 	bhi.w	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b56:	f000 8086 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x172>
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5e:	d87f      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b70      	cmp	r3, #112	@ 0x70
 8005b62:	d01a      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0xa6>
 8005b64:	2b70      	cmp	r3, #112	@ 0x70
 8005b66:	d87b      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b68:	2b60      	cmp	r3, #96	@ 0x60
 8005b6a:	d050      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x11a>
 8005b6c:	2b60      	cmp	r3, #96	@ 0x60
 8005b6e:	d877      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b70:	2b50      	cmp	r3, #80	@ 0x50
 8005b72:	d03c      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0xfa>
 8005b74:	2b50      	cmp	r3, #80	@ 0x50
 8005b76:	d873      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d058      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x13a>
 8005b7c:	2b40      	cmp	r3, #64	@ 0x40
 8005b7e:	d86f      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b80:	2b30      	cmp	r3, #48	@ 0x30
 8005b82:	d064      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0x15a>
 8005b84:	2b30      	cmp	r3, #48	@ 0x30
 8005b86:	d86b      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d060      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0x15a>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d867      	bhi.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d05c      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0x15a>
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d05a      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0x15a>
 8005b98:	e062      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005baa:	f000 f99d 	bl	8005ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	609a      	str	r2, [r3, #8]
      break;
 8005bc6:	e04f      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bd8:	f000 f986 	bl	8005ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bea:	609a      	str	r2, [r3, #8]
      break;
 8005bec:	e03c      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 f8fa 	bl	8005df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2150      	movs	r1, #80	@ 0x50
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f953 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e02c      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f000 f919 	bl	8005e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2160      	movs	r1, #96	@ 0x60
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f943 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c2c:	e01c      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f000 f8da 	bl	8005df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2140      	movs	r1, #64	@ 0x40
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 f933 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e00c      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f000 f92a 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c5e:	e003      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
      break;
 8005c64:	e000      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a37      	ldr	r2, [pc, #220]	@ (8005dd8 <TIM_Base_SetConfig+0xf0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00f      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d06:	d00b      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a34      	ldr	r2, [pc, #208]	@ (8005ddc <TIM_Base_SetConfig+0xf4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d007      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a33      	ldr	r2, [pc, #204]	@ (8005de0 <TIM_Base_SetConfig+0xf8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_Base_SetConfig+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a32      	ldr	r2, [pc, #200]	@ (8005de4 <TIM_Base_SetConfig+0xfc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d108      	bne.n	8005d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a28      	ldr	r2, [pc, #160]	@ (8005dd8 <TIM_Base_SetConfig+0xf0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01b      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d017      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a25      	ldr	r2, [pc, #148]	@ (8005ddc <TIM_Base_SetConfig+0xf4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a24      	ldr	r2, [pc, #144]	@ (8005de0 <TIM_Base_SetConfig+0xf8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00f      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a23      	ldr	r2, [pc, #140]	@ (8005de4 <TIM_Base_SetConfig+0xfc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00b      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	@ (8005de8 <TIM_Base_SetConfig+0x100>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a21      	ldr	r2, [pc, #132]	@ (8005dec <TIM_Base_SetConfig+0x104>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_Base_SetConfig+0x8a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a20      	ldr	r2, [pc, #128]	@ (8005df0 <TIM_Base_SetConfig+0x108>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d108      	bne.n	8005d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd8 <TIM_Base_SetConfig+0xf0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d103      	bne.n	8005db2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f043 0204 	orr.w	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	40000800 	.word	0x40000800
 8005de4:	40000c00 	.word	0x40000c00
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f023 0201 	bic.w	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f023 0210 	bic.w	r2, r3, #16
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	031b      	lsls	r3, r3, #12
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f043 0307 	orr.w	r3, r3, #7
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	021a      	lsls	r2, r3, #8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	609a      	str	r2, [r3, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e050      	b.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40000c00 	.word	0x40000c00
 8006000:	40014000 	.word	0x40014000

08006004 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e042      	b.n	80060c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fd f994 	bl	8003380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	@ 0x24
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800606e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fdd3 	bl	8006c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	@ 0x28
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d175      	bne.n	80061d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_UART_Transmit+0x2c>
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e06e      	b.n	80061da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2221      	movs	r2, #33	@ 0x21
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800610a:	f7fd fa87 	bl	800361c <HAL_GetTick>
 800610e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006124:	d108      	bne.n	8006138 <HAL_UART_Transmit+0x6c>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	e003      	b.n	8006140 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006140:	e02e      	b.n	80061a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	2180      	movs	r1, #128	@ 0x80
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fb37 	bl	80067c0 <UART_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e03a      	b.n	80061da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	3302      	adds	r3, #2
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e007      	b.n	8006192 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	3301      	adds	r3, #1
 8006190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1cb      	bne.n	8006142 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	2140      	movs	r1, #64	@ 0x40
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fb03 	bl	80067c0 <UART_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e006      	b.n	80061da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e000      	b.n	80061da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d112      	bne.n	8006222 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_UART_Receive_IT+0x26>
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e00b      	b.n	8006224 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	461a      	mov	r2, r3
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fb2a 	bl	8006872 <UART_Start_Receive_IT>
 800621e:	4603      	mov	r3, r0
 8006220:	e000      	b.n	8006224 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b0ba      	sub	sp, #232	@ 0xe8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006252:	2300      	movs	r3, #0
 8006254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006258:	2300      	movs	r3, #0
 800625a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800626a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10f      	bne.n	8006292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <HAL_UART_IRQHandler+0x66>
 800627e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc07 	bl	8006a9e <UART_Receive_IT>
      return;
 8006290:	e273      	b.n	800677a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80de 	beq.w	8006458 <HAL_UART_IRQHandler+0x22c>
 800629c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d106      	bne.n	80062b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80d1 	beq.w	8006458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <HAL_UART_IRQHandler+0xae>
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d2:	f043 0201 	orr.w	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_UART_IRQHandler+0xd2>
 80062e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	f043 0202 	orr.w	r2, r3, #2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <HAL_UART_IRQHandler+0xf6>
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631a:	f043 0204 	orr.w	r2, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d011      	beq.n	8006352 <HAL_UART_IRQHandler+0x126>
 800632e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d105      	bne.n	8006346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800633a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	f043 0208 	orr.w	r2, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 820a 	beq.w	8006770 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_UART_IRQHandler+0x14e>
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb92 	bl	8006a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006384:	2b40      	cmp	r3, #64	@ 0x40
 8006386:	bf0c      	ite	eq
 8006388:	2301      	moveq	r3, #1
 800638a:	2300      	movne	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_UART_IRQHandler+0x17a>
 800639e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d04f      	beq.n	8006446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa9d 	bl	80068e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b6:	2b40      	cmp	r3, #64	@ 0x40
 80063b8:	d141      	bne.n	800643e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3314      	adds	r3, #20
 80063c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1d9      	bne.n	80063ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d013      	beq.n	8006436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006412:	4a8a      	ldr	r2, [pc, #552]	@ (800663c <HAL_UART_IRQHandler+0x410>)
 8006414:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	4618      	mov	r0, r3
 800641c:	f7fd faaf 	bl	800397e <HAL_DMA_Abort_IT>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	e00e      	b.n	8006454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9ac 	bl	8006794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643c:	e00a      	b.n	8006454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9a8 	bl	8006794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	e006      	b.n	8006454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9a4 	bl	8006794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006452:	e18d      	b.n	8006770 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	bf00      	nop
    return;
 8006456:	e18b      	b.n	8006770 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645c:	2b01      	cmp	r3, #1
 800645e:	f040 8167 	bne.w	8006730 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8160 	beq.w	8006730 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8159 	beq.w	8006730 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	f040 80ce 	bne.w	8006640 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80a9 	beq.w	800660c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064c2:	429a      	cmp	r2, r3
 80064c4:	f080 80a2 	bcs.w	800660c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064da:	f000 8088 	beq.w	80065ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800650a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800650e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006516:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1d9      	bne.n	80064de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3314      	adds	r3, #20
 8006530:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800653a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800653c:	f023 0301 	bic.w	r3, r3, #1
 8006540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3314      	adds	r3, #20
 800654a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800654e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006552:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006556:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e1      	bne.n	800652a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3314      	adds	r3, #20
 800656c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800657c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3314      	adds	r3, #20
 8006586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800658a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800658c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e3      	bne.n	8006566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065be:	f023 0310 	bic.w	r3, r3, #16
 80065c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e3      	bne.n	80065ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fd f958 	bl	800389e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	b29b      	uxth	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f8cf 	bl	80067a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800660a:	e0b3      	b.n	8006774 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006614:	429a      	cmp	r2, r3
 8006616:	f040 80ad 	bne.w	8006774 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006624:	f040 80a6 	bne.w	8006774 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f8b7 	bl	80067a8 <HAL_UARTEx_RxEventCallback>
      return;
 800663a:	e09b      	b.n	8006774 <HAL_UART_IRQHandler+0x548>
 800663c:	080069ad 	.word	0x080069ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006648:	b29b      	uxth	r3, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 808e 	beq.w	8006778 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800665c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8089 	beq.w	8006778 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800667c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800668a:	647a      	str	r2, [r7, #68]	@ 0x44
 800668c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e3      	bne.n	8006666 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3314      	adds	r3, #20
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	623b      	str	r3, [r7, #32]
   return(result);
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3314      	adds	r3, #20
 80066be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80066c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e3      	bne.n	800669e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0310 	bic.w	r3, r3, #16
 80066fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006708:	61fa      	str	r2, [r7, #28]
 800670a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	617b      	str	r3, [r7, #20]
   return(result);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e3      	bne.n	80066e4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f83d 	bl	80067a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800672e:	e023      	b.n	8006778 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <HAL_UART_IRQHandler+0x524>
 800673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f940 	bl	80069ce <UART_Transmit_IT>
    return;
 800674e:	e014      	b.n	800677a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <HAL_UART_IRQHandler+0x54e>
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f980 	bl	8006a6e <UART_EndTransmit_IT>
    return;
 800676e:	e004      	b.n	800677a <HAL_UART_IRQHandler+0x54e>
    return;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <HAL_UART_IRQHandler+0x54e>
      return;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_UART_IRQHandler+0x54e>
      return;
 8006778:	bf00      	nop
  }
}
 800677a:	37e8      	adds	r7, #232	@ 0xe8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	4613      	mov	r3, r2
 80067ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d0:	e03b      	b.n	800684a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d037      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fc ff1f 	bl	800361c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	6a3a      	ldr	r2, [r7, #32]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e03a      	b.n	800686a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0304 	and.w	r3, r3, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d023      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b80      	cmp	r3, #128	@ 0x80
 8006806:	d020      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b40      	cmp	r3, #64	@ 0x40
 800680c:	d01d      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b08      	cmp	r3, #8
 800681a:	d116      	bne.n	800684a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f857 	bl	80068e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2208      	movs	r2, #8
 800683c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e00f      	b.n	800686a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4013      	ands	r3, r2
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	429a      	cmp	r2, r3
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	429a      	cmp	r2, r3
 8006866:	d0b4      	beq.n	80067d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	4613      	mov	r3, r2
 800687e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2222      	movs	r2, #34	@ 0x22
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0220 	orr.w	r2, r2, #32
 80068d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b095      	sub	sp, #84	@ 0x54
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800690e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e5      	bne.n	80068ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3314      	adds	r3, #20
 8006928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	61fb      	str	r3, [r7, #28]
   return(result);
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695a:	2b01      	cmp	r3, #1
 800695c:	d119      	bne.n	8006992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60bb      	str	r3, [r7, #8]
   return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	647b      	str	r3, [r7, #68]	@ 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800697e:	61ba      	str	r2, [r7, #24]
 8006980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	613b      	str	r3, [r7, #16]
   return(result);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069a0:	bf00      	nop
 80069a2:	3754      	adds	r7, #84	@ 0x54
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fee7 	bl	8006794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b21      	cmp	r3, #33	@ 0x21
 80069e0:	d13e      	bne.n	8006a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ea:	d114      	bne.n	8006a16 <UART_Transmit_IT+0x48>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d110      	bne.n	8006a16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	1c9a      	adds	r2, r3, #2
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	621a      	str	r2, [r3, #32]
 8006a14:	e008      	b.n	8006a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	1c59      	adds	r1, r3, #1
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6211      	str	r1, [r2, #32]
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	4619      	mov	r1, r3
 8006a36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10f      	bne.n	8006a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e000      	b.n	8006a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a60:	2302      	movs	r3, #2
  }
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fe76 	bl	8006780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b08c      	sub	sp, #48	@ 0x30
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b22      	cmp	r3, #34	@ 0x22
 8006ab8:	f040 80aa 	bne.w	8006c10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac4:	d115      	bne.n	8006af2 <UART_Receive_IT+0x54>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d111      	bne.n	8006af2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8006af0:	e024      	b.n	8006b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b00:	d007      	beq.n	8006b12 <UART_Receive_IT+0x74>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <UART_Receive_IT+0x82>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e008      	b.n	8006b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d15d      	bne.n	8006c0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0220 	bic.w	r2, r2, #32
 8006b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0201 	bic.w	r2, r2, #1
 8006b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d135      	bne.n	8006c02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	613b      	str	r3, [r7, #16]
   return(result);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f023 0310 	bic.w	r3, r3, #16
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bbc:	623a      	str	r2, [r7, #32]
 8006bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e5      	bne.n	8006b9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d10a      	bne.n	8006bf4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fdd4 	bl	80067a8 <HAL_UARTEx_RxEventCallback>
 8006c00:	e002      	b.n	8006c08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fb fa06 	bl	8002014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e002      	b.n	8006c12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3730      	adds	r7, #48	@ 0x30
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c20:	b0c0      	sub	sp, #256	@ 0x100
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	68d9      	ldr	r1, [r3, #12]
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	ea40 0301 	orr.w	r3, r0, r1
 8006c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c74:	f021 010c 	bic.w	r1, r1, #12
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c82:	430b      	orrs	r3, r1
 8006c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c96:	6999      	ldr	r1, [r3, #24]
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	ea40 0301 	orr.w	r3, r0, r1
 8006ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b8f      	ldr	r3, [pc, #572]	@ (8006ee8 <UART_SetConfig+0x2cc>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d005      	beq.n	8006cbc <UART_SetConfig+0xa0>
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8006eec <UART_SetConfig+0x2d0>)
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d104      	bne.n	8006cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fe f972 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cc4:	e003      	b.n	8006cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc6:	f7fe f959 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8006cca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd8:	f040 810c 	bne.w	8006ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	1891      	adds	r1, r2, r2
 8006cf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cf6:	415b      	adcs	r3, r3
 8006cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cfe:	4621      	mov	r1, r4
 8006d00:	eb12 0801 	adds.w	r8, r2, r1
 8006d04:	4629      	mov	r1, r5
 8006d06:	eb43 0901 	adc.w	r9, r3, r1
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d1e:	4690      	mov	r8, r2
 8006d20:	4699      	mov	r9, r3
 8006d22:	4623      	mov	r3, r4
 8006d24:	eb18 0303 	adds.w	r3, r8, r3
 8006d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	eb49 0303 	adc.w	r3, r9, r3
 8006d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	18db      	adds	r3, r3, r3
 8006d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d50:	4613      	mov	r3, r2
 8006d52:	eb42 0303 	adc.w	r3, r2, r3
 8006d56:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d60:	f7f9 fa96 	bl	8000290 <__aeabi_uldivmod>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4b61      	ldr	r3, [pc, #388]	@ (8006ef0 <UART_SetConfig+0x2d4>)
 8006d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	011c      	lsls	r4, r3, #4
 8006d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	1891      	adds	r1, r2, r2
 8006d8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d8c:	415b      	adcs	r3, r3
 8006d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d94:	4641      	mov	r1, r8
 8006d96:	eb12 0a01 	adds.w	sl, r2, r1
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006db4:	4692      	mov	sl, r2
 8006db6:	469b      	mov	fp, r3
 8006db8:	4643      	mov	r3, r8
 8006dba:	eb1a 0303 	adds.w	r3, sl, r3
 8006dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8006dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006de0:	460b      	mov	r3, r1
 8006de2:	18db      	adds	r3, r3, r3
 8006de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de6:	4613      	mov	r3, r2
 8006de8:	eb42 0303 	adc.w	r3, r2, r3
 8006dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006df6:	f7f9 fa4b 	bl	8000290 <__aeabi_uldivmod>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef0 <UART_SetConfig+0x2d4>)
 8006e02:	fba3 2301 	umull	r2, r3, r3, r1
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	2264      	movs	r2, #100	@ 0x64
 8006e0a:	fb02 f303 	mul.w	r3, r2, r3
 8006e0e:	1acb      	subs	r3, r1, r3
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e16:	4b36      	ldr	r3, [pc, #216]	@ (8006ef0 <UART_SetConfig+0x2d4>)
 8006e18:	fba3 2302 	umull	r2, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e24:	441c      	add	r4, r3
 8006e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	1891      	adds	r1, r2, r2
 8006e3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e40:	415b      	adcs	r3, r3
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e48:	4641      	mov	r1, r8
 8006e4a:	1851      	adds	r1, r2, r1
 8006e4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e4e:	4649      	mov	r1, r9
 8006e50:	414b      	adcs	r3, r1
 8006e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e60:	4659      	mov	r1, fp
 8006e62:	00cb      	lsls	r3, r1, #3
 8006e64:	4651      	mov	r1, sl
 8006e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e6a:	4651      	mov	r1, sl
 8006e6c:	00ca      	lsls	r2, r1, #3
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	4642      	mov	r2, r8
 8006e76:	189b      	adds	r3, r3, r2
 8006e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	460a      	mov	r2, r1
 8006e80:	eb42 0303 	adc.w	r3, r2, r3
 8006e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	18db      	adds	r3, r3, r3
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	eb42 0303 	adc.w	r3, r2, r3
 8006ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006eb2:	f7f9 f9ed 	bl	8000290 <__aeabi_uldivmod>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <UART_SetConfig+0x2d4>)
 8006ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	2164      	movs	r1, #100	@ 0x64
 8006ec4:	fb01 f303 	mul.w	r3, r1, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	3332      	adds	r3, #50	@ 0x32
 8006ece:	4a08      	ldr	r2, [pc, #32]	@ (8006ef0 <UART_SetConfig+0x2d4>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	f003 0207 	and.w	r2, r3, #7
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4422      	add	r2, r4
 8006ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ee4:	e106      	b.n	80070f4 <UART_SetConfig+0x4d8>
 8006ee6:	bf00      	nop
 8006ee8:	40011000 	.word	0x40011000
 8006eec:	40011400 	.word	0x40011400
 8006ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006efe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	1891      	adds	r1, r2, r2
 8006f0c:	6239      	str	r1, [r7, #32]
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f16:	4641      	mov	r1, r8
 8006f18:	1854      	adds	r4, r2, r1
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	eb43 0501 	adc.w	r5, r3, r1
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	00eb      	lsls	r3, r5, #3
 8006f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f2e:	00e2      	lsls	r2, r4, #3
 8006f30:	4614      	mov	r4, r2
 8006f32:	461d      	mov	r5, r3
 8006f34:	4643      	mov	r3, r8
 8006f36:	18e3      	adds	r3, r4, r3
 8006f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	eb45 0303 	adc.w	r3, r5, r3
 8006f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f62:	4629      	mov	r1, r5
 8006f64:	008b      	lsls	r3, r1, #2
 8006f66:	4621      	mov	r1, r4
 8006f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	008a      	lsls	r2, r1, #2
 8006f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f74:	f7f9 f98c 	bl	8000290 <__aeabi_uldivmod>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4b60      	ldr	r3, [pc, #384]	@ (8007100 <UART_SetConfig+0x4e4>)
 8006f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	011c      	lsls	r4, r3, #4
 8006f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	1891      	adds	r1, r2, r2
 8006f9e:	61b9      	str	r1, [r7, #24]
 8006fa0:	415b      	adcs	r3, r3
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fa8:	4641      	mov	r1, r8
 8006faa:	1851      	adds	r1, r2, r1
 8006fac:	6139      	str	r1, [r7, #16]
 8006fae:	4649      	mov	r1, r9
 8006fb0:	414b      	adcs	r3, r1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	00cb      	lsls	r3, r1, #3
 8006fc4:	4651      	mov	r1, sl
 8006fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fca:	4651      	mov	r1, sl
 8006fcc:	00ca      	lsls	r2, r1, #3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	189b      	adds	r3, r3, r2
 8006fd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fdc:	464b      	mov	r3, r9
 8006fde:	460a      	mov	r2, r1
 8006fe0:	eb42 0303 	adc.w	r3, r2, r3
 8006fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ff2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007000:	4649      	mov	r1, r9
 8007002:	008b      	lsls	r3, r1, #2
 8007004:	4641      	mov	r1, r8
 8007006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800700a:	4641      	mov	r1, r8
 800700c:	008a      	lsls	r2, r1, #2
 800700e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007012:	f7f9 f93d 	bl	8000290 <__aeabi_uldivmod>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4611      	mov	r1, r2
 800701c:	4b38      	ldr	r3, [pc, #224]	@ (8007100 <UART_SetConfig+0x4e4>)
 800701e:	fba3 2301 	umull	r2, r3, r3, r1
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	2264      	movs	r2, #100	@ 0x64
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	1acb      	subs	r3, r1, r3
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	3332      	adds	r3, #50	@ 0x32
 8007030:	4a33      	ldr	r2, [pc, #204]	@ (8007100 <UART_SetConfig+0x4e4>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800703c:	441c      	add	r4, r3
 800703e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007042:	2200      	movs	r2, #0
 8007044:	673b      	str	r3, [r7, #112]	@ 0x70
 8007046:	677a      	str	r2, [r7, #116]	@ 0x74
 8007048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800704c:	4642      	mov	r2, r8
 800704e:	464b      	mov	r3, r9
 8007050:	1891      	adds	r1, r2, r2
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	415b      	adcs	r3, r3
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800705c:	4641      	mov	r1, r8
 800705e:	1851      	adds	r1, r2, r1
 8007060:	6039      	str	r1, [r7, #0]
 8007062:	4649      	mov	r1, r9
 8007064:	414b      	adcs	r3, r1
 8007066:	607b      	str	r3, [r7, #4]
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007074:	4659      	mov	r1, fp
 8007076:	00cb      	lsls	r3, r1, #3
 8007078:	4651      	mov	r1, sl
 800707a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800707e:	4651      	mov	r1, sl
 8007080:	00ca      	lsls	r2, r1, #3
 8007082:	4610      	mov	r0, r2
 8007084:	4619      	mov	r1, r3
 8007086:	4603      	mov	r3, r0
 8007088:	4642      	mov	r2, r8
 800708a:	189b      	adds	r3, r3, r2
 800708c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800708e:	464b      	mov	r3, r9
 8007090:	460a      	mov	r2, r1
 8007092:	eb42 0303 	adc.w	r3, r2, r3
 8007096:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80070a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070b0:	4649      	mov	r1, r9
 80070b2:	008b      	lsls	r3, r1, #2
 80070b4:	4641      	mov	r1, r8
 80070b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ba:	4641      	mov	r1, r8
 80070bc:	008a      	lsls	r2, r1, #2
 80070be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070c2:	f7f9 f8e5 	bl	8000290 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <UART_SetConfig+0x4e4>)
 80070cc:	fba3 1302 	umull	r1, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	2164      	movs	r1, #100	@ 0x64
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	3332      	adds	r3, #50	@ 0x32
 80070de:	4a08      	ldr	r2, [pc, #32]	@ (8007100 <UART_SetConfig+0x4e4>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	f003 020f 	and.w	r2, r3, #15
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4422      	add	r2, r4
 80070f2:	609a      	str	r2, [r3, #8]
}
 80070f4:	bf00      	nop
 80070f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070fa:	46bd      	mov	sp, r7
 80070fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007100:	51eb851f 	.word	0x51eb851f

08007104 <__NVIC_SetPriority>:
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007114:	2b00      	cmp	r3, #0
 8007116:	db0a      	blt.n	800712e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	490c      	ldr	r1, [pc, #48]	@ (8007150 <__NVIC_SetPriority+0x4c>)
 800711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007122:	0112      	lsls	r2, r2, #4
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	440b      	add	r3, r1
 8007128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800712c:	e00a      	b.n	8007144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	b2da      	uxtb	r2, r3
 8007132:	4908      	ldr	r1, [pc, #32]	@ (8007154 <__NVIC_SetPriority+0x50>)
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	3b04      	subs	r3, #4
 800713c:	0112      	lsls	r2, r2, #4
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	440b      	add	r3, r1
 8007142:	761a      	strb	r2, [r3, #24]
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	e000e100 	.word	0xe000e100
 8007154:	e000ed00 	.word	0xe000ed00

08007158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800715c:	2100      	movs	r1, #0
 800715e:	f06f 0004 	mvn.w	r0, #4
 8007162:	f7ff ffcf 	bl	8007104 <__NVIC_SetPriority>
#endif
}
 8007166:	bf00      	nop
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007172:	f3ef 8305 	mrs	r3, IPSR
 8007176:	603b      	str	r3, [r7, #0]
  return(result);
 8007178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800717e:	f06f 0305 	mvn.w	r3, #5
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e00c      	b.n	80071a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007186:	4b0a      	ldr	r3, [pc, #40]	@ (80071b0 <osKernelInitialize+0x44>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d105      	bne.n	800719a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800718e:	4b08      	ldr	r3, [pc, #32]	@ (80071b0 <osKernelInitialize+0x44>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007194:	2300      	movs	r3, #0
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	e002      	b.n	80071a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071a0:	687b      	ldr	r3, [r7, #4]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	2000077c 	.word	0x2000077c

080071b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ba:	f3ef 8305 	mrs	r3, IPSR
 80071be:	603b      	str	r3, [r7, #0]
  return(result);
 80071c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80071c6:	f06f 0305 	mvn.w	r3, #5
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	e010      	b.n	80071f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071ce:	4b0b      	ldr	r3, [pc, #44]	@ (80071fc <osKernelStart+0x48>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d109      	bne.n	80071ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071d6:	f7ff ffbf 	bl	8007158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071da:	4b08      	ldr	r3, [pc, #32]	@ (80071fc <osKernelStart+0x48>)
 80071dc:	2202      	movs	r2, #2
 80071de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071e0:	f002 f9c8 	bl	8009574 <vTaskStartScheduler>
      stat = osOK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	e002      	b.n	80071f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
 80071ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071f0:	687b      	ldr	r3, [r7, #4]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000077c 	.word	0x2000077c

08007200 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007206:	f3ef 8305 	mrs	r3, IPSR
 800720a:	603b      	str	r3, [r7, #0]
  return(result);
 800720c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007212:	f002 fadb 	bl	80097cc <xTaskGetTickCountFromISR>
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	e002      	b.n	8007220 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800721a:	f002 fac7 	bl	80097ac <xTaskGetTickCount>
 800721e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007220:	687b      	ldr	r3, [r7, #4]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8007232:	4b06      	ldr	r3, [pc, #24]	@ (800724c <OS_Tick_GetCount+0x20>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8007238:	4b04      	ldr	r3, [pc, #16]	@ (800724c <OS_Tick_GetCount+0x20>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	1ad3      	subs	r3, r2, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	e000e010 	.word	0xe000e010

08007250 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8007254:	4b04      	ldr	r3, [pc, #16]	@ (8007268 <OS_Tick_GetOverflow+0x18>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	f003 0301 	and.w	r3, r3, #1
}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	e000e010 	.word	0xe000e010

0800726c <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8007270:	4b03      	ldr	r3, [pc, #12]	@ (8007280 <OS_Tick_GetInterval+0x14>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	3301      	adds	r3, #1
}
 8007276:	4618      	mov	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	e000e010 	.word	0xe000e010

08007284 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800728a:	f3ef 8310 	mrs	r3, PRIMASK
 800728e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007290:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <osKernelGetSysTimerCount+0x1e>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007296:	f3ef 8311 	mrs	r3, BASEPRI
 800729a:	607b      	str	r3, [r7, #4]
  return(result);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <osKernelGetSysTimerCount+0x22>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <osKernelGetSysTimerCount+0x24>
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80072aa:	b672      	cpsid	i
}
 80072ac:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 80072ae:	f002 fa7d 	bl	80097ac <xTaskGetTickCount>
 80072b2:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 80072b4:	f7ff ffba 	bl	800722c <OS_Tick_GetCount>
 80072b8:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 80072ba:	f7ff ffc9 	bl	8007250 <OS_Tick_GetOverflow>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 80072c4:	f7ff ffb2 	bl	800722c <OS_Tick_GetCount>
 80072c8:	6138      	str	r0, [r7, #16]
    ticks++;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	3301      	adds	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 80072d0:	f7ff ffcc 	bl	800726c <OS_Tick_GetInterval>
 80072d4:	4602      	mov	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4413      	add	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 80072e8:	b662      	cpsie	i
}
 80072ea:	bf00      	nop
    __enable_irq();
  }

  return (val);
 80072ec:	693b      	ldr	r3, [r7, #16]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b08e      	sub	sp, #56	@ 0x38
 80072fa:	af04      	add	r7, sp, #16
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007306:	f3ef 8305 	mrs	r3, IPSR
 800730a:	617b      	str	r3, [r7, #20]
  return(result);
 800730c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800730e:	2b00      	cmp	r3, #0
 8007310:	d17e      	bne.n	8007410 <osThreadNew+0x11a>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d07b      	beq.n	8007410 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007318:	2380      	movs	r3, #128	@ 0x80
 800731a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800731c:	2318      	movs	r3, #24
 800731e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007324:	f04f 33ff 	mov.w	r3, #4294967295
 8007328:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d045      	beq.n	80073bc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <osThreadNew+0x48>
        name = attr->name;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <osThreadNew+0x6e>
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b38      	cmp	r3, #56	@ 0x38
 8007356:	d805      	bhi.n	8007364 <osThreadNew+0x6e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <osThreadNew+0x72>
        return (NULL);
 8007364:	2300      	movs	r3, #0
 8007366:	e054      	b.n	8007412 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	089b      	lsrs	r3, r3, #2
 8007376:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00e      	beq.n	800739e <osThreadNew+0xa8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	2ba7      	cmp	r3, #167	@ 0xa7
 8007386:	d90a      	bls.n	800739e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <osThreadNew+0xa8>
        mem = 1;
 8007398:	2301      	movs	r3, #1
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e010      	b.n	80073c0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <osThreadNew+0xca>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <osThreadNew+0xca>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <osThreadNew+0xca>
          mem = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	e001      	b.n	80073c0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d110      	bne.n	80073e8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073ce:	9202      	str	r2, [sp, #8]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6a3a      	ldr	r2, [r7, #32]
 80073da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 fed5 	bl	800918c <xTaskCreateStatic>
 80073e2:	4603      	mov	r3, r0
 80073e4:	613b      	str	r3, [r7, #16]
 80073e6:	e013      	b.n	8007410 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d110      	bne.n	8007410 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	f107 0310 	add.w	r3, r7, #16
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f001 ff23 	bl	800924c <xTaskCreate>
 8007406:	4603      	mov	r3, r0
 8007408:	2b01      	cmp	r3, #1
 800740a:	d001      	beq.n	8007410 <osThreadNew+0x11a>
            hTask = NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007410:	693b      	ldr	r3, [r7, #16]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3728      	adds	r7, #40	@ 0x28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007422:	f3ef 8305 	mrs	r3, IPSR
 8007426:	60bb      	str	r3, [r7, #8]
  return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <osDelay+0x1c>
    stat = osErrorISR;
 800742e:	f06f 0305 	mvn.w	r3, #5
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e007      	b.n	8007446 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 f861 	bl	8009508 <vTaskDelay>
    }
  }

  return (stat);
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745c:	f3ef 8305 	mrs	r3, IPSR
 8007460:	60bb      	str	r3, [r7, #8]
  return(result);
 8007462:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007464:	2b00      	cmp	r3, #0
 8007466:	d174      	bne.n	8007552 <osMutexNew+0x102>
    if (attr != NULL) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <osMutexNew+0x26>
      type = attr->attr_bits;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	e001      	b.n	800747a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <osMutexNew+0x3a>
      rmtx = 1U;
 8007484:	2301      	movs	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	e001      	b.n	800748e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d15c      	bne.n	8007552 <osMutexNew+0x102>
      mem = -1;
 8007498:	f04f 33ff 	mov.w	r3, #4294967295
 800749c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d015      	beq.n	80074d0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <osMutexNew+0x6a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b4f      	cmp	r3, #79	@ 0x4f
 80074b2:	d902      	bls.n	80074ba <osMutexNew+0x6a>
          mem = 1;
 80074b4:	2301      	movs	r3, #1
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	e00c      	b.n	80074d4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <osMutexNew+0x84>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <osMutexNew+0x84>
            mem = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	e001      	b.n	80074d4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d112      	bne.n	8007500 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2004      	movs	r0, #4
 80074e8:	f001 f82f 	bl	800854a <xQueueCreateMutexStatic>
 80074ec:	61f8      	str	r0, [r7, #28]
 80074ee:	e016      	b.n	800751e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	4619      	mov	r1, r3
 80074f6:	2001      	movs	r0, #1
 80074f8:	f001 f827 	bl	800854a <xQueueCreateMutexStatic>
 80074fc:	61f8      	str	r0, [r7, #28]
 80074fe:	e00e      	b.n	800751e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800750c:	2004      	movs	r0, #4
 800750e:	f001 f804 	bl	800851a <xQueueCreateMutex>
 8007512:	61f8      	str	r0, [r7, #28]
 8007514:	e003      	b.n	800751e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007516:	2001      	movs	r0, #1
 8007518:	f000 ffff 	bl	800851a <xQueueCreateMutex>
 800751c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <osMutexNew+0xee>
        if (attr != NULL) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <osMutexNew+0xe2>
          name = attr->name;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e001      	b.n	8007536 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007536:	68f9      	ldr	r1, [r7, #12]
 8007538:	69f8      	ldr	r0, [r7, #28]
 800753a:	f001 fdc9 	bl	80090d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <osMutexNew+0x102>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007552:	69fb      	ldr	r3, [r7, #28]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800757a:	f3ef 8305 	mrs	r3, IPSR
 800757e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007580:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007586:	f06f 0305 	mvn.w	r3, #5
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	e02c      	b.n	80075e8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007594:	f06f 0303 	mvn.w	r3, #3
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	e025      	b.n	80075e8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6938      	ldr	r0, [r7, #16]
 80075a6:	f001 f820 	bl	80085ea <xQueueTakeMutexRecursive>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d01b      	beq.n	80075e8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80075b6:	f06f 0301 	mvn.w	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e014      	b.n	80075e8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075be:	f06f 0302 	mvn.w	r3, #2
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e010      	b.n	80075e8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6938      	ldr	r0, [r7, #16]
 80075ca:	f001 fac7 	bl	8008b5c <xQueueSemaphoreTake>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d009      	beq.n	80075e8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80075da:	f06f 0301 	mvn.w	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e002      	b.n	80075e8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075e2:	f06f 0302 	mvn.w	r3, #2
 80075e6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80075e8:	697b      	ldr	r3, [r7, #20]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f023 0301 	bic.w	r3, r3, #1
 8007600:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800760e:	f3ef 8305 	mrs	r3, IPSR
 8007612:	60bb      	str	r3, [r7, #8]
  return(result);
 8007614:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <osMutexRelease+0x30>
    stat = osErrorISR;
 800761a:	f06f 0305 	mvn.w	r3, #5
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	e01f      	b.n	8007662 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007628:	f06f 0303 	mvn.w	r3, #3
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	e018      	b.n	8007662 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007636:	6938      	ldr	r0, [r7, #16]
 8007638:	f000 ffa2 	bl	8008580 <xQueueGiveMutexRecursive>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d00f      	beq.n	8007662 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007642:	f06f 0302 	mvn.w	r3, #2
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e00b      	b.n	8007662 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800764a:	2300      	movs	r3, #0
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	6938      	ldr	r0, [r7, #16]
 8007652:	f001 f801 	bl	8008658 <xQueueGenericSend>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d002      	beq.n	8007662 <osMutexRelease+0x70>
        stat = osErrorResource;
 800765c:	f06f 0302 	mvn.w	r3, #2
 8007660:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007662:	697b      	ldr	r3, [r7, #20]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	@ 0x28
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007678:	2300      	movs	r3, #0
 800767a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800767c:	f3ef 8305 	mrs	r3, IPSR
 8007680:	613b      	str	r3, [r7, #16]
  return(result);
 8007682:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007684:	2b00      	cmp	r3, #0
 8007686:	d15f      	bne.n	8007748 <osMessageQueueNew+0xdc>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d05c      	beq.n	8007748 <osMessageQueueNew+0xdc>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d059      	beq.n	8007748 <osMessageQueueNew+0xdc>
    mem = -1;
 8007694:	f04f 33ff 	mov.w	r3, #4294967295
 8007698:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d029      	beq.n	80076f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d012      	beq.n	80076ce <osMessageQueueNew+0x62>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80076ae:	d90e      	bls.n	80076ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	695a      	ldr	r2, [r3, #20]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d302      	bcc.n	80076ce <osMessageQueueNew+0x62>
        mem = 1;
 80076c8:	2301      	movs	r3, #1
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	e014      	b.n	80076f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <osMessageQueueNew+0x8c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10c      	bne.n	80076f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d108      	bne.n	80076f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	e001      	b.n	80076f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d10b      	bne.n	8007716 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2100      	movs	r1, #0
 8007708:	9100      	str	r1, [sp, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fe0f 	bl	8008330 <xQueueGenericCreateStatic>
 8007712:	61f8      	str	r0, [r7, #28]
 8007714:	e008      	b.n	8007728 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800771c:	2200      	movs	r2, #0
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fe82 	bl	800842a <xQueueGenericCreate>
 8007726:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00c      	beq.n	8007748 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <osMessageQueueNew+0xd0>
        name = attr->name;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e001      	b.n	8007740 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007740:	6979      	ldr	r1, [r7, #20]
 8007742:	69f8      	ldr	r0, [r7, #28]
 8007744:	f001 fcc4 	bl	80090d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007748:	69fb      	ldr	r3, [r7, #28]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776a:	f3ef 8305 	mrs	r3, IPSR
 800776e:	617b      	str	r3, [r7, #20]
  return(result);
 8007770:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007772:	2b00      	cmp	r3, #0
 8007774:	d028      	beq.n	80077c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <osMessageQueueGet+0x34>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <osMessageQueueGet+0x34>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007788:	f06f 0303 	mvn.w	r3, #3
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e037      	b.n	8007800 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007794:	f107 0310 	add.w	r3, r7, #16
 8007798:	461a      	mov	r2, r3
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	69b8      	ldr	r0, [r7, #24]
 800779e:	f001 faed 	bl	8008d7c <xQueueReceiveFromISR>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d003      	beq.n	80077b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80077a8:	f06f 0302 	mvn.w	r3, #2
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e027      	b.n	8007800 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d024      	beq.n	8007800 <osMessageQueueGet+0xac>
 80077b6:	4b15      	ldr	r3, [pc, #84]	@ (800780c <osMessageQueueGet+0xb8>)
 80077b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	e01b      	b.n	8007800 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <osMessageQueueGet+0x80>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80077d4:	f06f 0303 	mvn.w	r3, #3
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	e011      	b.n	8007800 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	69b8      	ldr	r0, [r7, #24]
 80077e2:	f001 f8d9 	bl	8008998 <xQueueReceive>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d009      	beq.n	8007800 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80077f2:	f06f 0301 	mvn.w	r3, #1
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	e002      	b.n	8007800 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80077fa:	f06f 0302 	mvn.w	r3, #2
 80077fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007800:	69fb      	ldr	r3, [r7, #28]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a07      	ldr	r2, [pc, #28]	@ (800783c <vApplicationGetIdleTaskMemory+0x2c>)
 8007820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4a06      	ldr	r2, [pc, #24]	@ (8007840 <vApplicationGetIdleTaskMemory+0x30>)
 8007826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2280      	movs	r2, #128	@ 0x80
 800782c:	601a      	str	r2, [r3, #0]
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000780 	.word	0x20000780
 8007840:	20000828 	.word	0x20000828

08007844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a07      	ldr	r2, [pc, #28]	@ (8007870 <vApplicationGetTimerTaskMemory+0x2c>)
 8007854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4a06      	ldr	r2, [pc, #24]	@ (8007874 <vApplicationGetTimerTaskMemory+0x30>)
 800785a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	20000a28 	.word	0x20000a28
 8007874:	20000ad0 	.word	0x20000ad0

08007878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	@ 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007884:	f001 fee6 	bl	8009654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007888:	4b5c      	ldr	r3, [pc, #368]	@ (80079fc <pvPortMalloc+0x184>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007890:	f000 f924 	bl	8007adc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007894:	4b5a      	ldr	r3, [pc, #360]	@ (8007a00 <pvPortMalloc+0x188>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8095 	bne.w	80079cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01e      	beq.n	80078e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078a8:	2208      	movs	r2, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d015      	beq.n	80078e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d06f      	beq.n	80079cc <pvPortMalloc+0x154>
 80078ec:	4b45      	ldr	r3, [pc, #276]	@ (8007a04 <pvPortMalloc+0x18c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d86a      	bhi.n	80079cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078f6:	4b44      	ldr	r3, [pc, #272]	@ (8007a08 <pvPortMalloc+0x190>)
 80078f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078fa:	4b43      	ldr	r3, [pc, #268]	@ (8007a08 <pvPortMalloc+0x190>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007900:	e004      	b.n	800790c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d903      	bls.n	800791e <pvPortMalloc+0xa6>
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f1      	bne.n	8007902 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800791e:	4b37      	ldr	r3, [pc, #220]	@ (80079fc <pvPortMalloc+0x184>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007924:	429a      	cmp	r2, r3
 8007926:	d051      	beq.n	80079cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2208      	movs	r2, #8
 800792e:	4413      	add	r3, r2
 8007930:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	1ad2      	subs	r2, r2, r3
 8007942:	2308      	movs	r3, #8
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	429a      	cmp	r2, r3
 8007948:	d920      	bls.n	800798c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800794a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <pvPortMalloc+0xfc>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	613b      	str	r3, [r7, #16]
}
 800796e:	bf00      	nop
 8007970:	bf00      	nop
 8007972:	e7fd      	b.n	8007970 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	1ad2      	subs	r2, r2, r3
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007986:	69b8      	ldr	r0, [r7, #24]
 8007988:	f000 f90a 	bl	8007ba0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800798c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a04 <pvPortMalloc+0x18c>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	4a1b      	ldr	r2, [pc, #108]	@ (8007a04 <pvPortMalloc+0x18c>)
 8007998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800799a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a04 <pvPortMalloc+0x18c>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a0c <pvPortMalloc+0x194>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d203      	bcs.n	80079ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079a6:	4b17      	ldr	r3, [pc, #92]	@ (8007a04 <pvPortMalloc+0x18c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a18      	ldr	r2, [pc, #96]	@ (8007a0c <pvPortMalloc+0x194>)
 80079ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	4b13      	ldr	r3, [pc, #76]	@ (8007a00 <pvPortMalloc+0x188>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079c2:	4b13      	ldr	r3, [pc, #76]	@ (8007a10 <pvPortMalloc+0x198>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	4a11      	ldr	r2, [pc, #68]	@ (8007a10 <pvPortMalloc+0x198>)
 80079ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079cc:	f001 fe50 	bl	8009670 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00b      	beq.n	80079f2 <pvPortMalloc+0x17a>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60fb      	str	r3, [r7, #12]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <pvPortMalloc+0x176>
	return pvReturn;
 80079f2:	69fb      	ldr	r3, [r7, #28]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3728      	adds	r7, #40	@ 0x28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20004ad8 	.word	0x20004ad8
 8007a00:	20004aec 	.word	0x20004aec
 8007a04:	20004adc 	.word	0x20004adc
 8007a08:	20004ad0 	.word	0x20004ad0
 8007a0c:	20004ae0 	.word	0x20004ae0
 8007a10:	20004ae4 	.word	0x20004ae4

08007a14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d04f      	beq.n	8007ac6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a26:	2308      	movs	r3, #8
 8007a28:	425b      	negs	r3, r3
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	4b25      	ldr	r3, [pc, #148]	@ (8007ad0 <vPortFree+0xbc>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <vPortFree+0x46>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60fb      	str	r3, [r7, #12]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <vPortFree+0x66>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60bb      	str	r3, [r7, #8]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ad0 <vPortFree+0xbc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01e      	beq.n	8007ac6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d11a      	bne.n	8007ac6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad0 <vPortFree+0xbc>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aa0:	f001 fdd8 	bl	8009654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <vPortFree+0xc0>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	4a09      	ldr	r2, [pc, #36]	@ (8007ad4 <vPortFree+0xc0>)
 8007ab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ab2:	6938      	ldr	r0, [r7, #16]
 8007ab4:	f000 f874 	bl	8007ba0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ab8:	4b07      	ldr	r3, [pc, #28]	@ (8007ad8 <vPortFree+0xc4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	4a06      	ldr	r2, [pc, #24]	@ (8007ad8 <vPortFree+0xc4>)
 8007ac0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ac2:	f001 fdd5 	bl	8009670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20004aec 	.word	0x20004aec
 8007ad4:	20004adc 	.word	0x20004adc
 8007ad8:	20004ae8 	.word	0x20004ae8

08007adc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ae2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007ae6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ae8:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <prvHeapInit+0xac>)
 8007aea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3307      	adds	r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0307 	bic.w	r3, r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007b88 <prvHeapInit+0xac>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b14:	4a1d      	ldr	r2, [pc, #116]	@ (8007b8c <prvHeapInit+0xb0>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007b8c <prvHeapInit+0xb0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b28:	2208      	movs	r2, #8
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0307 	bic.w	r3, r3, #7
 8007b36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4a15      	ldr	r2, [pc, #84]	@ (8007b90 <prvHeapInit+0xb4>)
 8007b3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b3e:	4b14      	ldr	r3, [pc, #80]	@ (8007b90 <prvHeapInit+0xb4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b46:	4b12      	ldr	r3, [pc, #72]	@ (8007b90 <prvHeapInit+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <prvHeapInit+0xb4>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a0a      	ldr	r2, [pc, #40]	@ (8007b94 <prvHeapInit+0xb8>)
 8007b6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a09      	ldr	r2, [pc, #36]	@ (8007b98 <prvHeapInit+0xbc>)
 8007b72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b74:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <prvHeapInit+0xc0>)
 8007b76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b7a:	601a      	str	r2, [r3, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	20000ed0 	.word	0x20000ed0
 8007b8c:	20004ad0 	.word	0x20004ad0
 8007b90:	20004ad8 	.word	0x20004ad8
 8007b94:	20004ae0 	.word	0x20004ae0
 8007b98:	20004adc 	.word	0x20004adc
 8007b9c:	20004aec 	.word	0x20004aec

08007ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba8:	4b28      	ldr	r3, [pc, #160]	@ (8007c4c <prvInsertBlockIntoFreeList+0xac>)
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e002      	b.n	8007bb4 <prvInsertBlockIntoFreeList+0x14>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d8f7      	bhi.n	8007bae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4413      	add	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d108      	bne.n	8007be2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	441a      	add	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	441a      	add	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d118      	bne.n	8007c28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b15      	ldr	r3, [pc, #84]	@ (8007c50 <prvInsertBlockIntoFreeList+0xb0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d00d      	beq.n	8007c1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	e008      	b.n	8007c30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c50 <prvInsertBlockIntoFreeList+0xb0>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e003      	b.n	8007c30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d002      	beq.n	8007c3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20004ad0 	.word	0x20004ad0
 8007c50:	20004ad8 	.word	0x20004ad8

08007c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f103 0208 	add.w	r2, r3, #8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f103 0208 	add.w	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0208 	add.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
}
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d103      	bne.n	8007d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e00c      	b.n	8007d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e002      	b.n	8007d24 <vListInsert+0x2e>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d2f6      	bcs.n	8007d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6892      	ldr	r2, [r2, #8]
 8007d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6852      	ldr	r2, [r2, #4]
 8007d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d103      	bne.n	8007d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	1e5a      	subs	r2, r3, #1
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f023 0201 	bic.w	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b04      	subs	r3, #4
 8007dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dec:	4a0c      	ldr	r2, [pc, #48]	@ (8007e20 <pxPortInitialiseStack+0x64>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b14      	subs	r3, #20
 8007df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f06f 0202 	mvn.w	r2, #2
 8007e0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3b20      	subs	r3, #32
 8007e10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e12:	68fb      	ldr	r3, [r7, #12]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	08007e25 	.word	0x08007e25

08007e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e2e:	4b13      	ldr	r3, [pc, #76]	@ (8007e7c <prvTaskExitError+0x58>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d00b      	beq.n	8007e50 <prvTaskExitError+0x2c>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	e7fd      	b.n	8007e4c <prvTaskExitError+0x28>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60bb      	str	r3, [r7, #8]
}
 8007e62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e64:	bf00      	nop
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0fc      	beq.n	8007e66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000010 	.word	0x20000010

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	4770      	bx	lr
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	20004b38 	.word	0x20004b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ea8:	4808      	ldr	r0, [pc, #32]	@ (8007ecc <prvPortStartFirstTask+0x24>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8814 	msr	CONTROL, r0
 8007eba:	b662      	cpsie	i
 8007ebc:	b661      	cpsie	f
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	df00      	svc	0
 8007ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eca:	bf00      	nop
 8007ecc:	e000ed08 	.word	0xe000ed08

08007ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ed6:	4b47      	ldr	r3, [pc, #284]	@ (8007ff4 <xPortStartScheduler+0x124>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a47      	ldr	r2, [pc, #284]	@ (8007ff8 <xPortStartScheduler+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10b      	bne.n	8007ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff4 <xPortStartScheduler+0x124>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ffc <xPortStartScheduler+0x12c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d10b      	bne.n	8007f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	613b      	str	r3, [r7, #16]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f1a:	4b39      	ldr	r3, [pc, #228]	@ (8008000 <xPortStartScheduler+0x130>)
 8007f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	22ff      	movs	r2, #255	@ 0xff
 8007f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <xPortStartScheduler+0x134>)
 8007f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f42:	4b31      	ldr	r3, [pc, #196]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f44:	2207      	movs	r2, #7
 8007f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f48:	e009      	b.n	8007f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	4a2d      	ldr	r2, [pc, #180]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f66:	2b80      	cmp	r3, #128	@ 0x80
 8007f68:	d0ef      	beq.n	8007f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f6a:	4b27      	ldr	r3, [pc, #156]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1c3 0307 	rsb	r3, r3, #7
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d00b      	beq.n	8007f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60bb      	str	r3, [r7, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	4a1c      	ldr	r2, [pc, #112]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f98:	4b1b      	ldr	r3, [pc, #108]	@ (8008008 <xPortStartScheduler+0x138>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fa0:	4a19      	ldr	r2, [pc, #100]	@ (8008008 <xPortStartScheduler+0x138>)
 8007fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fac:	4b17      	ldr	r3, [pc, #92]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a16      	ldr	r2, [pc, #88]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fb8:	4b14      	ldr	r3, [pc, #80]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a13      	ldr	r2, [pc, #76]	@ (800800c <xPortStartScheduler+0x13c>)
 8007fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fc4:	f000 f8da 	bl	800817c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fc8:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <xPortStartScheduler+0x140>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fce:	f000 f8f9 	bl	80081c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fd2:	4b10      	ldr	r3, [pc, #64]	@ (8008014 <xPortStartScheduler+0x144>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008014 <xPortStartScheduler+0x144>)
 8007fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fde:	f7ff ff63 	bl	8007ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fe2:	f001 fcbf 	bl	8009964 <vTaskSwitchContext>
	prvTaskExitError();
 8007fe6:	f7ff ff1d 	bl	8007e24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	e000ed00 	.word	0xe000ed00
 8007ff8:	410fc271 	.word	0x410fc271
 8007ffc:	410fc270 	.word	0x410fc270
 8008000:	e000e400 	.word	0xe000e400
 8008004:	20004af0 	.word	0x20004af0
 8008008:	20004af4 	.word	0x20004af4
 800800c:	e000ed20 	.word	0xe000ed20
 8008010:	20000010 	.word	0x20000010
 8008014:	e000ef34 	.word	0xe000ef34

08008018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008032:	4b10      	ldr	r3, [pc, #64]	@ (8008074 <vPortEnterCritical+0x5c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	4a0e      	ldr	r2, [pc, #56]	@ (8008074 <vPortEnterCritical+0x5c>)
 800803a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <vPortEnterCritical+0x5c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <vPortEnterCritical+0x60>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <vPortEnterCritical+0x4e>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	603b      	str	r3, [r7, #0]
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	e7fd      	b.n	8008062 <vPortEnterCritical+0x4a>
	}
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000010 	.word	0x20000010
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008082:	4b12      	ldr	r3, [pc, #72]	@ (80080cc <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <vPortExitCritical+0x26>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	607b      	str	r3, [r7, #4]
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	e7fd      	b.n	800809e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080a2:	4b0a      	ldr	r3, [pc, #40]	@ (80080cc <vPortExitCritical+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a08      	ldr	r2, [pc, #32]	@ (80080cc <vPortExitCritical+0x50>)
 80080aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080ac:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <vPortExitCritical+0x50>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <vPortExitCritical+0x44>
 80080b4:	2300      	movs	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	20000010 	.word	0x20000010

080080d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080d0:	f3ef 8009 	mrs	r0, PSP
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4b15      	ldr	r3, [pc, #84]	@ (8008130 <pxCurrentTCBConst>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f01e 0f10 	tst.w	lr, #16
 80080e0:	bf08      	it	eq
 80080e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080f4:	f380 8811 	msr	BASEPRI, r0
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f001 fc30 	bl	8009964 <vTaskSwitchContext>
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f380 8811 	msr	BASEPRI, r0
 800810c:	bc09      	pop	{r0, r3}
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008116:	f01e 0f10 	tst.w	lr, #16
 800811a:	bf08      	it	eq
 800811c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008120:	f380 8809 	msr	PSP, r0
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst>:
 8008130:	20004b38 	.word	0x20004b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008152:	f001 fb4d 	bl	80097f0 <xTaskIncrementTick>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800815c:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <xPortSysTickHandler+0x40>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
}
 800816e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008180:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <vPortSetupTimerInterrupt+0x34>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008186:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <vPortSetupTimerInterrupt+0x38>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800818c:	4b0a      	ldr	r3, [pc, #40]	@ (80081b8 <vPortSetupTimerInterrupt+0x3c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <vPortSetupTimerInterrupt+0x40>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	4a09      	ldr	r2, [pc, #36]	@ (80081c0 <vPortSetupTimerInterrupt+0x44>)
 800819a:	3b01      	subs	r3, #1
 800819c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800819e:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <vPortSetupTimerInterrupt+0x34>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010
 80081b4:	e000e018 	.word	0xe000e018
 80081b8:	20000004 	.word	0x20000004
 80081bc:	10624dd3 	.word	0x10624dd3
 80081c0:	e000e014 	.word	0xe000e014

080081c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081d4 <vPortEnableVFP+0x10>
 80081c8:	6801      	ldr	r1, [r0, #0]
 80081ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ce:	6001      	str	r1, [r0, #0]
 80081d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081d2:	bf00      	nop
 80081d4:	e000ed88 	.word	0xe000ed88

080081d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d915      	bls.n	8008216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ea:	4a18      	ldr	r2, [pc, #96]	@ (800824c <vPortValidateInterruptPriority+0x74>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f4:	4b16      	ldr	r3, [pc, #88]	@ (8008250 <vPortValidateInterruptPriority+0x78>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	7afa      	ldrb	r2, [r7, #11]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d20b      	bcs.n	8008216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008216:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <vPortValidateInterruptPriority+0x7c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800821e:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <vPortValidateInterruptPriority+0x80>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d90b      	bls.n	800823e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <vPortValidateInterruptPriority+0x62>
	}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	e000e3f0 	.word	0xe000e3f0
 8008250:	20004af0 	.word	0x20004af0
 8008254:	e000ed0c 	.word	0xe000ed0c
 8008258:	20004af4 	.word	0x20004af4

0800825c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xQueueGenericReset+0x2c>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60bb      	str	r3, [r7, #8]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008288:	f7ff fec6 	bl	8008018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008294:	68f9      	ldr	r1, [r7, #12]
 8008296:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	441a      	add	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b8:	3b01      	subs	r3, #1
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082be:	fb01 f303 	mul.w	r3, r1, r3
 80082c2:	441a      	add	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	22ff      	movs	r2, #255	@ 0xff
 80082cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	22ff      	movs	r2, #255	@ 0xff
 80082d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d114      	bne.n	8008308 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01a      	beq.n	800831c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3310      	adds	r3, #16
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fbf2 	bl	8009ad4 <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d012      	beq.n	800831c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <xQueueGenericReset+0xd0>)
 80082f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	e009      	b.n	800831c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3310      	adds	r3, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fca1 	bl	8007c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3324      	adds	r3, #36	@ 0x24
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fc9c 	bl	8007c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800831c:	f7ff feae 	bl	800807c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008320:	2301      	movs	r3, #1
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08e      	sub	sp, #56	@ 0x38
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10b      	bne.n	800835c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10b      	bne.n	800837a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	e7fd      	b.n	8008376 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <xQueueGenericCreateStatic+0x56>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <xQueueGenericCreateStatic+0x5a>
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <xQueueGenericCreateStatic+0x5c>
 800838a:	2300      	movs	r3, #0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	623b      	str	r3, [r7, #32]
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <xQueueGenericCreateStatic+0x84>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <xQueueGenericCreateStatic+0x88>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <xQueueGenericCreateStatic+0x8a>
 80083b8:	2300      	movs	r3, #0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	61fb      	str	r3, [r7, #28]
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083d6:	2350      	movs	r3, #80	@ 0x50
 80083d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b50      	cmp	r3, #80	@ 0x50
 80083de:	d00b      	beq.n	80083f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	61bb      	str	r3, [r7, #24]
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80083fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00d      	beq.n	8008420 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800840c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	4613      	mov	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f840 	bl	80084a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008422:	4618      	mov	r0, r3
 8008424:	3730      	adds	r7, #48	@ 0x30
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800842a:	b580      	push	{r7, lr}
 800842c:	b08a      	sub	sp, #40	@ 0x28
 800842e:	af02      	add	r7, sp, #8
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	4613      	mov	r3, r2
 8008436:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <xQueueGenericCreate+0x2c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	613b      	str	r3, [r7, #16]
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	e7fd      	b.n	8008452 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	fb02 f303 	mul.w	r3, r2, r3
 800845e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	3350      	adds	r3, #80	@ 0x50
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fa07 	bl	8007878 <pvPortMalloc>
 800846a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d011      	beq.n	8008496 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	3350      	adds	r3, #80	@ 0x50
 800847a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008484:	79fa      	ldrb	r2, [r7, #7]
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	4613      	mov	r3, r2
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f805 	bl	80084a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008496:	69bb      	ldr	r3, [r7, #24]
	}
 8008498:	4618      	mov	r0, r3
 800849a:	3720      	adds	r7, #32
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d103      	bne.n	80084bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084ce:	2101      	movs	r1, #1
 80084d0:	69b8      	ldr	r0, [r7, #24]
 80084d2:	f7ff fec3 	bl	800825c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00e      	beq.n	8008512 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	2100      	movs	r1, #0
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f8a3 	bl	8008658 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	4603      	mov	r3, r0
 8008522:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008524:	2301      	movs	r3, #1
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	2300      	movs	r3, #0
 800852a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	461a      	mov	r2, r3
 8008530:	6939      	ldr	r1, [r7, #16]
 8008532:	6978      	ldr	r0, [r7, #20]
 8008534:	f7ff ff79 	bl	800842a <xQueueGenericCreate>
 8008538:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff ffd3 	bl	80084e6 <prvInitialiseMutex>

		return xNewQueue;
 8008540:	68fb      	ldr	r3, [r7, #12]
	}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800854a:	b580      	push	{r7, lr}
 800854c:	b088      	sub	sp, #32
 800854e:	af02      	add	r7, sp, #8
 8008550:	4603      	mov	r3, r0
 8008552:	6039      	str	r1, [r7, #0]
 8008554:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008556:	2301      	movs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	6939      	ldr	r1, [r7, #16]
 8008568:	6978      	ldr	r0, [r7, #20]
 800856a:	f7ff fee1 	bl	8008330 <xQueueGenericCreateStatic>
 800856e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff ffb8 	bl	80084e6 <prvInitialiseMutex>

		return xNewQueue;
 8008576:	68fb      	ldr	r3, [r7, #12]
	}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10b      	bne.n	80085aa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	60fb      	str	r3, [r7, #12]
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	e7fd      	b.n	80085a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	689c      	ldr	r4, [r3, #8]
 80085ae:	f001 fc57 	bl	8009e60 <xTaskGetCurrentTaskHandle>
 80085b2:	4603      	mov	r3, r0
 80085b4:	429c      	cmp	r4, r3
 80085b6:	d111      	bne.n	80085dc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	1e5a      	subs	r2, r3, #1
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80085ca:	2300      	movs	r3, #0
 80085cc:	2200      	movs	r2, #0
 80085ce:	2100      	movs	r1, #0
 80085d0:	6938      	ldr	r0, [r7, #16]
 80085d2:	f000 f841 	bl	8008658 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80085d6:	2301      	movs	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e001      	b.n	80085e0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80085e0:	697b      	ldr	r3, [r7, #20]
	}
 80085e2:	4618      	mov	r0, r3
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd90      	pop	{r4, r7, pc}

080085ea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80085ea:	b590      	push	{r4, r7, lr}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60fb      	str	r3, [r7, #12]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	689c      	ldr	r4, [r3, #8]
 800861a:	f001 fc21 	bl	8009e60 <xTaskGetCurrentTaskHandle>
 800861e:	4603      	mov	r3, r0
 8008620:	429c      	cmp	r4, r3
 8008622:	d107      	bne.n	8008634 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e00c      	b.n	800864e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6938      	ldr	r0, [r7, #16]
 8008638:	f000 fa90 	bl	8008b5c <xQueueSemaphoreTake>
 800863c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800864e:	697b      	ldr	r3, [r7, #20]
	}
 8008650:	4618      	mov	r0, r3
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	bd90      	pop	{r4, r7, pc}

08008658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08e      	sub	sp, #56	@ 0x38
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008666:	2300      	movs	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xQueueGenericSend+0x34>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d103      	bne.n	800869a <xQueueGenericSend+0x42>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <xQueueGenericSend+0x46>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericSend+0x48>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <xQueueGenericSend+0x64>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086b6:	bf00      	nop
 80086b8:	bf00      	nop
 80086ba:	e7fd      	b.n	80086b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d103      	bne.n	80086ca <xQueueGenericSend+0x72>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <xQueueGenericSend+0x76>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <xQueueGenericSend+0x78>
 80086ce:	2300      	movs	r3, #0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10b      	bne.n	80086ec <xQueueGenericSend+0x94>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	623b      	str	r3, [r7, #32]
}
 80086e6:	bf00      	nop
 80086e8:	bf00      	nop
 80086ea:	e7fd      	b.n	80086e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ec:	f001 fbc8 	bl	8009e80 <xTaskGetSchedulerState>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d102      	bne.n	80086fc <xQueueGenericSend+0xa4>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <xQueueGenericSend+0xa8>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <xQueueGenericSend+0xaa>
 8008700:	2300      	movs	r3, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <xQueueGenericSend+0xc6>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	61fb      	str	r3, [r7, #28]
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800871e:	f7ff fc7b 	bl	8008018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872a:	429a      	cmp	r2, r3
 800872c:	d302      	bcc.n	8008734 <xQueueGenericSend+0xdc>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d129      	bne.n	8008788 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800873a:	f000 fbb9 	bl	8008eb0 <prvCopyDataToQueue>
 800873e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d010      	beq.n	800876a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	3324      	adds	r3, #36	@ 0x24
 800874c:	4618      	mov	r0, r3
 800874e:	f001 f9c1 	bl	8009ad4 <xTaskRemoveFromEventList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d013      	beq.n	8008780 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008758:	4b3f      	ldr	r3, [pc, #252]	@ (8008858 <xQueueGenericSend+0x200>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	e00a      	b.n	8008780 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800876a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008770:	4b39      	ldr	r3, [pc, #228]	@ (8008858 <xQueueGenericSend+0x200>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008780:	f7ff fc7c 	bl	800807c <vPortExitCritical>
				return pdPASS;
 8008784:	2301      	movs	r3, #1
 8008786:	e063      	b.n	8008850 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800878e:	f7ff fc75 	bl	800807c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008792:	2300      	movs	r3, #0
 8008794:	e05c      	b.n	8008850 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f9fb 	bl	8009b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087aa:	f7ff fc67 	bl	800807c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ae:	f000 ff51 	bl	8009654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087b2:	f7ff fc31 	bl	8008018 <vPortEnterCritical>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d103      	bne.n	80087cc <xQueueGenericSend+0x174>
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087d2:	b25b      	sxtb	r3, r3
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x18a>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087e2:	f7ff fc4b 	bl	800807c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087e6:	1d3a      	adds	r2, r7, #4
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 f9ea 	bl	8009bc8 <xTaskCheckForTimeOut>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d124      	bne.n	8008844 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087fc:	f000 fc50 	bl	80090a0 <prvIsQueueFull>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	3310      	adds	r3, #16
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f001 f90e 	bl	8009a30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008816:	f000 fbdb 	bl	8008fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800881a:	f000 ff29 	bl	8009670 <xTaskResumeAll>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	f47f af7c 	bne.w	800871e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008826:	4b0c      	ldr	r3, [pc, #48]	@ (8008858 <xQueueGenericSend+0x200>)
 8008828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	e772      	b.n	800871e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800883a:	f000 fbc9 	bl	8008fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800883e:	f000 ff17 	bl	8009670 <xTaskResumeAll>
 8008842:	e76c      	b.n	800871e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008846:	f000 fbc3 	bl	8008fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800884a:	f000 ff11 	bl	8009670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800884e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008850:	4618      	mov	r0, r3
 8008852:	3738      	adds	r7, #56	@ 0x38
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b090      	sub	sp, #64	@ 0x40
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800886e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <xQueueGenericSendFromISR+0x3e>
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <xQueueGenericSendFromISR+0x42>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueGenericSendFromISR+0x44>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d103      	bne.n	80088ca <xQueueGenericSendFromISR+0x6e>
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <xQueueGenericSendFromISR+0x72>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <xQueueGenericSendFromISR+0x74>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	623b      	str	r3, [r7, #32]
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088ec:	f7ff fc74 	bl	80081d8 <vPortValidateInterruptPriority>
	__asm volatile
 80088f0:	f3ef 8211 	mrs	r2, BASEPRI
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	61fa      	str	r2, [r7, #28]
 8008906:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008908:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008914:	429a      	cmp	r2, r3
 8008916:	d302      	bcc.n	800891e <xQueueGenericSendFromISR+0xc2>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d12f      	bne.n	800897e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008924:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008934:	f000 fabc 	bl	8008eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008938:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d112      	bne.n	8008968 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800894a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894c:	3324      	adds	r3, #36	@ 0x24
 800894e:	4618      	mov	r0, r3
 8008950:	f001 f8c0 	bl	8009ad4 <xTaskRemoveFromEventList>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	e007      	b.n	8008978 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008968:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800896c:	3301      	adds	r3, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	b25a      	sxtb	r2, r3
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008978:	2301      	movs	r3, #1
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800897c:	e001      	b.n	8008982 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800897e:	2300      	movs	r3, #0
 8008980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008984:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f383 8811 	msr	BASEPRI, r3
}
 800898c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800898e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008990:	4618      	mov	r0, r3
 8008992:	3740      	adds	r7, #64	@ 0x40
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	@ 0x30
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <xQueueReceive+0x32>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	623b      	str	r3, [r7, #32]
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	e7fd      	b.n	80089c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <xQueueReceive+0x40>
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <xQueueReceive+0x44>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <xQueueReceive+0x46>
 80089dc:	2300      	movs	r3, #0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <xQueueReceive+0x62>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	61fb      	str	r3, [r7, #28]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089fa:	f001 fa41 	bl	8009e80 <xTaskGetSchedulerState>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <xQueueReceive+0x72>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <xQueueReceive+0x76>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueReceive+0x78>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <xQueueReceive+0x94>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61bb      	str	r3, [r7, #24]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a2c:	f7ff faf4 	bl	8008018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01f      	beq.n	8008a7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a40:	f000 faa0 	bl	8008f84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00f      	beq.n	8008a74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	3310      	adds	r3, #16
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f001 f83b 	bl	8009ad4 <xTaskRemoveFromEventList>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a64:	4b3c      	ldr	r3, [pc, #240]	@ (8008b58 <xQueueReceive+0x1c0>)
 8008a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a74:	f7ff fb02 	bl	800807c <vPortExitCritical>
				return pdPASS;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e069      	b.n	8008b50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d103      	bne.n	8008a8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a82:	f7ff fafb 	bl	800807c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e062      	b.n	8008b50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a90:	f107 0310 	add.w	r3, r7, #16
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 f881 	bl	8009b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a9e:	f7ff faed 	bl	800807c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aa2:	f000 fdd7 	bl	8009654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aa6:	f7ff fab7 	bl	8008018 <vPortEnterCritical>
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ab0:	b25b      	sxtb	r3, r3
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d103      	bne.n	8008ac0 <xQueueReceive+0x128>
 8008ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008acc:	d103      	bne.n	8008ad6 <xQueueReceive+0x13e>
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ad6:	f7ff fad1 	bl	800807c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ada:	1d3a      	adds	r2, r7, #4
 8008adc:	f107 0310 	add.w	r3, r7, #16
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 f870 	bl	8009bc8 <xTaskCheckForTimeOut>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d123      	bne.n	8008b36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af0:	f000 fac0 	bl	8009074 <prvIsQueueEmpty>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	3324      	adds	r3, #36	@ 0x24
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 ff94 	bl	8009a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b0a:	f000 fa61 	bl	8008fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b0e:	f000 fdaf 	bl	8009670 <xTaskResumeAll>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d189      	bne.n	8008a2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008b18:	4b0f      	ldr	r3, [pc, #60]	@ (8008b58 <xQueueReceive+0x1c0>)
 8008b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	e780      	b.n	8008a2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b2c:	f000 fa50 	bl	8008fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b30:	f000 fd9e 	bl	8009670 <xTaskResumeAll>
 8008b34:	e77a      	b.n	8008a2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b38:	f000 fa4a 	bl	8008fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b3c:	f000 fd98 	bl	8009670 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b42:	f000 fa97 	bl	8009074 <prvIsQueueEmpty>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f43f af6f 	beq.w	8008a2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3730      	adds	r7, #48	@ 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08e      	sub	sp, #56	@ 0x38
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	61fb      	str	r3, [r7, #28]
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bb0:	f001 f966 	bl	8009e80 <xTaskGetSchedulerState>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <xQueueSemaphoreTake+0x64>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueSemaphoreTake+0x68>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueSemaphoreTake+0x6a>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	61bb      	str	r3, [r7, #24]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008be2:	f7ff fa19 	bl	8008018 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d024      	beq.n	8008c3c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf4:	1e5a      	subs	r2, r3, #1
 8008bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c02:	f001 fab7 	bl	800a174 <pvTaskIncrementMutexHeldCount>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00f      	beq.n	8008c34 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c16:	3310      	adds	r3, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 ff5b 	bl	8009ad4 <xTaskRemoveFromEventList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c24:	4b54      	ldr	r3, [pc, #336]	@ (8008d78 <xQueueSemaphoreTake+0x21c>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c34:	f7ff fa22 	bl	800807c <vPortExitCritical>
				return pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e098      	b.n	8008d6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d112      	bne.n	8008c68 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	617b      	str	r3, [r7, #20]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c60:	f7ff fa0c 	bl	800807c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e082      	b.n	8008d6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 ff92 	bl	8009b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c7c:	f7ff f9fe 	bl	800807c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c80:	f000 fce8 	bl	8009654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c84:	f7ff f9c8 	bl	8008018 <vPortEnterCritical>
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c8e:	b25b      	sxtb	r3, r3
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d103      	bne.n	8008c9e <xQueueSemaphoreTake+0x142>
 8008c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d103      	bne.n	8008cb4 <xQueueSemaphoreTake+0x158>
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cb4:	f7ff f9e2 	bl	800807c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb8:	463a      	mov	r2, r7
 8008cba:	f107 030c 	add.w	r3, r7, #12
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 ff81 	bl	8009bc8 <xTaskCheckForTimeOut>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d132      	bne.n	8008d32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cce:	f000 f9d1 	bl	8009074 <prvIsQueueEmpty>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d026      	beq.n	8008d26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ce0:	f7ff f99a 	bl	8008018 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 f8e7 	bl	8009ebc <xTaskPriorityInherit>
 8008cee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008cf0:	f7ff f9c4 	bl	800807c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf6:	3324      	adds	r3, #36	@ 0x24
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fe97 	bl	8009a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d04:	f000 f964 	bl	8008fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d08:	f000 fcb2 	bl	8009670 <xTaskResumeAll>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f47f af67 	bne.w	8008be2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008d14:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <xQueueSemaphoreTake+0x21c>)
 8008d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	e75d      	b.n	8008be2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d28:	f000 f952 	bl	8008fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d2c:	f000 fca0 	bl	8009670 <xTaskResumeAll>
 8008d30:	e757      	b.n	8008be2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d34:	f000 f94c 	bl	8008fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d38:	f000 fc9a 	bl	8009670 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d3e:	f000 f999 	bl	8009074 <prvIsQueueEmpty>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f43f af4c 	beq.w	8008be2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00d      	beq.n	8008d6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008d50:	f7ff f962 	bl	8008018 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d56:	f000 f893 	bl	8008e80 <prvGetDisinheritPriorityAfterTimeout>
 8008d5a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 f982 	bl	800a06c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d68:	f7ff f988 	bl	800807c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3738      	adds	r7, #56	@ 0x38
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08e      	sub	sp, #56	@ 0x38
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	623b      	str	r3, [r7, #32]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <xQueueReceiveFromISR+0x3c>
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <xQueueReceiveFromISR+0x40>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <xQueueReceiveFromISR+0x42>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10b      	bne.n	8008dda <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	61fb      	str	r3, [r7, #28]
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	e7fd      	b.n	8008dd6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dda:	f7ff f9fd 	bl	80081d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008dde:	f3ef 8211 	mrs	r2, BASEPRI
 8008de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	61ba      	str	r2, [r7, #24]
 8008df4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008df6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d02f      	beq.n	8008e66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e14:	f000 f8b6 	bl	8008f84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	1e5a      	subs	r2, r3, #1
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d112      	bne.n	8008e50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	3310      	adds	r3, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fe4c 	bl	8009ad4 <xTaskRemoveFromEventList>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e54:	3301      	adds	r3, #1
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	b25a      	sxtb	r2, r3
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008e60:	2301      	movs	r3, #1
 8008e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e64:	e001      	b.n	8008e6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f383 8811 	msr	BASEPRI, r3
}
 8008e74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3738      	adds	r7, #56	@ 0x38
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e001      	b.n	8008ea2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10d      	bne.n	8008eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d14d      	bne.n	8008f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 f856 	bl	8009f8c <xTaskPriorityDisinherit>
 8008ee0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	609a      	str	r2, [r3, #8]
 8008ee8:	e043      	b.n	8008f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d119      	bne.n	8008f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6858      	ldr	r0, [r3, #4]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	f001 fe16 	bl	800ab2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f08:	441a      	add	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d32b      	bcc.n	8008f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	e026      	b.n	8008f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68d8      	ldr	r0, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	f001 fdfc 	bl	800ab2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3c:	425b      	negs	r3, r3
 8008f3e:	441a      	add	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d207      	bcs.n	8008f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f58:	425b      	negs	r3, r3
 8008f5a:	441a      	add	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d105      	bne.n	8008f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f7a:	697b      	ldr	r3, [r7, #20]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d018      	beq.n	8008fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68da      	ldr	r2, [r3, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9e:	441a      	add	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d303      	bcc.n	8008fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68d9      	ldr	r1, [r3, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6838      	ldr	r0, [r7, #0]
 8008fc4:	f001 fdb2 	bl	800ab2c <memcpy>
	}
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fd8:	f7ff f81e 	bl	8008018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe4:	e011      	b.n	800900a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d012      	beq.n	8009014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3324      	adds	r3, #36	@ 0x24
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fd6e 	bl	8009ad4 <xTaskRemoveFromEventList>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ffe:	f000 fe47 	bl	8009c90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	3b01      	subs	r3, #1
 8009006:	b2db      	uxtb	r3, r3
 8009008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dce9      	bgt.n	8008fe6 <prvUnlockQueue+0x16>
 8009012:	e000      	b.n	8009016 <prvUnlockQueue+0x46>
					break;
 8009014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	22ff      	movs	r2, #255	@ 0xff
 800901a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800901e:	f7ff f82d 	bl	800807c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009022:	f7fe fff9 	bl	8008018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800902c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902e:	e011      	b.n	8009054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3310      	adds	r3, #16
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fd49 	bl	8009ad4 <xTaskRemoveFromEventList>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009048:	f000 fe22 	bl	8009c90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	3b01      	subs	r3, #1
 8009050:	b2db      	uxtb	r3, r3
 8009052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dce9      	bgt.n	8009030 <prvUnlockQueue+0x60>
 800905c:	e000      	b.n	8009060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800905e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	22ff      	movs	r2, #255	@ 0xff
 8009064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009068:	f7ff f808 	bl	800807c <vPortExitCritical>
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800907c:	f7fe ffcc 	bl	8008018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	e001      	b.n	8009092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009092:	f7fe fff3 	bl	800807c <vPortExitCritical>

	return xReturn;
 8009096:	68fb      	ldr	r3, [r7, #12]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090a8:	f7fe ffb6 	bl	8008018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d102      	bne.n	80090be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e001      	b.n	80090c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090c2:	f7fe ffdb 	bl	800807c <vPortExitCritical>

	return xReturn;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	e014      	b.n	800910a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090e0:	4a0f      	ldr	r2, [pc, #60]	@ (8009120 <vQueueAddToRegistry+0x50>)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10b      	bne.n	8009104 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090ec:	490c      	ldr	r1, [pc, #48]	@ (8009120 <vQueueAddToRegistry+0x50>)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009120 <vQueueAddToRegistry+0x50>)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009102:	e006      	b.n	8009112 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b07      	cmp	r3, #7
 800910e:	d9e7      	bls.n	80090e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20004af8 	.word	0x20004af8

08009124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009134:	f7fe ff70 	bl	8008018 <vPortEnterCritical>
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800913e:	b25b      	sxtb	r3, r3
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d103      	bne.n	800914e <vQueueWaitForMessageRestricted+0x2a>
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009154:	b25b      	sxtb	r3, r3
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d103      	bne.n	8009164 <vQueueWaitForMessageRestricted+0x40>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009164:	f7fe ff8a 	bl	800807c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	3324      	adds	r3, #36	@ 0x24
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fc7f 	bl	8009a7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800917e:	6978      	ldr	r0, [r7, #20]
 8009180:	f7ff ff26 	bl	8008fd0 <prvUnlockQueue>
	}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08e      	sub	sp, #56	@ 0x38
 8009190:	af04      	add	r7, sp, #16
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800919a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10b      	bne.n	80091b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	623b      	str	r3, [r7, #32]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10b      	bne.n	80091d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	61fb      	str	r3, [r7, #28]
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091d6:	23a8      	movs	r3, #168	@ 0xa8
 80091d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2ba8      	cmp	r3, #168	@ 0xa8
 80091de:	d00b      	beq.n	80091f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	61bb      	str	r3, [r7, #24]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01e      	beq.n	800923e <xTaskCreateStatic+0xb2>
 8009200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01b      	beq.n	800923e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800920e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	2202      	movs	r2, #2
 8009214:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009218:	2300      	movs	r3, #0
 800921a:	9303      	str	r3, [sp, #12]
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	9302      	str	r3, [sp, #8]
 8009220:	f107 0314 	add.w	r3, r7, #20
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f851 	bl	80092d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009236:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009238:	f000 f8f6 	bl	8009428 <prvAddNewTaskToReadyList>
 800923c:	e001      	b.n	8009242 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009242:	697b      	ldr	r3, [r7, #20]
	}
 8009244:	4618      	mov	r0, r3
 8009246:	3728      	adds	r7, #40	@ 0x28
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08c      	sub	sp, #48	@ 0x30
 8009250:	af04      	add	r7, sp, #16
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	4613      	mov	r3, r2
 800925a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800925c:	88fb      	ldrh	r3, [r7, #6]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fb09 	bl	8007878 <pvPortMalloc>
 8009266:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00e      	beq.n	800928c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800926e:	20a8      	movs	r0, #168	@ 0xa8
 8009270:	f7fe fb02 	bl	8007878 <pvPortMalloc>
 8009274:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	631a      	str	r2, [r3, #48]	@ 0x30
 8009282:	e005      	b.n	8009290 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009284:	6978      	ldr	r0, [r7, #20]
 8009286:	f7fe fbc5 	bl	8007a14 <vPortFree>
 800928a:	e001      	b.n	8009290 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800928c:	2300      	movs	r3, #0
 800928e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d017      	beq.n	80092c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800929e:	88fa      	ldrh	r2, [r7, #6]
 80092a0:	2300      	movs	r3, #0
 80092a2:	9303      	str	r3, [sp, #12]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f80f 	bl	80092d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ba:	69f8      	ldr	r0, [r7, #28]
 80092bc:	f000 f8b4 	bl	8009428 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092c0:	2301      	movs	r3, #1
 80092c2:	61bb      	str	r3, [r7, #24]
 80092c4:	e002      	b.n	80092cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092cc:	69bb      	ldr	r3, [r7, #24]
	}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	461a      	mov	r2, r3
 80092f0:	21a5      	movs	r1, #165	@ 0xa5
 80092f2:	f001 fb73 	bl	800a9dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009300:	3b01      	subs	r3, #1
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	f023 0307 	bic.w	r3, r3, #7
 800930e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	617b      	str	r3, [r7, #20]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01f      	beq.n	8009378 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009338:	2300      	movs	r3, #0
 800933a:	61fb      	str	r3, [r7, #28]
 800933c:	e012      	b.n	8009364 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	4413      	add	r3, r2
 8009344:	7819      	ldrb	r1, [r3, #0]
 8009346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	4413      	add	r3, r2
 800934c:	3334      	adds	r3, #52	@ 0x34
 800934e:	460a      	mov	r2, r1
 8009350:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	4413      	add	r3, r2
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d006      	beq.n	800936c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	3301      	adds	r3, #1
 8009362:	61fb      	str	r3, [r7, #28]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	2b0f      	cmp	r3, #15
 8009368:	d9e9      	bls.n	800933e <prvInitialiseNewTask+0x66>
 800936a:	e000      	b.n	800936e <prvInitialiseNewTask+0x96>
			{
				break;
 800936c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009376:	e003      	b.n	8009380 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	2b37      	cmp	r3, #55	@ 0x37
 8009384:	d901      	bls.n	800938a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009386:	2337      	movs	r3, #55	@ 0x37
 8009388:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800938e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009394:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	2200      	movs	r2, #0
 800939a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	3304      	adds	r3, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fc77 	bl	8007c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	3318      	adds	r3, #24
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fc72 	bl	8007c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	3354      	adds	r3, #84	@ 0x54
 80093da:	224c      	movs	r2, #76	@ 0x4c
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fafc 	bl	800a9dc <memset>
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	4a0d      	ldr	r2, [pc, #52]	@ (800941c <prvInitialiseNewTask+0x144>)
 80093e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	4a0c      	ldr	r2, [pc, #48]	@ (8009420 <prvInitialiseNewTask+0x148>)
 80093ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009424 <prvInitialiseNewTask+0x14c>)
 80093f4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	68f9      	ldr	r1, [r7, #12]
 80093fa:	69b8      	ldr	r0, [r7, #24]
 80093fc:	f7fe fcde 	bl	8007dbc <pxPortInitialiseStack>
 8009400:	4602      	mov	r2, r0
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800940c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009412:	bf00      	nop
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20005164 	.word	0x20005164
 8009420:	200051cc 	.word	0x200051cc
 8009424:	20005234 	.word	0x20005234

08009428 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009430:	f7fe fdf2 	bl	8008018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009434:	4b2d      	ldr	r3, [pc, #180]	@ (80094ec <prvAddNewTaskToReadyList+0xc4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	4a2c      	ldr	r2, [pc, #176]	@ (80094ec <prvAddNewTaskToReadyList+0xc4>)
 800943c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800943e:	4b2c      	ldr	r3, [pc, #176]	@ (80094f0 <prvAddNewTaskToReadyList+0xc8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d109      	bne.n	800945a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009446:	4a2a      	ldr	r2, [pc, #168]	@ (80094f0 <prvAddNewTaskToReadyList+0xc8>)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800944c:	4b27      	ldr	r3, [pc, #156]	@ (80094ec <prvAddNewTaskToReadyList+0xc4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009454:	f000 fc40 	bl	8009cd8 <prvInitialiseTaskLists>
 8009458:	e00d      	b.n	8009476 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800945a:	4b26      	ldr	r3, [pc, #152]	@ (80094f4 <prvAddNewTaskToReadyList+0xcc>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009462:	4b23      	ldr	r3, [pc, #140]	@ (80094f0 <prvAddNewTaskToReadyList+0xc8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946c:	429a      	cmp	r2, r3
 800946e:	d802      	bhi.n	8009476 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009470:	4a1f      	ldr	r2, [pc, #124]	@ (80094f0 <prvAddNewTaskToReadyList+0xc8>)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009476:	4b20      	ldr	r3, [pc, #128]	@ (80094f8 <prvAddNewTaskToReadyList+0xd0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3301      	adds	r3, #1
 800947c:	4a1e      	ldr	r2, [pc, #120]	@ (80094f8 <prvAddNewTaskToReadyList+0xd0>)
 800947e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009480:	4b1d      	ldr	r3, [pc, #116]	@ (80094f8 <prvAddNewTaskToReadyList+0xd0>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	4b1b      	ldr	r3, [pc, #108]	@ (80094fc <prvAddNewTaskToReadyList+0xd4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d903      	bls.n	800949c <prvAddNewTaskToReadyList+0x74>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009498:	4a18      	ldr	r2, [pc, #96]	@ (80094fc <prvAddNewTaskToReadyList+0xd4>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4a15      	ldr	r2, [pc, #84]	@ (8009500 <prvAddNewTaskToReadyList+0xd8>)
 80094aa:	441a      	add	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7fe fbfb 	bl	8007cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094b8:	f7fe fde0 	bl	800807c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094bc:	4b0d      	ldr	r3, [pc, #52]	@ (80094f4 <prvAddNewTaskToReadyList+0xcc>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00e      	beq.n	80094e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094c4:	4b0a      	ldr	r3, [pc, #40]	@ (80094f0 <prvAddNewTaskToReadyList+0xc8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d207      	bcs.n	80094e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009504 <prvAddNewTaskToReadyList+0xdc>)
 80094d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e2:	bf00      	nop
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	2000500c 	.word	0x2000500c
 80094f0:	20004b38 	.word	0x20004b38
 80094f4:	20005018 	.word	0x20005018
 80094f8:	20005028 	.word	0x20005028
 80094fc:	20005014 	.word	0x20005014
 8009500:	20004b3c 	.word	0x20004b3c
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d018      	beq.n	800954c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800951a:	4b14      	ldr	r3, [pc, #80]	@ (800956c <vTaskDelay+0x64>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <vTaskDelay+0x32>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	60bb      	str	r3, [r7, #8]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800953a:	f000 f88b 	bl	8009654 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800953e:	2100      	movs	r1, #0
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fe2b 	bl	800a19c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009546:	f000 f893 	bl	8009670 <xTaskResumeAll>
 800954a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d107      	bne.n	8009562 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009552:	4b07      	ldr	r3, [pc, #28]	@ (8009570 <vTaskDelay+0x68>)
 8009554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20005034 	.word	0x20005034
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	@ 0x28
 8009578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800957a:	2300      	movs	r3, #0
 800957c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009582:	463a      	mov	r2, r7
 8009584:	1d39      	adds	r1, r7, #4
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe f940 	bl	8007810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	9202      	str	r2, [sp, #8]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	2300      	movs	r3, #0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	2300      	movs	r3, #0
 80095a0:	460a      	mov	r2, r1
 80095a2:	4924      	ldr	r1, [pc, #144]	@ (8009634 <vTaskStartScheduler+0xc0>)
 80095a4:	4824      	ldr	r0, [pc, #144]	@ (8009638 <vTaskStartScheduler+0xc4>)
 80095a6:	f7ff fdf1 	bl	800918c <xTaskCreateStatic>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a23      	ldr	r2, [pc, #140]	@ (800963c <vTaskStartScheduler+0xc8>)
 80095ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095b0:	4b22      	ldr	r3, [pc, #136]	@ (800963c <vTaskStartScheduler+0xc8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	e001      	b.n	80095c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d102      	bne.n	80095ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095c8:	f000 fe3c 	bl	800a244 <xTimerCreateTimerTask>
 80095cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d11b      	bne.n	800960c <vTaskStartScheduler+0x98>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	613b      	str	r3, [r7, #16]
}
 80095e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095e8:	4b15      	ldr	r3, [pc, #84]	@ (8009640 <vTaskStartScheduler+0xcc>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3354      	adds	r3, #84	@ 0x54
 80095ee:	4a15      	ldr	r2, [pc, #84]	@ (8009644 <vTaskStartScheduler+0xd0>)
 80095f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095f2:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <vTaskStartScheduler+0xd4>)
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295
 80095f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095fa:	4b14      	ldr	r3, [pc, #80]	@ (800964c <vTaskStartScheduler+0xd8>)
 80095fc:	2201      	movs	r2, #1
 80095fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009600:	4b13      	ldr	r3, [pc, #76]	@ (8009650 <vTaskStartScheduler+0xdc>)
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009606:	f7fe fc63 	bl	8007ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800960a:	e00f      	b.n	800962c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009612:	d10b      	bne.n	800962c <vTaskStartScheduler+0xb8>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	60fb      	str	r3, [r7, #12]
}
 8009626:	bf00      	nop
 8009628:	bf00      	nop
 800962a:	e7fd      	b.n	8009628 <vTaskStartScheduler+0xb4>
}
 800962c:	bf00      	nop
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	0800bbc8 	.word	0x0800bbc8
 8009638:	08009ca9 	.word	0x08009ca9
 800963c:	20005030 	.word	0x20005030
 8009640:	20004b38 	.word	0x20004b38
 8009644:	20000014 	.word	0x20000014
 8009648:	2000502c 	.word	0x2000502c
 800964c:	20005018 	.word	0x20005018
 8009650:	20005010 	.word	0x20005010

08009654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009658:	4b04      	ldr	r3, [pc, #16]	@ (800966c <vTaskSuspendAll+0x18>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	4a03      	ldr	r2, [pc, #12]	@ (800966c <vTaskSuspendAll+0x18>)
 8009660:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009662:	bf00      	nop
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	20005034 	.word	0x20005034

08009670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800967a:	2300      	movs	r3, #0
 800967c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800967e:	4b42      	ldr	r3, [pc, #264]	@ (8009788 <xTaskResumeAll+0x118>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <xTaskResumeAll+0x2e>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	603b      	str	r3, [r7, #0]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800969e:	f7fe fcbb 	bl	8008018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096a2:	4b39      	ldr	r3, [pc, #228]	@ (8009788 <xTaskResumeAll+0x118>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4a37      	ldr	r2, [pc, #220]	@ (8009788 <xTaskResumeAll+0x118>)
 80096aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ac:	4b36      	ldr	r3, [pc, #216]	@ (8009788 <xTaskResumeAll+0x118>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d162      	bne.n	800977a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096b4:	4b35      	ldr	r3, [pc, #212]	@ (800978c <xTaskResumeAll+0x11c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d05e      	beq.n	800977a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096bc:	e02f      	b.n	800971e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096be:	4b34      	ldr	r3, [pc, #208]	@ (8009790 <xTaskResumeAll+0x120>)
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3318      	adds	r3, #24
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fb4c 	bl	8007d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe fb47 	bl	8007d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096de:	4b2d      	ldr	r3, [pc, #180]	@ (8009794 <xTaskResumeAll+0x124>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d903      	bls.n	80096ee <xTaskResumeAll+0x7e>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009794 <xTaskResumeAll+0x124>)
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4a27      	ldr	r2, [pc, #156]	@ (8009798 <xTaskResumeAll+0x128>)
 80096fc:	441a      	add	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3304      	adds	r3, #4
 8009702:	4619      	mov	r1, r3
 8009704:	4610      	mov	r0, r2
 8009706:	f7fe fad2 	bl	8007cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970e:	4b23      	ldr	r3, [pc, #140]	@ (800979c <xTaskResumeAll+0x12c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	429a      	cmp	r2, r3
 8009716:	d302      	bcc.n	800971e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009718:	4b21      	ldr	r3, [pc, #132]	@ (80097a0 <xTaskResumeAll+0x130>)
 800971a:	2201      	movs	r2, #1
 800971c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800971e:	4b1c      	ldr	r3, [pc, #112]	@ (8009790 <xTaskResumeAll+0x120>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1cb      	bne.n	80096be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800972c:	f000 fb78 	bl	8009e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009730:	4b1c      	ldr	r3, [pc, #112]	@ (80097a4 <xTaskResumeAll+0x134>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d010      	beq.n	800975e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800973c:	f000 f858 	bl	80097f0 <xTaskIncrementTick>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009746:	4b16      	ldr	r3, [pc, #88]	@ (80097a0 <xTaskResumeAll+0x130>)
 8009748:	2201      	movs	r2, #1
 800974a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3b01      	subs	r3, #1
 8009750:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f1      	bne.n	800973c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009758:	4b12      	ldr	r3, [pc, #72]	@ (80097a4 <xTaskResumeAll+0x134>)
 800975a:	2200      	movs	r2, #0
 800975c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800975e:	4b10      	ldr	r3, [pc, #64]	@ (80097a0 <xTaskResumeAll+0x130>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009766:	2301      	movs	r3, #1
 8009768:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800976a:	4b0f      	ldr	r3, [pc, #60]	@ (80097a8 <xTaskResumeAll+0x138>)
 800976c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800977a:	f7fe fc7f 	bl	800807c <vPortExitCritical>

	return xAlreadyYielded;
 800977e:	68bb      	ldr	r3, [r7, #8]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20005034 	.word	0x20005034
 800978c:	2000500c 	.word	0x2000500c
 8009790:	20004fcc 	.word	0x20004fcc
 8009794:	20005014 	.word	0x20005014
 8009798:	20004b3c 	.word	0x20004b3c
 800979c:	20004b38 	.word	0x20004b38
 80097a0:	20005020 	.word	0x20005020
 80097a4:	2000501c 	.word	0x2000501c
 80097a8:	e000ed04 	.word	0xe000ed04

080097ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097b2:	4b05      	ldr	r3, [pc, #20]	@ (80097c8 <xTaskGetTickCount+0x1c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097b8:	687b      	ldr	r3, [r7, #4]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20005010 	.word	0x20005010

080097cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097d2:	f7fe fd01 	bl	80081d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80097d6:	2300      	movs	r3, #0
 80097d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80097da:	4b04      	ldr	r3, [pc, #16]	@ (80097ec <xTaskGetTickCountFromISR+0x20>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097e0:	683b      	ldr	r3, [r7, #0]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20005010 	.word	0x20005010

080097f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009938 <xTaskIncrementTick+0x148>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f040 8090 	bne.w	8009924 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009804:	4b4d      	ldr	r3, [pc, #308]	@ (800993c <xTaskIncrementTick+0x14c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800980c:	4a4b      	ldr	r2, [pc, #300]	@ (800993c <xTaskIncrementTick+0x14c>)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d121      	bne.n	800985c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009818:	4b49      	ldr	r3, [pc, #292]	@ (8009940 <xTaskIncrementTick+0x150>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	603b      	str	r3, [r7, #0]
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	e7fd      	b.n	8009836 <xTaskIncrementTick+0x46>
 800983a:	4b41      	ldr	r3, [pc, #260]	@ (8009940 <xTaskIncrementTick+0x150>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	4b40      	ldr	r3, [pc, #256]	@ (8009944 <xTaskIncrementTick+0x154>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a3e      	ldr	r2, [pc, #248]	@ (8009940 <xTaskIncrementTick+0x150>)
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	4a3e      	ldr	r2, [pc, #248]	@ (8009944 <xTaskIncrementTick+0x154>)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	4b3e      	ldr	r3, [pc, #248]	@ (8009948 <xTaskIncrementTick+0x158>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3301      	adds	r3, #1
 8009854:	4a3c      	ldr	r2, [pc, #240]	@ (8009948 <xTaskIncrementTick+0x158>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	f000 fae2 	bl	8009e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800985c:	4b3b      	ldr	r3, [pc, #236]	@ (800994c <xTaskIncrementTick+0x15c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	429a      	cmp	r2, r3
 8009864:	d349      	bcc.n	80098fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009866:	4b36      	ldr	r3, [pc, #216]	@ (8009940 <xTaskIncrementTick+0x150>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009870:	4b36      	ldr	r3, [pc, #216]	@ (800994c <xTaskIncrementTick+0x15c>)
 8009872:	f04f 32ff 	mov.w	r2, #4294967295
 8009876:	601a      	str	r2, [r3, #0]
					break;
 8009878:	e03f      	b.n	80098fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987a:	4b31      	ldr	r3, [pc, #196]	@ (8009940 <xTaskIncrementTick+0x150>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	429a      	cmp	r2, r3
 8009890:	d203      	bcs.n	800989a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009892:	4a2e      	ldr	r2, [pc, #184]	@ (800994c <xTaskIncrementTick+0x15c>)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009898:	e02f      	b.n	80098fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	3304      	adds	r3, #4
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fa62 	bl	8007d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	3318      	adds	r3, #24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fa59 	bl	8007d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ba:	4b25      	ldr	r3, [pc, #148]	@ (8009950 <xTaskIncrementTick+0x160>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d903      	bls.n	80098ca <xTaskIncrementTick+0xda>
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c6:	4a22      	ldr	r2, [pc, #136]	@ (8009950 <xTaskIncrementTick+0x160>)
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ce:	4613      	mov	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009954 <xTaskIncrementTick+0x164>)
 80098d8:	441a      	add	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	4610      	mov	r0, r2
 80098e2:	f7fe f9e4 	bl	8007cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009958 <xTaskIncrementTick+0x168>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d3b8      	bcc.n	8009866 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098f4:	2301      	movs	r3, #1
 80098f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098f8:	e7b5      	b.n	8009866 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098fa:	4b17      	ldr	r3, [pc, #92]	@ (8009958 <xTaskIncrementTick+0x168>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009900:	4914      	ldr	r1, [pc, #80]	@ (8009954 <xTaskIncrementTick+0x164>)
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d901      	bls.n	8009916 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009912:	2301      	movs	r3, #1
 8009914:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009916:	4b11      	ldr	r3, [pc, #68]	@ (800995c <xTaskIncrementTick+0x16c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d007      	beq.n	800992e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800991e:	2301      	movs	r3, #1
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e004      	b.n	800992e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009924:	4b0e      	ldr	r3, [pc, #56]	@ (8009960 <xTaskIncrementTick+0x170>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3301      	adds	r3, #1
 800992a:	4a0d      	ldr	r2, [pc, #52]	@ (8009960 <xTaskIncrementTick+0x170>)
 800992c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800992e:	697b      	ldr	r3, [r7, #20]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20005034 	.word	0x20005034
 800993c:	20005010 	.word	0x20005010
 8009940:	20004fc4 	.word	0x20004fc4
 8009944:	20004fc8 	.word	0x20004fc8
 8009948:	20005024 	.word	0x20005024
 800994c:	2000502c 	.word	0x2000502c
 8009950:	20005014 	.word	0x20005014
 8009954:	20004b3c 	.word	0x20004b3c
 8009958:	20004b38 	.word	0x20004b38
 800995c:	20005020 	.word	0x20005020
 8009960:	2000501c 	.word	0x2000501c

08009964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800996a:	4b2b      	ldr	r3, [pc, #172]	@ (8009a18 <vTaskSwitchContext+0xb4>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009972:	4b2a      	ldr	r3, [pc, #168]	@ (8009a1c <vTaskSwitchContext+0xb8>)
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009978:	e047      	b.n	8009a0a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800997a:	4b28      	ldr	r3, [pc, #160]	@ (8009a1c <vTaskSwitchContext+0xb8>)
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009980:	4b27      	ldr	r3, [pc, #156]	@ (8009a20 <vTaskSwitchContext+0xbc>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e011      	b.n	80099ac <vTaskSwitchContext+0x48>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10b      	bne.n	80099a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <vTaskSwitchContext+0x3e>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	491d      	ldr	r1, [pc, #116]	@ (8009a24 <vTaskSwitchContext+0xc0>)
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	440b      	add	r3, r1
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0e3      	beq.n	8009988 <vTaskSwitchContext+0x24>
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4a16      	ldr	r2, [pc, #88]	@ (8009a24 <vTaskSwitchContext+0xc0>)
 80099cc:	4413      	add	r3, r2
 80099ce:	60bb      	str	r3, [r7, #8]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	605a      	str	r2, [r3, #4]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	3308      	adds	r3, #8
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d104      	bne.n	80099f0 <vTaskSwitchContext+0x8c>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	605a      	str	r2, [r3, #4]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009a28 <vTaskSwitchContext+0xc4>)
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	4a09      	ldr	r2, [pc, #36]	@ (8009a20 <vTaskSwitchContext+0xbc>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a00:	4b09      	ldr	r3, [pc, #36]	@ (8009a28 <vTaskSwitchContext+0xc4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3354      	adds	r3, #84	@ 0x54
 8009a06:	4a09      	ldr	r2, [pc, #36]	@ (8009a2c <vTaskSwitchContext+0xc8>)
 8009a08:	6013      	str	r3, [r2, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20005034 	.word	0x20005034
 8009a1c:	20005020 	.word	0x20005020
 8009a20:	20005014 	.word	0x20005014
 8009a24:	20004b3c 	.word	0x20004b3c
 8009a28:	20004b38 	.word	0x20004b38
 8009a2c:	20000014 	.word	0x20000014

08009a30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	e7fd      	b.n	8009a54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a58:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <vTaskPlaceOnEventList+0x48>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3318      	adds	r3, #24
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7fe f948 	bl	8007cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a66:	2101      	movs	r1, #1
 8009a68:	6838      	ldr	r0, [r7, #0]
 8009a6a:	f000 fb97 	bl	800a19c <prvAddCurrentTaskToDelayedList>
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20004b38 	.word	0x20004b38

08009a7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10b      	bne.n	8009aa6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	617b      	str	r3, [r7, #20]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3318      	adds	r3, #24
 8009aac:	4619      	mov	r1, r3
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7fe f8fd 	bl	8007cae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009aba:	f04f 33ff 	mov.w	r3, #4294967295
 8009abe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	68b8      	ldr	r0, [r7, #8]
 8009ac4:	f000 fb6a 	bl	800a19c <prvAddCurrentTaskToDelayedList>
	}
 8009ac8:	bf00      	nop
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20004b38 	.word	0x20004b38

08009ad4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	60fb      	str	r3, [r7, #12]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	3318      	adds	r3, #24
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe f92e 	bl	8007d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b84 <xTaskRemoveFromEventList+0xb0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d11d      	bne.n	8009b50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe f925 	bl	8007d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b22:	4b19      	ldr	r3, [pc, #100]	@ (8009b88 <xTaskRemoveFromEventList+0xb4>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d903      	bls.n	8009b32 <xTaskRemoveFromEventList+0x5e>
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2e:	4a16      	ldr	r2, [pc, #88]	@ (8009b88 <xTaskRemoveFromEventList+0xb4>)
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4a13      	ldr	r2, [pc, #76]	@ (8009b8c <xTaskRemoveFromEventList+0xb8>)
 8009b40:	441a      	add	r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	3304      	adds	r3, #4
 8009b46:	4619      	mov	r1, r3
 8009b48:	4610      	mov	r0, r2
 8009b4a:	f7fe f8b0 	bl	8007cae <vListInsertEnd>
 8009b4e:	e005      	b.n	8009b5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3318      	adds	r3, #24
 8009b54:	4619      	mov	r1, r3
 8009b56:	480e      	ldr	r0, [pc, #56]	@ (8009b90 <xTaskRemoveFromEventList+0xbc>)
 8009b58:	f7fe f8a9 	bl	8007cae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b60:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <xTaskRemoveFromEventList+0xc0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d905      	bls.n	8009b76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b98 <xTaskRemoveFromEventList+0xc4>)
 8009b70:	2201      	movs	r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	e001      	b.n	8009b7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b7a:	697b      	ldr	r3, [r7, #20]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20005034 	.word	0x20005034
 8009b88:	20005014 	.word	0x20005014
 8009b8c:	20004b3c 	.word	0x20004b3c
 8009b90:	20004fcc 	.word	0x20004fcc
 8009b94:	20004b38 	.word	0x20004b38
 8009b98:	20005020 	.word	0x20005020

08009b9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ba4:	4b06      	ldr	r3, [pc, #24]	@ (8009bc0 <vTaskInternalSetTimeOutState+0x24>)
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bac:	4b05      	ldr	r3, [pc, #20]	@ (8009bc4 <vTaskInternalSetTimeOutState+0x28>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	605a      	str	r2, [r3, #4]
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	20005024 	.word	0x20005024
 8009bc4:	20005010 	.word	0x20005010

08009bc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	613b      	str	r3, [r7, #16]
}
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
 8009bee:	e7fd      	b.n	8009bec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c0e:	f7fe fa03 	bl	8008018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c12:	4b1d      	ldr	r3, [pc, #116]	@ (8009c88 <xTaskCheckForTimeOut+0xc0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d102      	bne.n	8009c32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61fb      	str	r3, [r7, #28]
 8009c30:	e023      	b.n	8009c7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	4b15      	ldr	r3, [pc, #84]	@ (8009c8c <xTaskCheckForTimeOut+0xc4>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d007      	beq.n	8009c4e <xTaskCheckForTimeOut+0x86>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d302      	bcc.n	8009c4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	e015      	b.n	8009c7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d20b      	bcs.n	8009c70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff ff99 	bl	8009b9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	e004      	b.n	8009c7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c76:	2301      	movs	r3, #1
 8009c78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c7a:	f7fe f9ff 	bl	800807c <vPortExitCritical>

	return xReturn;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20005010 	.word	0x20005010
 8009c8c:	20005024 	.word	0x20005024

08009c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c94:	4b03      	ldr	r3, [pc, #12]	@ (8009ca4 <vTaskMissedYield+0x14>)
 8009c96:	2201      	movs	r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20005020 	.word	0x20005020

08009ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cb0:	f000 f852 	bl	8009d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cb4:	4b06      	ldr	r3, [pc, #24]	@ (8009cd0 <prvIdleTask+0x28>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d9f9      	bls.n	8009cb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cbc:	4b05      	ldr	r3, [pc, #20]	@ (8009cd4 <prvIdleTask+0x2c>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ccc:	e7f0      	b.n	8009cb0 <prvIdleTask+0x8>
 8009cce:	bf00      	nop
 8009cd0:	20004b3c 	.word	0x20004b3c
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cde:	2300      	movs	r3, #0
 8009ce0:	607b      	str	r3, [r7, #4]
 8009ce2:	e00c      	b.n	8009cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4a12      	ldr	r2, [pc, #72]	@ (8009d38 <prvInitialiseTaskLists+0x60>)
 8009cf0:	4413      	add	r3, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fd ffae 	bl	8007c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	607b      	str	r3, [r7, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b37      	cmp	r3, #55	@ 0x37
 8009d02:	d9ef      	bls.n	8009ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d04:	480d      	ldr	r0, [pc, #52]	@ (8009d3c <prvInitialiseTaskLists+0x64>)
 8009d06:	f7fd ffa5 	bl	8007c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d0a:	480d      	ldr	r0, [pc, #52]	@ (8009d40 <prvInitialiseTaskLists+0x68>)
 8009d0c:	f7fd ffa2 	bl	8007c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d10:	480c      	ldr	r0, [pc, #48]	@ (8009d44 <prvInitialiseTaskLists+0x6c>)
 8009d12:	f7fd ff9f 	bl	8007c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d16:	480c      	ldr	r0, [pc, #48]	@ (8009d48 <prvInitialiseTaskLists+0x70>)
 8009d18:	f7fd ff9c 	bl	8007c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d1c:	480b      	ldr	r0, [pc, #44]	@ (8009d4c <prvInitialiseTaskLists+0x74>)
 8009d1e:	f7fd ff99 	bl	8007c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d22:	4b0b      	ldr	r3, [pc, #44]	@ (8009d50 <prvInitialiseTaskLists+0x78>)
 8009d24:	4a05      	ldr	r2, [pc, #20]	@ (8009d3c <prvInitialiseTaskLists+0x64>)
 8009d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d28:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <prvInitialiseTaskLists+0x7c>)
 8009d2a:	4a05      	ldr	r2, [pc, #20]	@ (8009d40 <prvInitialiseTaskLists+0x68>)
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20004b3c 	.word	0x20004b3c
 8009d3c:	20004f9c 	.word	0x20004f9c
 8009d40:	20004fb0 	.word	0x20004fb0
 8009d44:	20004fcc 	.word	0x20004fcc
 8009d48:	20004fe0 	.word	0x20004fe0
 8009d4c:	20004ff8 	.word	0x20004ff8
 8009d50:	20004fc4 	.word	0x20004fc4
 8009d54:	20004fc8 	.word	0x20004fc8

08009d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d5e:	e019      	b.n	8009d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d60:	f7fe f95a 	bl	8008018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d64:	4b10      	ldr	r3, [pc, #64]	@ (8009da8 <prvCheckTasksWaitingTermination+0x50>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fd fff9 	bl	8007d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d76:	4b0d      	ldr	r3, [pc, #52]	@ (8009dac <prvCheckTasksWaitingTermination+0x54>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8009dac <prvCheckTasksWaitingTermination+0x54>)
 8009d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d80:	4b0b      	ldr	r3, [pc, #44]	@ (8009db0 <prvCheckTasksWaitingTermination+0x58>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	4a0a      	ldr	r2, [pc, #40]	@ (8009db0 <prvCheckTasksWaitingTermination+0x58>)
 8009d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d8a:	f7fe f977 	bl	800807c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f810 	bl	8009db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d94:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <prvCheckTasksWaitingTermination+0x58>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e1      	bne.n	8009d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20004fe0 	.word	0x20004fe0
 8009dac:	2000500c 	.word	0x2000500c
 8009db0:	20004ff4 	.word	0x20004ff4

08009db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3354      	adds	r3, #84	@ 0x54
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fe29 	bl	800aa18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d108      	bne.n	8009de2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd fe1d 	bl	8007a14 <vPortFree>
				vPortFree( pxTCB );
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7fd fe1a 	bl	8007a14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009de0:	e019      	b.n	8009e16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d103      	bne.n	8009df4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7fd fe11 	bl	8007a14 <vPortFree>
	}
 8009df2:	e010      	b.n	8009e16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d00b      	beq.n	8009e16 <prvDeleteTCB+0x62>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60fb      	str	r3, [r7, #12]
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	e7fd      	b.n	8009e12 <prvDeleteTCB+0x5e>
	}
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e26:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <prvResetNextTaskUnblockTime+0x38>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d104      	bne.n	8009e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e30:	4b0a      	ldr	r3, [pc, #40]	@ (8009e5c <prvResetNextTaskUnblockTime+0x3c>)
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e38:	e008      	b.n	8009e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e3a:	4b07      	ldr	r3, [pc, #28]	@ (8009e58 <prvResetNextTaskUnblockTime+0x38>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	4a04      	ldr	r2, [pc, #16]	@ (8009e5c <prvResetNextTaskUnblockTime+0x3c>)
 8009e4a:	6013      	str	r3, [r2, #0]
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	20004fc4 	.word	0x20004fc4
 8009e5c:	2000502c 	.word	0x2000502c

08009e60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009e66:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <xTaskGetCurrentTaskHandle+0x1c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009e6c:	687b      	ldr	r3, [r7, #4]
	}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	20004b38 	.word	0x20004b38

08009e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e86:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <xTaskGetSchedulerState+0x34>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	e008      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e94:	4b08      	ldr	r3, [pc, #32]	@ (8009eb8 <xTaskGetSchedulerState+0x38>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	e001      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ea6:	687b      	ldr	r3, [r7, #4]
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20005018 	.word	0x20005018
 8009eb8:	20005034 	.word	0x20005034

08009ebc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d051      	beq.n	8009f76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8009f80 <xTaskPriorityInherit+0xc4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d241      	bcs.n	8009f64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	db06      	blt.n	8009ef6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee8:	4b25      	ldr	r3, [pc, #148]	@ (8009f80 <xTaskPriorityInherit+0xc4>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	6959      	ldr	r1, [r3, #20]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4a1f      	ldr	r2, [pc, #124]	@ (8009f84 <xTaskPriorityInherit+0xc8>)
 8009f08:	4413      	add	r3, r2
 8009f0a:	4299      	cmp	r1, r3
 8009f0c:	d122      	bne.n	8009f54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd ff28 	bl	8007d68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f18:	4b19      	ldr	r3, [pc, #100]	@ (8009f80 <xTaskPriorityInherit+0xc4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f26:	4b18      	ldr	r3, [pc, #96]	@ (8009f88 <xTaskPriorityInherit+0xcc>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d903      	bls.n	8009f36 <xTaskPriorityInherit+0x7a>
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f32:	4a15      	ldr	r2, [pc, #84]	@ (8009f88 <xTaskPriorityInherit+0xcc>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a10      	ldr	r2, [pc, #64]	@ (8009f84 <xTaskPriorityInherit+0xc8>)
 8009f44:	441a      	add	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7fd feae 	bl	8007cae <vListInsertEnd>
 8009f52:	e004      	b.n	8009f5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f54:	4b0a      	ldr	r3, [pc, #40]	@ (8009f80 <xTaskPriorityInherit+0xc4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e008      	b.n	8009f76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f68:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <xTaskPriorityInherit+0xc4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d201      	bcs.n	8009f76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f72:	2301      	movs	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f76:	68fb      	ldr	r3, [r7, #12]
	}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20004b38 	.word	0x20004b38
 8009f84:	20004b3c 	.word	0x20004b3c
 8009f88:	20005014 	.word	0x20005014

08009f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d058      	beq.n	800a054 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fa2:	4b2f      	ldr	r3, [pc, #188]	@ (800a060 <xTaskPriorityDisinherit+0xd4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d00b      	beq.n	8009fc4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	60fb      	str	r3, [r7, #12]
}
 8009fbe:	bf00      	nop
 8009fc0:	bf00      	nop
 8009fc2:	e7fd      	b.n	8009fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10b      	bne.n	8009fe4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	60bb      	str	r3, [r7, #8]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe8:	1e5a      	subs	r2, r3, #1
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d02c      	beq.n	800a054 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d128      	bne.n	800a054 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	3304      	adds	r3, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f7fd feae 	bl	8007d68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a018:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a024:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <xTaskPriorityDisinherit+0xd8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d903      	bls.n	800a034 <xTaskPriorityDisinherit+0xa8>
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	4a0c      	ldr	r2, [pc, #48]	@ (800a064 <xTaskPriorityDisinherit+0xd8>)
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4a09      	ldr	r2, [pc, #36]	@ (800a068 <xTaskPriorityDisinherit+0xdc>)
 800a042:	441a      	add	r2, r3
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7fd fe2f 	bl	8007cae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a050:	2301      	movs	r3, #1
 800a052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a054:	697b      	ldr	r3, [r7, #20]
	}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20004b38 	.word	0x20004b38
 800a064:	20005014 	.word	0x20005014
 800a068:	20004b3c 	.word	0x20004b3c

0800a06c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a07a:	2301      	movs	r3, #1
 800a07c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d06c      	beq.n	800a15e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10b      	bne.n	800a0a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	60fb      	str	r3, [r7, #12]
}
 800a09e:	bf00      	nop
 800a0a0:	bf00      	nop
 800a0a2:	e7fd      	b.n	800a0a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d902      	bls.n	800a0b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	61fb      	str	r3, [r7, #28]
 800a0b2:	e002      	b.n	800a0ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d04c      	beq.n	800a15e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d147      	bne.n	800a15e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0ce:	4b26      	ldr	r3, [pc, #152]	@ (800a168 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d10b      	bne.n	800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	60bb      	str	r3, [r7, #8]
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	69fa      	ldr	r2, [r7, #28]
 800a0fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	db04      	blt.n	800a10e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	6959      	ldr	r1, [r3, #20]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4a13      	ldr	r2, [pc, #76]	@ (800a16c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a11e:	4413      	add	r3, r2
 800a120:	4299      	cmp	r1, r3
 800a122:	d11c      	bne.n	800a15e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	3304      	adds	r3, #4
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fd fe1d 	bl	8007d68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a132:	4b0f      	ldr	r3, [pc, #60]	@ (800a170 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d903      	bls.n	800a142 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13e:	4a0c      	ldr	r2, [pc, #48]	@ (800a170 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a146:	4613      	mov	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4a07      	ldr	r2, [pc, #28]	@ (800a16c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a150:	441a      	add	r2, r3
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	3304      	adds	r3, #4
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f7fd fda8 	bl	8007cae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a15e:	bf00      	nop
 800a160:	3720      	adds	r7, #32
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20004b38 	.word	0x20004b38
 800a16c:	20004b3c 	.word	0x20004b3c
 800a170:	20005014 	.word	0x20005014

0800a174 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a174:	b480      	push	{r7}
 800a176:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a178:	4b07      	ldr	r3, [pc, #28]	@ (800a198 <pvTaskIncrementMutexHeldCount+0x24>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a180:	4b05      	ldr	r3, [pc, #20]	@ (800a198 <pvTaskIncrementMutexHeldCount+0x24>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a186:	3201      	adds	r2, #1
 800a188:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a18a:	4b03      	ldr	r3, [pc, #12]	@ (800a198 <pvTaskIncrementMutexHeldCount+0x24>)
 800a18c:	681b      	ldr	r3, [r3, #0]
	}
 800a18e:	4618      	mov	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	20004b38 	.word	0x20004b38

0800a19c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1a6:	4b21      	ldr	r3, [pc, #132]	@ (800a22c <prvAddCurrentTaskToDelayedList+0x90>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ac:	4b20      	ldr	r3, [pc, #128]	@ (800a230 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fd fdd8 	bl	8007d68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1be:	d10a      	bne.n	800a1d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d007      	beq.n	800a1d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a230 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4819      	ldr	r0, [pc, #100]	@ (800a234 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1d0:	f7fd fd6d 	bl	8007cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1d4:	e026      	b.n	800a224 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4413      	add	r3, r2
 800a1dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1de:	4b14      	ldr	r3, [pc, #80]	@ (800a230 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d209      	bcs.n	800a202 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ee:	4b12      	ldr	r3, [pc, #72]	@ (800a238 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a230 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fd fd7b 	bl	8007cf6 <vListInsert>
}
 800a200:	e010      	b.n	800a224 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a202:	4b0e      	ldr	r3, [pc, #56]	@ (800a23c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	4b0a      	ldr	r3, [pc, #40]	@ (800a230 <prvAddCurrentTaskToDelayedList+0x94>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3304      	adds	r3, #4
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f7fd fd71 	bl	8007cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a214:	4b0a      	ldr	r3, [pc, #40]	@ (800a240 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d202      	bcs.n	800a224 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a21e:	4a08      	ldr	r2, [pc, #32]	@ (800a240 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	6013      	str	r3, [r2, #0]
}
 800a224:	bf00      	nop
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20005010 	.word	0x20005010
 800a230:	20004b38 	.word	0x20004b38
 800a234:	20004ff8 	.word	0x20004ff8
 800a238:	20004fc8 	.word	0x20004fc8
 800a23c:	20004fc4 	.word	0x20004fc4
 800a240:	2000502c 	.word	0x2000502c

0800a244 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08a      	sub	sp, #40	@ 0x28
 800a248:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a24e:	f000 fb13 	bl	800a878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a252:	4b1d      	ldr	r3, [pc, #116]	@ (800a2c8 <xTimerCreateTimerTask+0x84>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d021      	beq.n	800a29e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a262:	1d3a      	adds	r2, r7, #4
 800a264:	f107 0108 	add.w	r1, r7, #8
 800a268:	f107 030c 	add.w	r3, r7, #12
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fd fae9 	bl	8007844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	9202      	str	r2, [sp, #8]
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	2302      	movs	r3, #2
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	2300      	movs	r3, #0
 800a282:	460a      	mov	r2, r1
 800a284:	4911      	ldr	r1, [pc, #68]	@ (800a2cc <xTimerCreateTimerTask+0x88>)
 800a286:	4812      	ldr	r0, [pc, #72]	@ (800a2d0 <xTimerCreateTimerTask+0x8c>)
 800a288:	f7fe ff80 	bl	800918c <xTaskCreateStatic>
 800a28c:	4603      	mov	r3, r0
 800a28e:	4a11      	ldr	r2, [pc, #68]	@ (800a2d4 <xTimerCreateTimerTask+0x90>)
 800a290:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a292:	4b10      	ldr	r3, [pc, #64]	@ (800a2d4 <xTimerCreateTimerTask+0x90>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a29a:	2301      	movs	r3, #1
 800a29c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10b      	bne.n	800a2bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	613b      	str	r3, [r7, #16]
}
 800a2b6:	bf00      	nop
 800a2b8:	bf00      	nop
 800a2ba:	e7fd      	b.n	800a2b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2bc:	697b      	ldr	r3, [r7, #20]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20005068 	.word	0x20005068
 800a2cc:	0800bbd0 	.word	0x0800bbd0
 800a2d0:	0800a411 	.word	0x0800a411
 800a2d4:	2000506c 	.word	0x2000506c

0800a2d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	@ 0x28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <xTimerGenericCommand+0x30>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	623b      	str	r3, [r7, #32]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a308:	4b19      	ldr	r3, [pc, #100]	@ (800a370 <xTimerGenericCommand+0x98>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d02a      	beq.n	800a366 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2b05      	cmp	r3, #5
 800a320:	dc18      	bgt.n	800a354 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a322:	f7ff fdad 	bl	8009e80 <xTaskGetSchedulerState>
 800a326:	4603      	mov	r3, r0
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d109      	bne.n	800a340 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a32c:	4b10      	ldr	r3, [pc, #64]	@ (800a370 <xTimerGenericCommand+0x98>)
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	f107 0110 	add.w	r1, r7, #16
 800a334:	2300      	movs	r3, #0
 800a336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a338:	f7fe f98e 	bl	8008658 <xQueueGenericSend>
 800a33c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a33e:	e012      	b.n	800a366 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a340:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <xTimerGenericCommand+0x98>)
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	f107 0110 	add.w	r1, r7, #16
 800a348:	2300      	movs	r3, #0
 800a34a:	2200      	movs	r2, #0
 800a34c:	f7fe f984 	bl	8008658 <xQueueGenericSend>
 800a350:	6278      	str	r0, [r7, #36]	@ 0x24
 800a352:	e008      	b.n	800a366 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a354:	4b06      	ldr	r3, [pc, #24]	@ (800a370 <xTimerGenericCommand+0x98>)
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	f107 0110 	add.w	r1, r7, #16
 800a35c:	2300      	movs	r3, #0
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	f7fe fa7c 	bl	800885c <xQueueGenericSendFromISR>
 800a364:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3728      	adds	r7, #40	@ 0x28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20005068 	.word	0x20005068

0800a374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af02      	add	r7, sp, #8
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37e:	4b23      	ldr	r3, [pc, #140]	@ (800a40c <prvProcessExpiredTimer+0x98>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fd fceb 	bl	8007d68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d023      	beq.n	800a3e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	18d1      	adds	r1, r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	6978      	ldr	r0, [r7, #20]
 800a3ae:	f000 f8d5 	bl	800a55c <prvInsertTimerInActiveList>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d020      	beq.n	800a3fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6978      	ldr	r0, [r7, #20]
 800a3c4:	f7ff ff88 	bl	800a2d8 <xTimerGenericCommand>
 800a3c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d114      	bne.n	800a3fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	60fb      	str	r3, [r7, #12]
}
 800a3e2:	bf00      	nop
 800a3e4:	bf00      	nop
 800a3e6:	e7fd      	b.n	800a3e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3ee:	f023 0301 	bic.w	r3, r3, #1
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	6978      	ldr	r0, [r7, #20]
 800a400:	4798      	blx	r3
}
 800a402:	bf00      	nop
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20005060 	.word	0x20005060

0800a410 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a418:	f107 0308 	add.w	r3, r7, #8
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f859 	bl	800a4d4 <prvGetNextExpireTime>
 800a422:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f805 	bl	800a438 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a42e:	f000 f8d7 	bl	800a5e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a432:	bf00      	nop
 800a434:	e7f0      	b.n	800a418 <prvTimerTask+0x8>
	...

0800a438 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a442:	f7ff f907 	bl	8009654 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a446:	f107 0308 	add.w	r3, r7, #8
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 f866 	bl	800a51c <prvSampleTimeNow>
 800a450:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d130      	bne.n	800a4ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10a      	bne.n	800a474 <prvProcessTimerOrBlockTask+0x3c>
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	429a      	cmp	r2, r3
 800a464:	d806      	bhi.n	800a474 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a466:	f7ff f903 	bl	8009670 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a46a:	68f9      	ldr	r1, [r7, #12]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff ff81 	bl	800a374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a472:	e024      	b.n	800a4be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a47a:	4b13      	ldr	r3, [pc, #76]	@ (800a4c8 <prvProcessTimerOrBlockTask+0x90>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <prvProcessTimerOrBlockTask+0x50>
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <prvProcessTimerOrBlockTask+0x52>
 800a488:	2300      	movs	r3, #0
 800a48a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a48c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4cc <prvProcessTimerOrBlockTask+0x94>)
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	4619      	mov	r1, r3
 800a49a:	f7fe fe43 	bl	8009124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a49e:	f7ff f8e7 	bl	8009670 <xTaskResumeAll>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4a8:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <prvProcessTimerOrBlockTask+0x98>)
 800a4aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ae:	601a      	str	r2, [r3, #0]
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	f3bf 8f6f 	isb	sy
}
 800a4b8:	e001      	b.n	800a4be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4ba:	f7ff f8d9 	bl	8009670 <xTaskResumeAll>
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20005064 	.word	0x20005064
 800a4cc:	20005068 	.word	0x20005068
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a518 <prvGetNextExpireTime+0x44>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <prvGetNextExpireTime+0x16>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	e000      	b.n	800a4ec <prvGetNextExpireTime+0x18>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4f8:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <prvGetNextExpireTime+0x44>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	e001      	b.n	800a508 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a508:	68fb      	ldr	r3, [r7, #12]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	20005060 	.word	0x20005060

0800a51c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a524:	f7ff f942 	bl	80097ac <xTaskGetTickCount>
 800a528:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a52a:	4b0b      	ldr	r3, [pc, #44]	@ (800a558 <prvSampleTimeNow+0x3c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	429a      	cmp	r2, r3
 800a532:	d205      	bcs.n	800a540 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a534:	f000 f93a 	bl	800a7ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	e002      	b.n	800a546 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a546:	4a04      	ldr	r2, [pc, #16]	@ (800a558 <prvSampleTimeNow+0x3c>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a54c:	68fb      	ldr	r3, [r7, #12]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	20005070 	.word	0x20005070

0800a55c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a56a:	2300      	movs	r3, #0
 800a56c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d812      	bhi.n	800a5a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d302      	bcc.n	800a596 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e01b      	b.n	800a5ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a596:	4b10      	ldr	r3, [pc, #64]	@ (800a5d8 <prvInsertTimerInActiveList+0x7c>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3304      	adds	r3, #4
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7fd fba8 	bl	8007cf6 <vListInsert>
 800a5a6:	e012      	b.n	800a5ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d206      	bcs.n	800a5be <prvInsertTimerInActiveList+0x62>
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d302      	bcc.n	800a5be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	e007      	b.n	800a5ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5be:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <prvInsertTimerInActiveList+0x80>)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f7fd fb94 	bl	8007cf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5ce:	697b      	ldr	r3, [r7, #20]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20005064 	.word	0x20005064
 800a5dc:	20005060 	.word	0x20005060

0800a5e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	@ 0x38
 800a5e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5e6:	e0ce      	b.n	800a786 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	da19      	bge.n	800a622 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5ee:	1d3b      	adds	r3, r7, #4
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61fb      	str	r3, [r7, #28]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a618:	6850      	ldr	r0, [r2, #4]
 800a61a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a61c:	6892      	ldr	r2, [r2, #8]
 800a61e:	4611      	mov	r1, r2
 800a620:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f2c0 80ae 	blt.w	800a786 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	3304      	adds	r3, #4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fd fb94 	bl	8007d68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a640:	463b      	mov	r3, r7
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff ff6a 	bl	800a51c <prvSampleTimeNow>
 800a648:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b09      	cmp	r3, #9
 800a64e:	f200 8097 	bhi.w	800a780 <prvProcessReceivedCommands+0x1a0>
 800a652:	a201      	add	r2, pc, #4	@ (adr r2, 800a658 <prvProcessReceivedCommands+0x78>)
 800a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a658:	0800a681 	.word	0x0800a681
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a681 	.word	0x0800a681
 800a664:	0800a6f7 	.word	0x0800a6f7
 800a668:	0800a70b 	.word	0x0800a70b
 800a66c:	0800a757 	.word	0x0800a757
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a681 	.word	0x0800a681
 800a678:	0800a6f7 	.word	0x0800a6f7
 800a67c:	0800a70b 	.word	0x0800a70b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	18d1      	adds	r1, r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a69e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a0:	f7ff ff5c 	bl	800a55c <prvInsertTimerInActiveList>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d06c      	beq.n	800a784 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d061      	beq.n	800a784 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	441a      	add	r2, r3
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6d2:	f7ff fe01 	bl	800a2d8 <xTimerGenericCommand>
 800a6d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d152      	bne.n	800a784 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	61bb      	str	r3, [r7, #24]
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	e7fd      	b.n	800a6f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6fc:	f023 0301 	bic.w	r3, r3, #1
 800a700:	b2da      	uxtb	r2, r3
 800a702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a704:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a708:	e03d      	b.n	800a786 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a710:	f043 0301 	orr.w	r3, r3, #1
 800a714:	b2da      	uxtb	r2, r3
 800a716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	617b      	str	r3, [r7, #20]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	18d1      	adds	r1, r2, r3
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a74e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a750:	f7ff ff04 	bl	800a55c <prvInsertTimerInActiveList>
					break;
 800a754:	e017      	b.n	800a786 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d103      	bne.n	800a76c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a766:	f7fd f955 	bl	8007a14 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a76a:	e00c      	b.n	800a786 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a772:	f023 0301 	bic.w	r3, r3, #1
 800a776:	b2da      	uxtb	r2, r3
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a77e:	e002      	b.n	800a786 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a780:	bf00      	nop
 800a782:	e000      	b.n	800a786 <prvProcessReceivedCommands+0x1a6>
					break;
 800a784:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a786:	4b08      	ldr	r3, [pc, #32]	@ (800a7a8 <prvProcessReceivedCommands+0x1c8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	1d39      	adds	r1, r7, #4
 800a78c:	2200      	movs	r2, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe f902 	bl	8008998 <xQueueReceive>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	f47f af26 	bne.w	800a5e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	3730      	adds	r7, #48	@ 0x30
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20005068 	.word	0x20005068

0800a7ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7b2:	e049      	b.n	800a848 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7b4:	4b2e      	ldr	r3, [pc, #184]	@ (800a870 <prvSwitchTimerLists+0xc4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7be:	4b2c      	ldr	r3, [pc, #176]	@ (800a870 <prvSwitchTimerLists+0xc4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fd facb 	bl	8007d68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d02f      	beq.n	800a848 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d90e      	bls.n	800a818 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a806:	4b1a      	ldr	r3, [pc, #104]	@ (800a870 <prvSwitchTimerLists+0xc4>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4619      	mov	r1, r3
 800a810:	4610      	mov	r0, r2
 800a812:	f7fd fa70 	bl	8007cf6 <vListInsert>
 800a816:	e017      	b.n	800a848 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a818:	2300      	movs	r3, #0
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	2300      	movs	r3, #0
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	2100      	movs	r1, #0
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f7ff fd58 	bl	800a2d8 <xTimerGenericCommand>
 800a828:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10b      	bne.n	800a848 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	603b      	str	r3, [r7, #0]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a848:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <prvSwitchTimerLists+0xc4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1b0      	bne.n	800a7b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a852:	4b07      	ldr	r3, [pc, #28]	@ (800a870 <prvSwitchTimerLists+0xc4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a858:	4b06      	ldr	r3, [pc, #24]	@ (800a874 <prvSwitchTimerLists+0xc8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a04      	ldr	r2, [pc, #16]	@ (800a870 <prvSwitchTimerLists+0xc4>)
 800a85e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a860:	4a04      	ldr	r2, [pc, #16]	@ (800a874 <prvSwitchTimerLists+0xc8>)
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	6013      	str	r3, [r2, #0]
}
 800a866:	bf00      	nop
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20005060 	.word	0x20005060
 800a874:	20005064 	.word	0x20005064

0800a878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a87e:	f7fd fbcb 	bl	8008018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a882:	4b15      	ldr	r3, [pc, #84]	@ (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d120      	bne.n	800a8cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a88a:	4814      	ldr	r0, [pc, #80]	@ (800a8dc <prvCheckForValidListAndQueue+0x64>)
 800a88c:	f7fd f9e2 	bl	8007c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a890:	4813      	ldr	r0, [pc, #76]	@ (800a8e0 <prvCheckForValidListAndQueue+0x68>)
 800a892:	f7fd f9df 	bl	8007c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a896:	4b13      	ldr	r3, [pc, #76]	@ (800a8e4 <prvCheckForValidListAndQueue+0x6c>)
 800a898:	4a10      	ldr	r2, [pc, #64]	@ (800a8dc <prvCheckForValidListAndQueue+0x64>)
 800a89a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a89c:	4b12      	ldr	r3, [pc, #72]	@ (800a8e8 <prvCheckForValidListAndQueue+0x70>)
 800a89e:	4a10      	ldr	r2, [pc, #64]	@ (800a8e0 <prvCheckForValidListAndQueue+0x68>)
 800a8a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4b11      	ldr	r3, [pc, #68]	@ (800a8ec <prvCheckForValidListAndQueue+0x74>)
 800a8a8:	4a11      	ldr	r2, [pc, #68]	@ (800a8f0 <prvCheckForValidListAndQueue+0x78>)
 800a8aa:	2110      	movs	r1, #16
 800a8ac:	200a      	movs	r0, #10
 800a8ae:	f7fd fd3f 	bl	8008330 <xQueueGenericCreateStatic>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4a08      	ldr	r2, [pc, #32]	@ (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a8b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8b8:	4b07      	ldr	r3, [pc, #28]	@ (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <prvCheckForValidListAndQueue+0x60>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	490b      	ldr	r1, [pc, #44]	@ (800a8f4 <prvCheckForValidListAndQueue+0x7c>)
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fc02 	bl	80090d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8cc:	f7fd fbd6 	bl	800807c <vPortExitCritical>
}
 800a8d0:	bf00      	nop
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20005068 	.word	0x20005068
 800a8dc:	20005038 	.word	0x20005038
 800a8e0:	2000504c 	.word	0x2000504c
 800a8e4:	20005060 	.word	0x20005060
 800a8e8:	20005064 	.word	0x20005064
 800a8ec:	20005114 	.word	0x20005114
 800a8f0:	20005074 	.word	0x20005074
 800a8f4:	0800bbd8 	.word	0x0800bbd8

0800a8f8 <sniprintf>:
 800a8f8:	b40c      	push	{r2, r3}
 800a8fa:	b530      	push	{r4, r5, lr}
 800a8fc:	4b18      	ldr	r3, [pc, #96]	@ (800a960 <sniprintf+0x68>)
 800a8fe:	1e0c      	subs	r4, r1, #0
 800a900:	681d      	ldr	r5, [r3, #0]
 800a902:	b09d      	sub	sp, #116	@ 0x74
 800a904:	da08      	bge.n	800a918 <sniprintf+0x20>
 800a906:	238b      	movs	r3, #139	@ 0x8b
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	b01d      	add	sp, #116	@ 0x74
 800a910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a914:	b002      	add	sp, #8
 800a916:	4770      	bx	lr
 800a918:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a91c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a920:	f04f 0300 	mov.w	r3, #0
 800a924:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a926:	bf14      	ite	ne
 800a928:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a92c:	4623      	moveq	r3, r4
 800a92e:	9304      	str	r3, [sp, #16]
 800a930:	9307      	str	r3, [sp, #28]
 800a932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a936:	9002      	str	r0, [sp, #8]
 800a938:	9006      	str	r0, [sp, #24]
 800a93a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a93e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a940:	ab21      	add	r3, sp, #132	@ 0x84
 800a942:	a902      	add	r1, sp, #8
 800a944:	4628      	mov	r0, r5
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	f000 fa52 	bl	800adf0 <_svfiprintf_r>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	bfbc      	itt	lt
 800a950:	238b      	movlt	r3, #139	@ 0x8b
 800a952:	602b      	strlt	r3, [r5, #0]
 800a954:	2c00      	cmp	r4, #0
 800a956:	d0da      	beq.n	800a90e <sniprintf+0x16>
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e7d6      	b.n	800a90e <sniprintf+0x16>
 800a960:	20000014 	.word	0x20000014

0800a964 <siprintf>:
 800a964:	b40e      	push	{r1, r2, r3}
 800a966:	b510      	push	{r4, lr}
 800a968:	b09d      	sub	sp, #116	@ 0x74
 800a96a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a96c:	9002      	str	r0, [sp, #8]
 800a96e:	9006      	str	r0, [sp, #24]
 800a970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a974:	480a      	ldr	r0, [pc, #40]	@ (800a9a0 <siprintf+0x3c>)
 800a976:	9107      	str	r1, [sp, #28]
 800a978:	9104      	str	r1, [sp, #16]
 800a97a:	490a      	ldr	r1, [pc, #40]	@ (800a9a4 <siprintf+0x40>)
 800a97c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a980:	9105      	str	r1, [sp, #20]
 800a982:	2400      	movs	r4, #0
 800a984:	a902      	add	r1, sp, #8
 800a986:	6800      	ldr	r0, [r0, #0]
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a98c:	f000 fa30 	bl	800adf0 <_svfiprintf_r>
 800a990:	9b02      	ldr	r3, [sp, #8]
 800a992:	701c      	strb	r4, [r3, #0]
 800a994:	b01d      	add	sp, #116	@ 0x74
 800a996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a99a:	b003      	add	sp, #12
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	20000014 	.word	0x20000014
 800a9a4:	ffff0208 	.word	0xffff0208

0800a9a8 <memmove>:
 800a9a8:	4288      	cmp	r0, r1
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	eb01 0402 	add.w	r4, r1, r2
 800a9b0:	d902      	bls.n	800a9b8 <memmove+0x10>
 800a9b2:	4284      	cmp	r4, r0
 800a9b4:	4623      	mov	r3, r4
 800a9b6:	d807      	bhi.n	800a9c8 <memmove+0x20>
 800a9b8:	1e43      	subs	r3, r0, #1
 800a9ba:	42a1      	cmp	r1, r4
 800a9bc:	d008      	beq.n	800a9d0 <memmove+0x28>
 800a9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9c6:	e7f8      	b.n	800a9ba <memmove+0x12>
 800a9c8:	4402      	add	r2, r0
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	428a      	cmp	r2, r1
 800a9ce:	d100      	bne.n	800a9d2 <memmove+0x2a>
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9da:	e7f7      	b.n	800a9cc <memmove+0x24>

0800a9dc <memset>:
 800a9dc:	4402      	add	r2, r0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d100      	bne.n	800a9e6 <memset+0xa>
 800a9e4:	4770      	bx	lr
 800a9e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ea:	e7f9      	b.n	800a9e0 <memset+0x4>

0800a9ec <strstr>:
 800a9ec:	780a      	ldrb	r2, [r1, #0]
 800a9ee:	b570      	push	{r4, r5, r6, lr}
 800a9f0:	b96a      	cbnz	r2, 800aa0e <strstr+0x22>
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d109      	bne.n	800aa0c <strstr+0x20>
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0f6      	beq.n	800a9f2 <strstr+0x6>
 800aa04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800aa08:	429e      	cmp	r6, r3
 800aa0a:	d0f7      	beq.n	800a9fc <strstr+0x10>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	7803      	ldrb	r3, [r0, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1ef      	bne.n	800a9f4 <strstr+0x8>
 800aa14:	4618      	mov	r0, r3
 800aa16:	e7ec      	b.n	800a9f2 <strstr+0x6>

0800aa18 <_reclaim_reent>:
 800aa18:	4b2d      	ldr	r3, [pc, #180]	@ (800aad0 <_reclaim_reent+0xb8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4283      	cmp	r3, r0
 800aa1e:	b570      	push	{r4, r5, r6, lr}
 800aa20:	4604      	mov	r4, r0
 800aa22:	d053      	beq.n	800aacc <_reclaim_reent+0xb4>
 800aa24:	69c3      	ldr	r3, [r0, #28]
 800aa26:	b31b      	cbz	r3, 800aa70 <_reclaim_reent+0x58>
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	b163      	cbz	r3, 800aa46 <_reclaim_reent+0x2e>
 800aa2c:	2500      	movs	r5, #0
 800aa2e:	69e3      	ldr	r3, [r4, #28]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	5959      	ldr	r1, [r3, r5]
 800aa34:	b9b1      	cbnz	r1, 800aa64 <_reclaim_reent+0x4c>
 800aa36:	3504      	adds	r5, #4
 800aa38:	2d80      	cmp	r5, #128	@ 0x80
 800aa3a:	d1f8      	bne.n	800aa2e <_reclaim_reent+0x16>
 800aa3c:	69e3      	ldr	r3, [r4, #28]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	68d9      	ldr	r1, [r3, #12]
 800aa42:	f000 f881 	bl	800ab48 <_free_r>
 800aa46:	69e3      	ldr	r3, [r4, #28]
 800aa48:	6819      	ldr	r1, [r3, #0]
 800aa4a:	b111      	cbz	r1, 800aa52 <_reclaim_reent+0x3a>
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 f87b 	bl	800ab48 <_free_r>
 800aa52:	69e3      	ldr	r3, [r4, #28]
 800aa54:	689d      	ldr	r5, [r3, #8]
 800aa56:	b15d      	cbz	r5, 800aa70 <_reclaim_reent+0x58>
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	682d      	ldr	r5, [r5, #0]
 800aa5e:	f000 f873 	bl	800ab48 <_free_r>
 800aa62:	e7f8      	b.n	800aa56 <_reclaim_reent+0x3e>
 800aa64:	680e      	ldr	r6, [r1, #0]
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 f86e 	bl	800ab48 <_free_r>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	e7e1      	b.n	800aa34 <_reclaim_reent+0x1c>
 800aa70:	6961      	ldr	r1, [r4, #20]
 800aa72:	b111      	cbz	r1, 800aa7a <_reclaim_reent+0x62>
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 f867 	bl	800ab48 <_free_r>
 800aa7a:	69e1      	ldr	r1, [r4, #28]
 800aa7c:	b111      	cbz	r1, 800aa84 <_reclaim_reent+0x6c>
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f862 	bl	800ab48 <_free_r>
 800aa84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa86:	b111      	cbz	r1, 800aa8e <_reclaim_reent+0x76>
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 f85d 	bl	800ab48 <_free_r>
 800aa8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa90:	b111      	cbz	r1, 800aa98 <_reclaim_reent+0x80>
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 f858 	bl	800ab48 <_free_r>
 800aa98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aa9a:	b111      	cbz	r1, 800aaa2 <_reclaim_reent+0x8a>
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 f853 	bl	800ab48 <_free_r>
 800aaa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aaa4:	b111      	cbz	r1, 800aaac <_reclaim_reent+0x94>
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f84e 	bl	800ab48 <_free_r>
 800aaac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aaae:	b111      	cbz	r1, 800aab6 <_reclaim_reent+0x9e>
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 f849 	bl	800ab48 <_free_r>
 800aab6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aab8:	b111      	cbz	r1, 800aac0 <_reclaim_reent+0xa8>
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 f844 	bl	800ab48 <_free_r>
 800aac0:	6a23      	ldr	r3, [r4, #32]
 800aac2:	b11b      	cbz	r3, 800aacc <_reclaim_reent+0xb4>
 800aac4:	4620      	mov	r0, r4
 800aac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaca:	4718      	bx	r3
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
 800aace:	bf00      	nop
 800aad0:	20000014 	.word	0x20000014

0800aad4 <__errno>:
 800aad4:	4b01      	ldr	r3, [pc, #4]	@ (800aadc <__errno+0x8>)
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20000014 	.word	0x20000014

0800aae0 <__libc_init_array>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab18 <__libc_init_array+0x38>)
 800aae4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab1c <__libc_init_array+0x3c>)
 800aae6:	1b64      	subs	r4, r4, r5
 800aae8:	10a4      	asrs	r4, r4, #2
 800aaea:	2600      	movs	r6, #0
 800aaec:	42a6      	cmp	r6, r4
 800aaee:	d109      	bne.n	800ab04 <__libc_init_array+0x24>
 800aaf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ab20 <__libc_init_array+0x40>)
 800aaf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ab24 <__libc_init_array+0x44>)
 800aaf4:	f000 fc4a 	bl	800b38c <_init>
 800aaf8:	1b64      	subs	r4, r4, r5
 800aafa:	10a4      	asrs	r4, r4, #2
 800aafc:	2600      	movs	r6, #0
 800aafe:	42a6      	cmp	r6, r4
 800ab00:	d105      	bne.n	800ab0e <__libc_init_array+0x2e>
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
 800ab04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab08:	4798      	blx	r3
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	e7ee      	b.n	800aaec <__libc_init_array+0xc>
 800ab0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab12:	4798      	blx	r3
 800ab14:	3601      	adds	r6, #1
 800ab16:	e7f2      	b.n	800aafe <__libc_init_array+0x1e>
 800ab18:	0800bd34 	.word	0x0800bd34
 800ab1c:	0800bd34 	.word	0x0800bd34
 800ab20:	0800bd34 	.word	0x0800bd34
 800ab24:	0800bd38 	.word	0x0800bd38

0800ab28 <__retarget_lock_acquire_recursive>:
 800ab28:	4770      	bx	lr

0800ab2a <__retarget_lock_release_recursive>:
 800ab2a:	4770      	bx	lr

0800ab2c <memcpy>:
 800ab2c:	440a      	add	r2, r1
 800ab2e:	4291      	cmp	r1, r2
 800ab30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab34:	d100      	bne.n	800ab38 <memcpy+0xc>
 800ab36:	4770      	bx	lr
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab42:	4291      	cmp	r1, r2
 800ab44:	d1f9      	bne.n	800ab3a <memcpy+0xe>
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <_free_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	d041      	beq.n	800abd4 <_free_r+0x8c>
 800ab50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab54:	1f0c      	subs	r4, r1, #4
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bfb8      	it	lt
 800ab5a:	18e4      	addlt	r4, r4, r3
 800ab5c:	f000 f8e0 	bl	800ad20 <__malloc_lock>
 800ab60:	4a1d      	ldr	r2, [pc, #116]	@ (800abd8 <_free_r+0x90>)
 800ab62:	6813      	ldr	r3, [r2, #0]
 800ab64:	b933      	cbnz	r3, 800ab74 <_free_r+0x2c>
 800ab66:	6063      	str	r3, [r4, #4]
 800ab68:	6014      	str	r4, [r2, #0]
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab70:	f000 b8dc 	b.w	800ad2c <__malloc_unlock>
 800ab74:	42a3      	cmp	r3, r4
 800ab76:	d908      	bls.n	800ab8a <_free_r+0x42>
 800ab78:	6820      	ldr	r0, [r4, #0]
 800ab7a:	1821      	adds	r1, r4, r0
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	bf01      	itttt	eq
 800ab80:	6819      	ldreq	r1, [r3, #0]
 800ab82:	685b      	ldreq	r3, [r3, #4]
 800ab84:	1809      	addeq	r1, r1, r0
 800ab86:	6021      	streq	r1, [r4, #0]
 800ab88:	e7ed      	b.n	800ab66 <_free_r+0x1e>
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	b10b      	cbz	r3, 800ab94 <_free_r+0x4c>
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	d9fa      	bls.n	800ab8a <_free_r+0x42>
 800ab94:	6811      	ldr	r1, [r2, #0]
 800ab96:	1850      	adds	r0, r2, r1
 800ab98:	42a0      	cmp	r0, r4
 800ab9a:	d10b      	bne.n	800abb4 <_free_r+0x6c>
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	4401      	add	r1, r0
 800aba0:	1850      	adds	r0, r2, r1
 800aba2:	4283      	cmp	r3, r0
 800aba4:	6011      	str	r1, [r2, #0]
 800aba6:	d1e0      	bne.n	800ab6a <_free_r+0x22>
 800aba8:	6818      	ldr	r0, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	6053      	str	r3, [r2, #4]
 800abae:	4408      	add	r0, r1
 800abb0:	6010      	str	r0, [r2, #0]
 800abb2:	e7da      	b.n	800ab6a <_free_r+0x22>
 800abb4:	d902      	bls.n	800abbc <_free_r+0x74>
 800abb6:	230c      	movs	r3, #12
 800abb8:	602b      	str	r3, [r5, #0]
 800abba:	e7d6      	b.n	800ab6a <_free_r+0x22>
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	1821      	adds	r1, r4, r0
 800abc0:	428b      	cmp	r3, r1
 800abc2:	bf04      	itt	eq
 800abc4:	6819      	ldreq	r1, [r3, #0]
 800abc6:	685b      	ldreq	r3, [r3, #4]
 800abc8:	6063      	str	r3, [r4, #4]
 800abca:	bf04      	itt	eq
 800abcc:	1809      	addeq	r1, r1, r0
 800abce:	6021      	streq	r1, [r4, #0]
 800abd0:	6054      	str	r4, [r2, #4]
 800abd2:	e7ca      	b.n	800ab6a <_free_r+0x22>
 800abd4:	bd38      	pop	{r3, r4, r5, pc}
 800abd6:	bf00      	nop
 800abd8:	200052a8 	.word	0x200052a8

0800abdc <sbrk_aligned>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	4e0f      	ldr	r6, [pc, #60]	@ (800ac1c <sbrk_aligned+0x40>)
 800abe0:	460c      	mov	r4, r1
 800abe2:	6831      	ldr	r1, [r6, #0]
 800abe4:	4605      	mov	r5, r0
 800abe6:	b911      	cbnz	r1, 800abee <sbrk_aligned+0x12>
 800abe8:	f000 fb8a 	bl	800b300 <_sbrk_r>
 800abec:	6030      	str	r0, [r6, #0]
 800abee:	4621      	mov	r1, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	f000 fb85 	bl	800b300 <_sbrk_r>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d103      	bne.n	800ac02 <sbrk_aligned+0x26>
 800abfa:	f04f 34ff 	mov.w	r4, #4294967295
 800abfe:	4620      	mov	r0, r4
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
 800ac02:	1cc4      	adds	r4, r0, #3
 800ac04:	f024 0403 	bic.w	r4, r4, #3
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d0f8      	beq.n	800abfe <sbrk_aligned+0x22>
 800ac0c:	1a21      	subs	r1, r4, r0
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 fb76 	bl	800b300 <_sbrk_r>
 800ac14:	3001      	adds	r0, #1
 800ac16:	d1f2      	bne.n	800abfe <sbrk_aligned+0x22>
 800ac18:	e7ef      	b.n	800abfa <sbrk_aligned+0x1e>
 800ac1a:	bf00      	nop
 800ac1c:	200052a4 	.word	0x200052a4

0800ac20 <_malloc_r>:
 800ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	1ccd      	adds	r5, r1, #3
 800ac26:	f025 0503 	bic.w	r5, r5, #3
 800ac2a:	3508      	adds	r5, #8
 800ac2c:	2d0c      	cmp	r5, #12
 800ac2e:	bf38      	it	cc
 800ac30:	250c      	movcc	r5, #12
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	4606      	mov	r6, r0
 800ac36:	db01      	blt.n	800ac3c <_malloc_r+0x1c>
 800ac38:	42a9      	cmp	r1, r5
 800ac3a:	d904      	bls.n	800ac46 <_malloc_r+0x26>
 800ac3c:	230c      	movs	r3, #12
 800ac3e:	6033      	str	r3, [r6, #0]
 800ac40:	2000      	movs	r0, #0
 800ac42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad1c <_malloc_r+0xfc>
 800ac4a:	f000 f869 	bl	800ad20 <__malloc_lock>
 800ac4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac52:	461c      	mov	r4, r3
 800ac54:	bb44      	cbnz	r4, 800aca8 <_malloc_r+0x88>
 800ac56:	4629      	mov	r1, r5
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff ffbf 	bl	800abdc <sbrk_aligned>
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	4604      	mov	r4, r0
 800ac62:	d158      	bne.n	800ad16 <_malloc_r+0xf6>
 800ac64:	f8d8 4000 	ldr.w	r4, [r8]
 800ac68:	4627      	mov	r7, r4
 800ac6a:	2f00      	cmp	r7, #0
 800ac6c:	d143      	bne.n	800acf6 <_malloc_r+0xd6>
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	d04b      	beq.n	800ad0a <_malloc_r+0xea>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	4639      	mov	r1, r7
 800ac76:	4630      	mov	r0, r6
 800ac78:	eb04 0903 	add.w	r9, r4, r3
 800ac7c:	f000 fb40 	bl	800b300 <_sbrk_r>
 800ac80:	4581      	cmp	r9, r0
 800ac82:	d142      	bne.n	800ad0a <_malloc_r+0xea>
 800ac84:	6821      	ldr	r1, [r4, #0]
 800ac86:	1a6d      	subs	r5, r5, r1
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f7ff ffa6 	bl	800abdc <sbrk_aligned>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d03a      	beq.n	800ad0a <_malloc_r+0xea>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	442b      	add	r3, r5
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	bb62      	cbnz	r2, 800acfc <_malloc_r+0xdc>
 800aca2:	f8c8 7000 	str.w	r7, [r8]
 800aca6:	e00f      	b.n	800acc8 <_malloc_r+0xa8>
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	1b52      	subs	r2, r2, r5
 800acac:	d420      	bmi.n	800acf0 <_malloc_r+0xd0>
 800acae:	2a0b      	cmp	r2, #11
 800acb0:	d917      	bls.n	800ace2 <_malloc_r+0xc2>
 800acb2:	1961      	adds	r1, r4, r5
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	6025      	str	r5, [r4, #0]
 800acb8:	bf18      	it	ne
 800acba:	6059      	strne	r1, [r3, #4]
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	bf08      	it	eq
 800acc0:	f8c8 1000 	streq.w	r1, [r8]
 800acc4:	5162      	str	r2, [r4, r5]
 800acc6:	604b      	str	r3, [r1, #4]
 800acc8:	4630      	mov	r0, r6
 800acca:	f000 f82f 	bl	800ad2c <__malloc_unlock>
 800acce:	f104 000b 	add.w	r0, r4, #11
 800acd2:	1d23      	adds	r3, r4, #4
 800acd4:	f020 0007 	bic.w	r0, r0, #7
 800acd8:	1ac2      	subs	r2, r0, r3
 800acda:	bf1c      	itt	ne
 800acdc:	1a1b      	subne	r3, r3, r0
 800acde:	50a3      	strne	r3, [r4, r2]
 800ace0:	e7af      	b.n	800ac42 <_malloc_r+0x22>
 800ace2:	6862      	ldr	r2, [r4, #4]
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	bf0c      	ite	eq
 800ace8:	f8c8 2000 	streq.w	r2, [r8]
 800acec:	605a      	strne	r2, [r3, #4]
 800acee:	e7eb      	b.n	800acc8 <_malloc_r+0xa8>
 800acf0:	4623      	mov	r3, r4
 800acf2:	6864      	ldr	r4, [r4, #4]
 800acf4:	e7ae      	b.n	800ac54 <_malloc_r+0x34>
 800acf6:	463c      	mov	r4, r7
 800acf8:	687f      	ldr	r7, [r7, #4]
 800acfa:	e7b6      	b.n	800ac6a <_malloc_r+0x4a>
 800acfc:	461a      	mov	r2, r3
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d1fb      	bne.n	800acfc <_malloc_r+0xdc>
 800ad04:	2300      	movs	r3, #0
 800ad06:	6053      	str	r3, [r2, #4]
 800ad08:	e7de      	b.n	800acc8 <_malloc_r+0xa8>
 800ad0a:	230c      	movs	r3, #12
 800ad0c:	6033      	str	r3, [r6, #0]
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f000 f80c 	bl	800ad2c <__malloc_unlock>
 800ad14:	e794      	b.n	800ac40 <_malloc_r+0x20>
 800ad16:	6005      	str	r5, [r0, #0]
 800ad18:	e7d6      	b.n	800acc8 <_malloc_r+0xa8>
 800ad1a:	bf00      	nop
 800ad1c:	200052a8 	.word	0x200052a8

0800ad20 <__malloc_lock>:
 800ad20:	4801      	ldr	r0, [pc, #4]	@ (800ad28 <__malloc_lock+0x8>)
 800ad22:	f7ff bf01 	b.w	800ab28 <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	200052a0 	.word	0x200052a0

0800ad2c <__malloc_unlock>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <__malloc_unlock+0x8>)
 800ad2e:	f7ff befc 	b.w	800ab2a <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	200052a0 	.word	0x200052a0

0800ad38 <__ssputs_r>:
 800ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	688e      	ldr	r6, [r1, #8]
 800ad3e:	461f      	mov	r7, r3
 800ad40:	42be      	cmp	r6, r7
 800ad42:	680b      	ldr	r3, [r1, #0]
 800ad44:	4682      	mov	sl, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	4690      	mov	r8, r2
 800ad4a:	d82d      	bhi.n	800ada8 <__ssputs_r+0x70>
 800ad4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad54:	d026      	beq.n	800ada4 <__ssputs_r+0x6c>
 800ad56:	6965      	ldr	r5, [r4, #20]
 800ad58:	6909      	ldr	r1, [r1, #16]
 800ad5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad5e:	eba3 0901 	sub.w	r9, r3, r1
 800ad62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad66:	1c7b      	adds	r3, r7, #1
 800ad68:	444b      	add	r3, r9
 800ad6a:	106d      	asrs	r5, r5, #1
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	bf38      	it	cc
 800ad70:	461d      	movcc	r5, r3
 800ad72:	0553      	lsls	r3, r2, #21
 800ad74:	d527      	bpl.n	800adc6 <__ssputs_r+0x8e>
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7ff ff52 	bl	800ac20 <_malloc_r>
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	b360      	cbz	r0, 800adda <__ssputs_r+0xa2>
 800ad80:	6921      	ldr	r1, [r4, #16]
 800ad82:	464a      	mov	r2, r9
 800ad84:	f7ff fed2 	bl	800ab2c <memcpy>
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad92:	81a3      	strh	r3, [r4, #12]
 800ad94:	6126      	str	r6, [r4, #16]
 800ad96:	6165      	str	r5, [r4, #20]
 800ad98:	444e      	add	r6, r9
 800ad9a:	eba5 0509 	sub.w	r5, r5, r9
 800ad9e:	6026      	str	r6, [r4, #0]
 800ada0:	60a5      	str	r5, [r4, #8]
 800ada2:	463e      	mov	r6, r7
 800ada4:	42be      	cmp	r6, r7
 800ada6:	d900      	bls.n	800adaa <__ssputs_r+0x72>
 800ada8:	463e      	mov	r6, r7
 800adaa:	6820      	ldr	r0, [r4, #0]
 800adac:	4632      	mov	r2, r6
 800adae:	4641      	mov	r1, r8
 800adb0:	f7ff fdfa 	bl	800a9a8 <memmove>
 800adb4:	68a3      	ldr	r3, [r4, #8]
 800adb6:	1b9b      	subs	r3, r3, r6
 800adb8:	60a3      	str	r3, [r4, #8]
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	4433      	add	r3, r6
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	2000      	movs	r0, #0
 800adc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc6:	462a      	mov	r2, r5
 800adc8:	f000 faaa 	bl	800b320 <_realloc_r>
 800adcc:	4606      	mov	r6, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	d1e0      	bne.n	800ad94 <__ssputs_r+0x5c>
 800add2:	6921      	ldr	r1, [r4, #16]
 800add4:	4650      	mov	r0, sl
 800add6:	f7ff feb7 	bl	800ab48 <_free_r>
 800adda:	230c      	movs	r3, #12
 800addc:	f8ca 3000 	str.w	r3, [sl]
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e7e9      	b.n	800adc2 <__ssputs_r+0x8a>
	...

0800adf0 <_svfiprintf_r>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	4698      	mov	r8, r3
 800adf6:	898b      	ldrh	r3, [r1, #12]
 800adf8:	061b      	lsls	r3, r3, #24
 800adfa:	b09d      	sub	sp, #116	@ 0x74
 800adfc:	4607      	mov	r7, r0
 800adfe:	460d      	mov	r5, r1
 800ae00:	4614      	mov	r4, r2
 800ae02:	d510      	bpl.n	800ae26 <_svfiprintf_r+0x36>
 800ae04:	690b      	ldr	r3, [r1, #16]
 800ae06:	b973      	cbnz	r3, 800ae26 <_svfiprintf_r+0x36>
 800ae08:	2140      	movs	r1, #64	@ 0x40
 800ae0a:	f7ff ff09 	bl	800ac20 <_malloc_r>
 800ae0e:	6028      	str	r0, [r5, #0]
 800ae10:	6128      	str	r0, [r5, #16]
 800ae12:	b930      	cbnz	r0, 800ae22 <_svfiprintf_r+0x32>
 800ae14:	230c      	movs	r3, #12
 800ae16:	603b      	str	r3, [r7, #0]
 800ae18:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1c:	b01d      	add	sp, #116	@ 0x74
 800ae1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae22:	2340      	movs	r3, #64	@ 0x40
 800ae24:	616b      	str	r3, [r5, #20]
 800ae26:	2300      	movs	r3, #0
 800ae28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae2a:	2320      	movs	r3, #32
 800ae2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae34:	2330      	movs	r3, #48	@ 0x30
 800ae36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afd4 <_svfiprintf_r+0x1e4>
 800ae3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae3e:	f04f 0901 	mov.w	r9, #1
 800ae42:	4623      	mov	r3, r4
 800ae44:	469a      	mov	sl, r3
 800ae46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae4a:	b10a      	cbz	r2, 800ae50 <_svfiprintf_r+0x60>
 800ae4c:	2a25      	cmp	r2, #37	@ 0x25
 800ae4e:	d1f9      	bne.n	800ae44 <_svfiprintf_r+0x54>
 800ae50:	ebba 0b04 	subs.w	fp, sl, r4
 800ae54:	d00b      	beq.n	800ae6e <_svfiprintf_r+0x7e>
 800ae56:	465b      	mov	r3, fp
 800ae58:	4622      	mov	r2, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f7ff ff6b 	bl	800ad38 <__ssputs_r>
 800ae62:	3001      	adds	r0, #1
 800ae64:	f000 80a7 	beq.w	800afb6 <_svfiprintf_r+0x1c6>
 800ae68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae6a:	445a      	add	r2, fp
 800ae6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 809f 	beq.w	800afb6 <_svfiprintf_r+0x1c6>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae82:	f10a 0a01 	add.w	sl, sl, #1
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	9307      	str	r3, [sp, #28]
 800ae8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae90:	4654      	mov	r4, sl
 800ae92:	2205      	movs	r2, #5
 800ae94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae98:	484e      	ldr	r0, [pc, #312]	@ (800afd4 <_svfiprintf_r+0x1e4>)
 800ae9a:	f7f5 f9a9 	bl	80001f0 <memchr>
 800ae9e:	9a04      	ldr	r2, [sp, #16]
 800aea0:	b9d8      	cbnz	r0, 800aeda <_svfiprintf_r+0xea>
 800aea2:	06d0      	lsls	r0, r2, #27
 800aea4:	bf44      	itt	mi
 800aea6:	2320      	movmi	r3, #32
 800aea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeac:	0711      	lsls	r1, r2, #28
 800aeae:	bf44      	itt	mi
 800aeb0:	232b      	movmi	r3, #43	@ 0x2b
 800aeb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeba:	2b2a      	cmp	r3, #42	@ 0x2a
 800aebc:	d015      	beq.n	800aeea <_svfiprintf_r+0xfa>
 800aebe:	9a07      	ldr	r2, [sp, #28]
 800aec0:	4654      	mov	r4, sl
 800aec2:	2000      	movs	r0, #0
 800aec4:	f04f 0c0a 	mov.w	ip, #10
 800aec8:	4621      	mov	r1, r4
 800aeca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aece:	3b30      	subs	r3, #48	@ 0x30
 800aed0:	2b09      	cmp	r3, #9
 800aed2:	d94b      	bls.n	800af6c <_svfiprintf_r+0x17c>
 800aed4:	b1b0      	cbz	r0, 800af04 <_svfiprintf_r+0x114>
 800aed6:	9207      	str	r2, [sp, #28]
 800aed8:	e014      	b.n	800af04 <_svfiprintf_r+0x114>
 800aeda:	eba0 0308 	sub.w	r3, r0, r8
 800aede:	fa09 f303 	lsl.w	r3, r9, r3
 800aee2:	4313      	orrs	r3, r2
 800aee4:	9304      	str	r3, [sp, #16]
 800aee6:	46a2      	mov	sl, r4
 800aee8:	e7d2      	b.n	800ae90 <_svfiprintf_r+0xa0>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	1d19      	adds	r1, r3, #4
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	9103      	str	r1, [sp, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	bfbb      	ittet	lt
 800aef6:	425b      	neglt	r3, r3
 800aef8:	f042 0202 	orrlt.w	r2, r2, #2
 800aefc:	9307      	strge	r3, [sp, #28]
 800aefe:	9307      	strlt	r3, [sp, #28]
 800af00:	bfb8      	it	lt
 800af02:	9204      	strlt	r2, [sp, #16]
 800af04:	7823      	ldrb	r3, [r4, #0]
 800af06:	2b2e      	cmp	r3, #46	@ 0x2e
 800af08:	d10a      	bne.n	800af20 <_svfiprintf_r+0x130>
 800af0a:	7863      	ldrb	r3, [r4, #1]
 800af0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af0e:	d132      	bne.n	800af76 <_svfiprintf_r+0x186>
 800af10:	9b03      	ldr	r3, [sp, #12]
 800af12:	1d1a      	adds	r2, r3, #4
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	9203      	str	r2, [sp, #12]
 800af18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af1c:	3402      	adds	r4, #2
 800af1e:	9305      	str	r3, [sp, #20]
 800af20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afe4 <_svfiprintf_r+0x1f4>
 800af24:	7821      	ldrb	r1, [r4, #0]
 800af26:	2203      	movs	r2, #3
 800af28:	4650      	mov	r0, sl
 800af2a:	f7f5 f961 	bl	80001f0 <memchr>
 800af2e:	b138      	cbz	r0, 800af40 <_svfiprintf_r+0x150>
 800af30:	9b04      	ldr	r3, [sp, #16]
 800af32:	eba0 000a 	sub.w	r0, r0, sl
 800af36:	2240      	movs	r2, #64	@ 0x40
 800af38:	4082      	lsls	r2, r0
 800af3a:	4313      	orrs	r3, r2
 800af3c:	3401      	adds	r4, #1
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	4824      	ldr	r0, [pc, #144]	@ (800afd8 <_svfiprintf_r+0x1e8>)
 800af46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af4a:	2206      	movs	r2, #6
 800af4c:	f7f5 f950 	bl	80001f0 <memchr>
 800af50:	2800      	cmp	r0, #0
 800af52:	d036      	beq.n	800afc2 <_svfiprintf_r+0x1d2>
 800af54:	4b21      	ldr	r3, [pc, #132]	@ (800afdc <_svfiprintf_r+0x1ec>)
 800af56:	bb1b      	cbnz	r3, 800afa0 <_svfiprintf_r+0x1b0>
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	3307      	adds	r3, #7
 800af5c:	f023 0307 	bic.w	r3, r3, #7
 800af60:	3308      	adds	r3, #8
 800af62:	9303      	str	r3, [sp, #12]
 800af64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af66:	4433      	add	r3, r6
 800af68:	9309      	str	r3, [sp, #36]	@ 0x24
 800af6a:	e76a      	b.n	800ae42 <_svfiprintf_r+0x52>
 800af6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af70:	460c      	mov	r4, r1
 800af72:	2001      	movs	r0, #1
 800af74:	e7a8      	b.n	800aec8 <_svfiprintf_r+0xd8>
 800af76:	2300      	movs	r3, #0
 800af78:	3401      	adds	r4, #1
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	4619      	mov	r1, r3
 800af7e:	f04f 0c0a 	mov.w	ip, #10
 800af82:	4620      	mov	r0, r4
 800af84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af88:	3a30      	subs	r2, #48	@ 0x30
 800af8a:	2a09      	cmp	r2, #9
 800af8c:	d903      	bls.n	800af96 <_svfiprintf_r+0x1a6>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0c6      	beq.n	800af20 <_svfiprintf_r+0x130>
 800af92:	9105      	str	r1, [sp, #20]
 800af94:	e7c4      	b.n	800af20 <_svfiprintf_r+0x130>
 800af96:	fb0c 2101 	mla	r1, ip, r1, r2
 800af9a:	4604      	mov	r4, r0
 800af9c:	2301      	movs	r3, #1
 800af9e:	e7f0      	b.n	800af82 <_svfiprintf_r+0x192>
 800afa0:	ab03      	add	r3, sp, #12
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	462a      	mov	r2, r5
 800afa6:	4b0e      	ldr	r3, [pc, #56]	@ (800afe0 <_svfiprintf_r+0x1f0>)
 800afa8:	a904      	add	r1, sp, #16
 800afaa:	4638      	mov	r0, r7
 800afac:	f3af 8000 	nop.w
 800afb0:	1c42      	adds	r2, r0, #1
 800afb2:	4606      	mov	r6, r0
 800afb4:	d1d6      	bne.n	800af64 <_svfiprintf_r+0x174>
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	065b      	lsls	r3, r3, #25
 800afba:	f53f af2d 	bmi.w	800ae18 <_svfiprintf_r+0x28>
 800afbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afc0:	e72c      	b.n	800ae1c <_svfiprintf_r+0x2c>
 800afc2:	ab03      	add	r3, sp, #12
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	462a      	mov	r2, r5
 800afc8:	4b05      	ldr	r3, [pc, #20]	@ (800afe0 <_svfiprintf_r+0x1f0>)
 800afca:	a904      	add	r1, sp, #16
 800afcc:	4638      	mov	r0, r7
 800afce:	f000 f879 	bl	800b0c4 <_printf_i>
 800afd2:	e7ed      	b.n	800afb0 <_svfiprintf_r+0x1c0>
 800afd4:	0800bcf8 	.word	0x0800bcf8
 800afd8:	0800bd02 	.word	0x0800bd02
 800afdc:	00000000 	.word	0x00000000
 800afe0:	0800ad39 	.word	0x0800ad39
 800afe4:	0800bcfe 	.word	0x0800bcfe

0800afe8 <_printf_common>:
 800afe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afec:	4616      	mov	r6, r2
 800afee:	4698      	mov	r8, r3
 800aff0:	688a      	ldr	r2, [r1, #8]
 800aff2:	690b      	ldr	r3, [r1, #16]
 800aff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aff8:	4293      	cmp	r3, r2
 800affa:	bfb8      	it	lt
 800affc:	4613      	movlt	r3, r2
 800affe:	6033      	str	r3, [r6, #0]
 800b000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b004:	4607      	mov	r7, r0
 800b006:	460c      	mov	r4, r1
 800b008:	b10a      	cbz	r2, 800b00e <_printf_common+0x26>
 800b00a:	3301      	adds	r3, #1
 800b00c:	6033      	str	r3, [r6, #0]
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	0699      	lsls	r1, r3, #26
 800b012:	bf42      	ittt	mi
 800b014:	6833      	ldrmi	r3, [r6, #0]
 800b016:	3302      	addmi	r3, #2
 800b018:	6033      	strmi	r3, [r6, #0]
 800b01a:	6825      	ldr	r5, [r4, #0]
 800b01c:	f015 0506 	ands.w	r5, r5, #6
 800b020:	d106      	bne.n	800b030 <_printf_common+0x48>
 800b022:	f104 0a19 	add.w	sl, r4, #25
 800b026:	68e3      	ldr	r3, [r4, #12]
 800b028:	6832      	ldr	r2, [r6, #0]
 800b02a:	1a9b      	subs	r3, r3, r2
 800b02c:	42ab      	cmp	r3, r5
 800b02e:	dc26      	bgt.n	800b07e <_printf_common+0x96>
 800b030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b034:	6822      	ldr	r2, [r4, #0]
 800b036:	3b00      	subs	r3, #0
 800b038:	bf18      	it	ne
 800b03a:	2301      	movne	r3, #1
 800b03c:	0692      	lsls	r2, r2, #26
 800b03e:	d42b      	bmi.n	800b098 <_printf_common+0xb0>
 800b040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b044:	4641      	mov	r1, r8
 800b046:	4638      	mov	r0, r7
 800b048:	47c8      	blx	r9
 800b04a:	3001      	adds	r0, #1
 800b04c:	d01e      	beq.n	800b08c <_printf_common+0xa4>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	6922      	ldr	r2, [r4, #16]
 800b052:	f003 0306 	and.w	r3, r3, #6
 800b056:	2b04      	cmp	r3, #4
 800b058:	bf02      	ittt	eq
 800b05a:	68e5      	ldreq	r5, [r4, #12]
 800b05c:	6833      	ldreq	r3, [r6, #0]
 800b05e:	1aed      	subeq	r5, r5, r3
 800b060:	68a3      	ldr	r3, [r4, #8]
 800b062:	bf0c      	ite	eq
 800b064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b068:	2500      	movne	r5, #0
 800b06a:	4293      	cmp	r3, r2
 800b06c:	bfc4      	itt	gt
 800b06e:	1a9b      	subgt	r3, r3, r2
 800b070:	18ed      	addgt	r5, r5, r3
 800b072:	2600      	movs	r6, #0
 800b074:	341a      	adds	r4, #26
 800b076:	42b5      	cmp	r5, r6
 800b078:	d11a      	bne.n	800b0b0 <_printf_common+0xc8>
 800b07a:	2000      	movs	r0, #0
 800b07c:	e008      	b.n	800b090 <_printf_common+0xa8>
 800b07e:	2301      	movs	r3, #1
 800b080:	4652      	mov	r2, sl
 800b082:	4641      	mov	r1, r8
 800b084:	4638      	mov	r0, r7
 800b086:	47c8      	blx	r9
 800b088:	3001      	adds	r0, #1
 800b08a:	d103      	bne.n	800b094 <_printf_common+0xac>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b094:	3501      	adds	r5, #1
 800b096:	e7c6      	b.n	800b026 <_printf_common+0x3e>
 800b098:	18e1      	adds	r1, r4, r3
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	2030      	movs	r0, #48	@ 0x30
 800b09e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0a2:	4422      	add	r2, r4
 800b0a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0ac:	3302      	adds	r3, #2
 800b0ae:	e7c7      	b.n	800b040 <_printf_common+0x58>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	47c8      	blx	r9
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	d0e6      	beq.n	800b08c <_printf_common+0xa4>
 800b0be:	3601      	adds	r6, #1
 800b0c0:	e7d9      	b.n	800b076 <_printf_common+0x8e>
	...

0800b0c4 <_printf_i>:
 800b0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	7e0f      	ldrb	r7, [r1, #24]
 800b0ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0cc:	2f78      	cmp	r7, #120	@ 0x78
 800b0ce:	4691      	mov	r9, r2
 800b0d0:	4680      	mov	r8, r0
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	469a      	mov	sl, r3
 800b0d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0da:	d807      	bhi.n	800b0ec <_printf_i+0x28>
 800b0dc:	2f62      	cmp	r7, #98	@ 0x62
 800b0de:	d80a      	bhi.n	800b0f6 <_printf_i+0x32>
 800b0e0:	2f00      	cmp	r7, #0
 800b0e2:	f000 80d1 	beq.w	800b288 <_printf_i+0x1c4>
 800b0e6:	2f58      	cmp	r7, #88	@ 0x58
 800b0e8:	f000 80b8 	beq.w	800b25c <_printf_i+0x198>
 800b0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0f4:	e03a      	b.n	800b16c <_printf_i+0xa8>
 800b0f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0fa:	2b15      	cmp	r3, #21
 800b0fc:	d8f6      	bhi.n	800b0ec <_printf_i+0x28>
 800b0fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b104 <_printf_i+0x40>)
 800b100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b104:	0800b15d 	.word	0x0800b15d
 800b108:	0800b171 	.word	0x0800b171
 800b10c:	0800b0ed 	.word	0x0800b0ed
 800b110:	0800b0ed 	.word	0x0800b0ed
 800b114:	0800b0ed 	.word	0x0800b0ed
 800b118:	0800b0ed 	.word	0x0800b0ed
 800b11c:	0800b171 	.word	0x0800b171
 800b120:	0800b0ed 	.word	0x0800b0ed
 800b124:	0800b0ed 	.word	0x0800b0ed
 800b128:	0800b0ed 	.word	0x0800b0ed
 800b12c:	0800b0ed 	.word	0x0800b0ed
 800b130:	0800b26f 	.word	0x0800b26f
 800b134:	0800b19b 	.word	0x0800b19b
 800b138:	0800b229 	.word	0x0800b229
 800b13c:	0800b0ed 	.word	0x0800b0ed
 800b140:	0800b0ed 	.word	0x0800b0ed
 800b144:	0800b291 	.word	0x0800b291
 800b148:	0800b0ed 	.word	0x0800b0ed
 800b14c:	0800b19b 	.word	0x0800b19b
 800b150:	0800b0ed 	.word	0x0800b0ed
 800b154:	0800b0ed 	.word	0x0800b0ed
 800b158:	0800b231 	.word	0x0800b231
 800b15c:	6833      	ldr	r3, [r6, #0]
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6032      	str	r2, [r6, #0]
 800b164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b16c:	2301      	movs	r3, #1
 800b16e:	e09c      	b.n	800b2aa <_printf_i+0x1e6>
 800b170:	6833      	ldr	r3, [r6, #0]
 800b172:	6820      	ldr	r0, [r4, #0]
 800b174:	1d19      	adds	r1, r3, #4
 800b176:	6031      	str	r1, [r6, #0]
 800b178:	0606      	lsls	r6, r0, #24
 800b17a:	d501      	bpl.n	800b180 <_printf_i+0xbc>
 800b17c:	681d      	ldr	r5, [r3, #0]
 800b17e:	e003      	b.n	800b188 <_printf_i+0xc4>
 800b180:	0645      	lsls	r5, r0, #25
 800b182:	d5fb      	bpl.n	800b17c <_printf_i+0xb8>
 800b184:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b188:	2d00      	cmp	r5, #0
 800b18a:	da03      	bge.n	800b194 <_printf_i+0xd0>
 800b18c:	232d      	movs	r3, #45	@ 0x2d
 800b18e:	426d      	negs	r5, r5
 800b190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b194:	4858      	ldr	r0, [pc, #352]	@ (800b2f8 <_printf_i+0x234>)
 800b196:	230a      	movs	r3, #10
 800b198:	e011      	b.n	800b1be <_printf_i+0xfa>
 800b19a:	6821      	ldr	r1, [r4, #0]
 800b19c:	6833      	ldr	r3, [r6, #0]
 800b19e:	0608      	lsls	r0, r1, #24
 800b1a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1a4:	d402      	bmi.n	800b1ac <_printf_i+0xe8>
 800b1a6:	0649      	lsls	r1, r1, #25
 800b1a8:	bf48      	it	mi
 800b1aa:	b2ad      	uxthmi	r5, r5
 800b1ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1ae:	4852      	ldr	r0, [pc, #328]	@ (800b2f8 <_printf_i+0x234>)
 800b1b0:	6033      	str	r3, [r6, #0]
 800b1b2:	bf14      	ite	ne
 800b1b4:	230a      	movne	r3, #10
 800b1b6:	2308      	moveq	r3, #8
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1be:	6866      	ldr	r6, [r4, #4]
 800b1c0:	60a6      	str	r6, [r4, #8]
 800b1c2:	2e00      	cmp	r6, #0
 800b1c4:	db05      	blt.n	800b1d2 <_printf_i+0x10e>
 800b1c6:	6821      	ldr	r1, [r4, #0]
 800b1c8:	432e      	orrs	r6, r5
 800b1ca:	f021 0104 	bic.w	r1, r1, #4
 800b1ce:	6021      	str	r1, [r4, #0]
 800b1d0:	d04b      	beq.n	800b26a <_printf_i+0x1a6>
 800b1d2:	4616      	mov	r6, r2
 800b1d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1d8:	fb03 5711 	mls	r7, r3, r1, r5
 800b1dc:	5dc7      	ldrb	r7, [r0, r7]
 800b1de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1e2:	462f      	mov	r7, r5
 800b1e4:	42bb      	cmp	r3, r7
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	d9f4      	bls.n	800b1d4 <_printf_i+0x110>
 800b1ea:	2b08      	cmp	r3, #8
 800b1ec:	d10b      	bne.n	800b206 <_printf_i+0x142>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	07df      	lsls	r7, r3, #31
 800b1f2:	d508      	bpl.n	800b206 <_printf_i+0x142>
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	6861      	ldr	r1, [r4, #4]
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	bfde      	ittt	le
 800b1fc:	2330      	movle	r3, #48	@ 0x30
 800b1fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b202:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b206:	1b92      	subs	r2, r2, r6
 800b208:	6122      	str	r2, [r4, #16]
 800b20a:	f8cd a000 	str.w	sl, [sp]
 800b20e:	464b      	mov	r3, r9
 800b210:	aa03      	add	r2, sp, #12
 800b212:	4621      	mov	r1, r4
 800b214:	4640      	mov	r0, r8
 800b216:	f7ff fee7 	bl	800afe8 <_printf_common>
 800b21a:	3001      	adds	r0, #1
 800b21c:	d14a      	bne.n	800b2b4 <_printf_i+0x1f0>
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	b004      	add	sp, #16
 800b224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	f043 0320 	orr.w	r3, r3, #32
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	4832      	ldr	r0, [pc, #200]	@ (800b2fc <_printf_i+0x238>)
 800b232:	2778      	movs	r7, #120	@ 0x78
 800b234:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	6831      	ldr	r1, [r6, #0]
 800b23c:	061f      	lsls	r7, r3, #24
 800b23e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b242:	d402      	bmi.n	800b24a <_printf_i+0x186>
 800b244:	065f      	lsls	r7, r3, #25
 800b246:	bf48      	it	mi
 800b248:	b2ad      	uxthmi	r5, r5
 800b24a:	6031      	str	r1, [r6, #0]
 800b24c:	07d9      	lsls	r1, r3, #31
 800b24e:	bf44      	itt	mi
 800b250:	f043 0320 	orrmi.w	r3, r3, #32
 800b254:	6023      	strmi	r3, [r4, #0]
 800b256:	b11d      	cbz	r5, 800b260 <_printf_i+0x19c>
 800b258:	2310      	movs	r3, #16
 800b25a:	e7ad      	b.n	800b1b8 <_printf_i+0xf4>
 800b25c:	4826      	ldr	r0, [pc, #152]	@ (800b2f8 <_printf_i+0x234>)
 800b25e:	e7e9      	b.n	800b234 <_printf_i+0x170>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	f023 0320 	bic.w	r3, r3, #32
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	e7f6      	b.n	800b258 <_printf_i+0x194>
 800b26a:	4616      	mov	r6, r2
 800b26c:	e7bd      	b.n	800b1ea <_printf_i+0x126>
 800b26e:	6833      	ldr	r3, [r6, #0]
 800b270:	6825      	ldr	r5, [r4, #0]
 800b272:	6961      	ldr	r1, [r4, #20]
 800b274:	1d18      	adds	r0, r3, #4
 800b276:	6030      	str	r0, [r6, #0]
 800b278:	062e      	lsls	r6, r5, #24
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	d501      	bpl.n	800b282 <_printf_i+0x1be>
 800b27e:	6019      	str	r1, [r3, #0]
 800b280:	e002      	b.n	800b288 <_printf_i+0x1c4>
 800b282:	0668      	lsls	r0, r5, #25
 800b284:	d5fb      	bpl.n	800b27e <_printf_i+0x1ba>
 800b286:	8019      	strh	r1, [r3, #0]
 800b288:	2300      	movs	r3, #0
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	4616      	mov	r6, r2
 800b28e:	e7bc      	b.n	800b20a <_printf_i+0x146>
 800b290:	6833      	ldr	r3, [r6, #0]
 800b292:	1d1a      	adds	r2, r3, #4
 800b294:	6032      	str	r2, [r6, #0]
 800b296:	681e      	ldr	r6, [r3, #0]
 800b298:	6862      	ldr	r2, [r4, #4]
 800b29a:	2100      	movs	r1, #0
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7f4 ffa7 	bl	80001f0 <memchr>
 800b2a2:	b108      	cbz	r0, 800b2a8 <_printf_i+0x1e4>
 800b2a4:	1b80      	subs	r0, r0, r6
 800b2a6:	6060      	str	r0, [r4, #4]
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	6123      	str	r3, [r4, #16]
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2b2:	e7aa      	b.n	800b20a <_printf_i+0x146>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	47d0      	blx	sl
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d0ad      	beq.n	800b21e <_printf_i+0x15a>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	079b      	lsls	r3, r3, #30
 800b2c6:	d413      	bmi.n	800b2f0 <_printf_i+0x22c>
 800b2c8:	68e0      	ldr	r0, [r4, #12]
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	4298      	cmp	r0, r3
 800b2ce:	bfb8      	it	lt
 800b2d0:	4618      	movlt	r0, r3
 800b2d2:	e7a6      	b.n	800b222 <_printf_i+0x15e>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4640      	mov	r0, r8
 800b2dc:	47d0      	blx	sl
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d09d      	beq.n	800b21e <_printf_i+0x15a>
 800b2e2:	3501      	adds	r5, #1
 800b2e4:	68e3      	ldr	r3, [r4, #12]
 800b2e6:	9903      	ldr	r1, [sp, #12]
 800b2e8:	1a5b      	subs	r3, r3, r1
 800b2ea:	42ab      	cmp	r3, r5
 800b2ec:	dcf2      	bgt.n	800b2d4 <_printf_i+0x210>
 800b2ee:	e7eb      	b.n	800b2c8 <_printf_i+0x204>
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	f104 0619 	add.w	r6, r4, #25
 800b2f6:	e7f5      	b.n	800b2e4 <_printf_i+0x220>
 800b2f8:	0800bd09 	.word	0x0800bd09
 800b2fc:	0800bd1a 	.word	0x0800bd1a

0800b300 <_sbrk_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4d06      	ldr	r5, [pc, #24]	@ (800b31c <_sbrk_r+0x1c>)
 800b304:	2300      	movs	r3, #0
 800b306:	4604      	mov	r4, r0
 800b308:	4608      	mov	r0, r1
 800b30a:	602b      	str	r3, [r5, #0]
 800b30c:	f7f7 ff3c 	bl	8003188 <_sbrk>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d102      	bne.n	800b31a <_sbrk_r+0x1a>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b103      	cbz	r3, 800b31a <_sbrk_r+0x1a>
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	2000529c 	.word	0x2000529c

0800b320 <_realloc_r>:
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	4607      	mov	r7, r0
 800b326:	4614      	mov	r4, r2
 800b328:	460d      	mov	r5, r1
 800b32a:	b921      	cbnz	r1, 800b336 <_realloc_r+0x16>
 800b32c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b330:	4611      	mov	r1, r2
 800b332:	f7ff bc75 	b.w	800ac20 <_malloc_r>
 800b336:	b92a      	cbnz	r2, 800b344 <_realloc_r+0x24>
 800b338:	f7ff fc06 	bl	800ab48 <_free_r>
 800b33c:	4625      	mov	r5, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b344:	f000 f81a 	bl	800b37c <_malloc_usable_size_r>
 800b348:	4284      	cmp	r4, r0
 800b34a:	4606      	mov	r6, r0
 800b34c:	d802      	bhi.n	800b354 <_realloc_r+0x34>
 800b34e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b352:	d8f4      	bhi.n	800b33e <_realloc_r+0x1e>
 800b354:	4621      	mov	r1, r4
 800b356:	4638      	mov	r0, r7
 800b358:	f7ff fc62 	bl	800ac20 <_malloc_r>
 800b35c:	4680      	mov	r8, r0
 800b35e:	b908      	cbnz	r0, 800b364 <_realloc_r+0x44>
 800b360:	4645      	mov	r5, r8
 800b362:	e7ec      	b.n	800b33e <_realloc_r+0x1e>
 800b364:	42b4      	cmp	r4, r6
 800b366:	4622      	mov	r2, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	bf28      	it	cs
 800b36c:	4632      	movcs	r2, r6
 800b36e:	f7ff fbdd 	bl	800ab2c <memcpy>
 800b372:	4629      	mov	r1, r5
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff fbe7 	bl	800ab48 <_free_r>
 800b37a:	e7f1      	b.n	800b360 <_realloc_r+0x40>

0800b37c <_malloc_usable_size_r>:
 800b37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b380:	1f18      	subs	r0, r3, #4
 800b382:	2b00      	cmp	r3, #0
 800b384:	bfbc      	itt	lt
 800b386:	580b      	ldrlt	r3, [r1, r0]
 800b388:	18c0      	addlt	r0, r0, r3
 800b38a:	4770      	bx	lr

0800b38c <_init>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	bf00      	nop
 800b390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b392:	bc08      	pop	{r3}
 800b394:	469e      	mov	lr, r3
 800b396:	4770      	bx	lr

0800b398 <_fini>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	bf00      	nop
 800b39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39e:	bc08      	pop	{r3}
 800b3a0:	469e      	mov	lr, r3
 800b3a2:	4770      	bx	lr
